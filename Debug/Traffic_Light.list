
Traffic_Light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066a0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08006840  08006840  00007840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069d8  080069d8  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  080069d8  080069d8  000079d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069e0  080069e0  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069e0  080069e0  000079e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080069e4  080069e4  000079e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080069e8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bbc  2000006c  08006a54  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c28  08006a54  00008c28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014af5  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000304a  00000000  00000000  0001cb91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  0001fbe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e3e  00000000  00000000  00020e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004219  00000000  00000000  00021ca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013d42  00000000  00000000  00025ebf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097e1a  00000000  00000000  00039c01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d1a1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053a0  00000000  00000000  000d1a60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000d6e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006828 	.word	0x08006828

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08006828 	.word	0x08006828

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fcea 	bl	8000eac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f864 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f8c2 	bl	8000664 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004e0:	f001 feec 	bl	80022bc <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of PedestrainStatet */
  PedestrainStatetHandle = osSemaphoreNew(1, 1, &PedestrainStatet_attributes);
 80004e4:	4a1d      	ldr	r2, [pc, #116]	@ (800055c <main+0x8c>)
 80004e6:	2101      	movs	r1, #1
 80004e8:	2001      	movs	r0, #1
 80004ea:	f002 f835 	bl	8002558 <osSemaphoreNew>
 80004ee:	4603      	mov	r3, r0
 80004f0:	4a1b      	ldr	r2, [pc, #108]	@ (8000560 <main+0x90>)
 80004f2:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of SN_STATE */
  SN_STATEHandle = osMessageQueueNew (16, sizeof(uint16_t), &SN_STATE_attributes);
 80004f4:	4a1b      	ldr	r2, [pc, #108]	@ (8000564 <main+0x94>)
 80004f6:	2102      	movs	r1, #2
 80004f8:	2010      	movs	r0, #16
 80004fa:	f002 f94d 	bl	8002798 <osMessageQueueNew>
 80004fe:	4603      	mov	r3, r0
 8000500:	4a19      	ldr	r2, [pc, #100]	@ (8000568 <main+0x98>)
 8000502:	6013      	str	r3, [r2, #0]

  /* creation of WE_STATE */
  WE_STATEHandle = osMessageQueueNew (16, sizeof(uint16_t), &WE_STATE_attributes);
 8000504:	4a19      	ldr	r2, [pc, #100]	@ (800056c <main+0x9c>)
 8000506:	2102      	movs	r1, #2
 8000508:	2010      	movs	r0, #16
 800050a:	f002 f945 	bl	8002798 <osMessageQueueNew>
 800050e:	4603      	mov	r3, r0
 8000510:	4a17      	ldr	r2, [pc, #92]	@ (8000570 <main+0xa0>)
 8000512:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Traffic_control */
  Traffic_controlHandle = osThreadNew(Traffic_Light_Control, NULL, &Traffic_control_attributes);
 8000514:	4a17      	ldr	r2, [pc, #92]	@ (8000574 <main+0xa4>)
 8000516:	2100      	movs	r1, #0
 8000518:	4817      	ldr	r0, [pc, #92]	@ (8000578 <main+0xa8>)
 800051a:	f001 ff2e 	bl	800237a <osThreadNew>
 800051e:	4603      	mov	r3, r0
 8000520:	4a16      	ldr	r2, [pc, #88]	@ (800057c <main+0xac>)
 8000522:	6013      	str	r3, [r2, #0]

  /* creation of SN_Crossing */
  SN_CrossingHandle = osThreadNew(SN_Crossing_Task, NULL, &SN_Crossing_attributes);
 8000524:	4a16      	ldr	r2, [pc, #88]	@ (8000580 <main+0xb0>)
 8000526:	2100      	movs	r1, #0
 8000528:	4816      	ldr	r0, [pc, #88]	@ (8000584 <main+0xb4>)
 800052a:	f001 ff26 	bl	800237a <osThreadNew>
 800052e:	4603      	mov	r3, r0
 8000530:	4a15      	ldr	r2, [pc, #84]	@ (8000588 <main+0xb8>)
 8000532:	6013      	str	r3, [r2, #0]

  /* creation of interrupt */
  interruptHandle = osThreadNew(Button_Interrupt, NULL, &interrupt_attributes);
 8000534:	4a15      	ldr	r2, [pc, #84]	@ (800058c <main+0xbc>)
 8000536:	2100      	movs	r1, #0
 8000538:	4815      	ldr	r0, [pc, #84]	@ (8000590 <main+0xc0>)
 800053a:	f001 ff1e 	bl	800237a <osThreadNew>
 800053e:	4603      	mov	r3, r0
 8000540:	4a14      	ldr	r2, [pc, #80]	@ (8000594 <main+0xc4>)
 8000542:	6013      	str	r3, [r2, #0]

  /* creation of WE_Crossing */
  WE_CrossingHandle = osThreadNew(WE_Crossing_Task, NULL, &WE_Crossing_attributes);
 8000544:	4a14      	ldr	r2, [pc, #80]	@ (8000598 <main+0xc8>)
 8000546:	2100      	movs	r1, #0
 8000548:	4814      	ldr	r0, [pc, #80]	@ (800059c <main+0xcc>)
 800054a:	f001 ff16 	bl	800237a <osThreadNew>
 800054e:	4603      	mov	r3, r0
 8000550:	4a13      	ldr	r2, [pc, #76]	@ (80005a0 <main+0xd0>)
 8000552:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000554:	f001 fed6 	bl	8002304 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000558:	bf00      	nop
 800055a:	e7fd      	b.n	8000558 <main+0x88>
 800055c:	080069b0 	.word	0x080069b0
 8000560:	200000a0 	.word	0x200000a0
 8000564:	08006980 	.word	0x08006980
 8000568:	20000098 	.word	0x20000098
 800056c:	08006998 	.word	0x08006998
 8000570:	2000009c 	.word	0x2000009c
 8000574:	080068f0 	.word	0x080068f0
 8000578:	08000761 	.word	0x08000761
 800057c:	20000088 	.word	0x20000088
 8000580:	08006914 	.word	0x08006914
 8000584:	0800087d 	.word	0x0800087d
 8000588:	2000008c 	.word	0x2000008c
 800058c:	08006938 	.word	0x08006938
 8000590:	08000979 	.word	0x08000979
 8000594:	20000090 	.word	0x20000090
 8000598:	0800695c 	.word	0x0800695c
 800059c:	08000a39 	.word	0x08000a39
 80005a0:	20000094 	.word	0x20000094

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b094      	sub	sp, #80	@ 0x50
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 0320 	add.w	r3, r7, #32
 80005ae:	2230      	movs	r2, #48	@ 0x30
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f005 fe20 	bl	80061f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c8:	2300      	movs	r3, #0
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	4b23      	ldr	r3, [pc, #140]	@ (800065c <SystemClock_Config+0xb8>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d0:	4a22      	ldr	r2, [pc, #136]	@ (800065c <SystemClock_Config+0xb8>)
 80005d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005d8:	4b20      	ldr	r3, [pc, #128]	@ (800065c <SystemClock_Config+0xb8>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005e4:	2300      	movs	r3, #0
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000660 <SystemClock_Config+0xbc>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005f0:	4a1b      	ldr	r2, [pc, #108]	@ (8000660 <SystemClock_Config+0xbc>)
 80005f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80005f6:	6013      	str	r3, [r2, #0]
 80005f8:	4b19      	ldr	r3, [pc, #100]	@ (8000660 <SystemClock_Config+0xbc>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000604:	2302      	movs	r3, #2
 8000606:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000608:	2301      	movs	r3, #1
 800060a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800060c:	2310      	movs	r3, #16
 800060e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000610:	2300      	movs	r3, #0
 8000612:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000614:	f107 0320 	add.w	r3, r7, #32
 8000618:	4618      	mov	r0, r3
 800061a:	f000 ff21 	bl	8001460 <HAL_RCC_OscConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000624:	f000 fa98 	bl	8000b58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000628:	230f      	movs	r3, #15
 800062a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800062c:	2300      	movs	r3, #0
 800062e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f001 f984 	bl	8001950 <HAL_RCC_ClockConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800064e:	f000 fa83 	bl	8000b58 <Error_Handler>
  }
}
 8000652:	bf00      	nop
 8000654:	3750      	adds	r7, #80	@ 0x50
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40023800 	.word	0x40023800
 8000660:	40007000 	.word	0x40007000

08000664 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b088      	sub	sp, #32
 8000668:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066a:	f107 030c 	add.w	r3, r7, #12
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
 8000678:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	4b35      	ldr	r3, [pc, #212]	@ (8000754 <MX_GPIO_Init+0xf0>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	4a34      	ldr	r2, [pc, #208]	@ (8000754 <MX_GPIO_Init+0xf0>)
 8000684:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000688:	6313      	str	r3, [r2, #48]	@ 0x30
 800068a:	4b32      	ldr	r3, [pc, #200]	@ (8000754 <MX_GPIO_Init+0xf0>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	4b2e      	ldr	r3, [pc, #184]	@ (8000754 <MX_GPIO_Init+0xf0>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069e:	4a2d      	ldr	r2, [pc, #180]	@ (8000754 <MX_GPIO_Init+0xf0>)
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006a6:	4b2b      	ldr	r3, [pc, #172]	@ (8000754 <MX_GPIO_Init+0xf0>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	603b      	str	r3, [r7, #0]
 80006b6:	4b27      	ldr	r3, [pc, #156]	@ (8000754 <MX_GPIO_Init+0xf0>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	4a26      	ldr	r2, [pc, #152]	@ (8000754 <MX_GPIO_Init+0xf0>)
 80006bc:	f043 0302 	orr.w	r3, r3, #2
 80006c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c2:	4b24      	ldr	r3, [pc, #144]	@ (8000754 <MX_GPIO_Init+0xf0>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	f003 0302 	and.w	r3, r3, #2
 80006ca:	603b      	str	r3, [r7, #0]
 80006cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, G_SN_Pin|Y_SN_Pin|R_SN_Pin|PedestrainMove_SN_Pin
 80006ce:	2200      	movs	r2, #0
 80006d0:	2137      	movs	r1, #55	@ 0x37
 80006d2:	4821      	ldr	r0, [pc, #132]	@ (8000758 <MX_GPIO_Init+0xf4>)
 80006d4:	f000 feaa 	bl	800142c <HAL_GPIO_WritePin>
                          |PedestrainStop_SN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, G_WE_Pin|Y_WE_Pin|R_WE_Pin|PedestrainMove_WE_Pin
 80006d8:	2200      	movs	r2, #0
 80006da:	2137      	movs	r1, #55	@ 0x37
 80006dc:	481f      	ldr	r0, [pc, #124]	@ (800075c <MX_GPIO_Init+0xf8>)
 80006de:	f000 fea5 	bl	800142c <HAL_GPIO_WritePin>
                          |PedestrainStop_WE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : G_SN_Pin Y_SN_Pin R_SN_Pin PedestrainMove_SN_Pin
                           PedestrainStop_SN_Pin */
  GPIO_InitStruct.Pin = G_SN_Pin|Y_SN_Pin|R_SN_Pin|PedestrainMove_SN_Pin
 80006e2:	2337      	movs	r3, #55	@ 0x37
 80006e4:	60fb      	str	r3, [r7, #12]
                          |PedestrainStop_SN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e6:	2301      	movs	r3, #1
 80006e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f2:	f107 030c 	add.w	r3, r7, #12
 80006f6:	4619      	mov	r1, r3
 80006f8:	4817      	ldr	r0, [pc, #92]	@ (8000758 <MX_GPIO_Init+0xf4>)
 80006fa:	f000 fcfb 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PS_NS_Pin */
  GPIO_InitStruct.Pin = PS_NS_Pin;
 80006fe:	2308      	movs	r3, #8
 8000700:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000702:	2300      	movs	r3, #0
 8000704:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000706:	2301      	movs	r3, #1
 8000708:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PS_NS_GPIO_Port, &GPIO_InitStruct);
 800070a:	f107 030c 	add.w	r3, r7, #12
 800070e:	4619      	mov	r1, r3
 8000710:	4811      	ldr	r0, [pc, #68]	@ (8000758 <MX_GPIO_Init+0xf4>)
 8000712:	f000 fcef 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : G_WE_Pin Y_WE_Pin R_WE_Pin PedestrainMove_WE_Pin
                           PedestrainStop_WE_Pin */
  GPIO_InitStruct.Pin = G_WE_Pin|Y_WE_Pin|R_WE_Pin|PedestrainMove_WE_Pin
 8000716:	2337      	movs	r3, #55	@ 0x37
 8000718:	60fb      	str	r3, [r7, #12]
                          |PedestrainStop_WE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071a:	2301      	movs	r3, #1
 800071c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000722:	2300      	movs	r3, #0
 8000724:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000726:	f107 030c 	add.w	r3, r7, #12
 800072a:	4619      	mov	r1, r3
 800072c:	480b      	ldr	r0, [pc, #44]	@ (800075c <MX_GPIO_Init+0xf8>)
 800072e:	f000 fce1 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PS_WE_Pin */
  GPIO_InitStruct.Pin = PS_WE_Pin;
 8000732:	2308      	movs	r3, #8
 8000734:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800073a:	2301      	movs	r3, #1
 800073c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PS_WE_GPIO_Port, &GPIO_InitStruct);
 800073e:	f107 030c 	add.w	r3, r7, #12
 8000742:	4619      	mov	r1, r3
 8000744:	4805      	ldr	r0, [pc, #20]	@ (800075c <MX_GPIO_Init+0xf8>)
 8000746:	f000 fcd5 	bl	80010f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800074a:	bf00      	nop
 800074c:	3720      	adds	r7, #32
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40023800 	.word	0x40023800
 8000758:	40020000 	.word	0x40020000
 800075c:	40020400 	.word	0x40020400

08000760 <Traffic_Light_Control>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Traffic_Light_Control */
void Traffic_Light_Control(void *argument)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if (osSemaphoreAcquire(PedestrainStatetHandle, osWaitForever) == osOK)
 8000768:	4b41      	ldr	r3, [pc, #260]	@ (8000870 <Traffic_Light_Control+0x110>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f04f 31ff 	mov.w	r1, #4294967295
 8000770:	4618      	mov	r0, r3
 8000772:	f001 ff7b 	bl	800266c <osSemaphoreAcquire>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d1f5      	bne.n	8000768 <Traffic_Light_Control+0x8>
	     {
	       /* North-South Green, West-East Red */
	       HAL_GPIO_WritePin(PedestrainStop_SN_GPIO_Port, PedestrainStop_SN_Pin, GPIO_PIN_SET);
 800077c:	2201      	movs	r2, #1
 800077e:	2120      	movs	r1, #32
 8000780:	483c      	ldr	r0, [pc, #240]	@ (8000874 <Traffic_Light_Control+0x114>)
 8000782:	f000 fe53 	bl	800142c <HAL_GPIO_WritePin>
	 	   HAL_GPIO_WritePin(PedestrainStop_WE_GPIO_Port, PedestrainStop_SN_Pin, GPIO_PIN_SET);
 8000786:	2201      	movs	r2, #1
 8000788:	2120      	movs	r1, #32
 800078a:	483b      	ldr	r0, [pc, #236]	@ (8000878 <Traffic_Light_Control+0x118>)
 800078c:	f000 fe4e 	bl	800142c <HAL_GPIO_WritePin>

	       HAL_GPIO_WritePin(GPIOA, G_SN_Pin, GPIO_PIN_SET);
 8000790:	2201      	movs	r2, #1
 8000792:	2101      	movs	r1, #1
 8000794:	4837      	ldr	r0, [pc, #220]	@ (8000874 <Traffic_Light_Control+0x114>)
 8000796:	f000 fe49 	bl	800142c <HAL_GPIO_WritePin>
	       HAL_GPIO_WritePin(GPIOA, Y_SN_Pin, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	2102      	movs	r1, #2
 800079e:	4835      	ldr	r0, [pc, #212]	@ (8000874 <Traffic_Light_Control+0x114>)
 80007a0:	f000 fe44 	bl	800142c <HAL_GPIO_WritePin>
	       HAL_GPIO_WritePin(GPIOA, R_SN_Pin, GPIO_PIN_RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2104      	movs	r1, #4
 80007a8:	4832      	ldr	r0, [pc, #200]	@ (8000874 <Traffic_Light_Control+0x114>)
 80007aa:	f000 fe3f 	bl	800142c <HAL_GPIO_WritePin>
	       HAL_GPIO_WritePin(GPIOB, R_WE_Pin, GPIO_PIN_SET);
 80007ae:	2201      	movs	r2, #1
 80007b0:	2104      	movs	r1, #4
 80007b2:	4831      	ldr	r0, [pc, #196]	@ (8000878 <Traffic_Light_Control+0x118>)
 80007b4:	f000 fe3a 	bl	800142c <HAL_GPIO_WritePin>
	       HAL_GPIO_WritePin(GPIOB, G_WE_Pin, GPIO_PIN_RESET);
 80007b8:	2200      	movs	r2, #0
 80007ba:	2101      	movs	r1, #1
 80007bc:	482e      	ldr	r0, [pc, #184]	@ (8000878 <Traffic_Light_Control+0x118>)
 80007be:	f000 fe35 	bl	800142c <HAL_GPIO_WritePin>
	       HAL_GPIO_WritePin(GPIOB, Y_WE_Pin, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2102      	movs	r1, #2
 80007c6:	482c      	ldr	r0, [pc, #176]	@ (8000878 <Traffic_Light_Control+0x118>)
 80007c8:	f000 fe30 	bl	800142c <HAL_GPIO_WritePin>
	       osDelay(8000);
 80007cc:	f44f 50fa 	mov.w	r0, #8000	@ 0x1f40
 80007d0:	f001 fea7 	bl	8002522 <osDelay>

	       /* North-South Yellow, West-East Red */
	       HAL_GPIO_WritePin(GPIOA, G_SN_Pin, GPIO_PIN_RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2101      	movs	r1, #1
 80007d8:	4826      	ldr	r0, [pc, #152]	@ (8000874 <Traffic_Light_Control+0x114>)
 80007da:	f000 fe27 	bl	800142c <HAL_GPIO_WritePin>
	       HAL_GPIO_WritePin(GPIOA, Y_SN_Pin, GPIO_PIN_SET);
 80007de:	2201      	movs	r2, #1
 80007e0:	2102      	movs	r1, #2
 80007e2:	4824      	ldr	r0, [pc, #144]	@ (8000874 <Traffic_Light_Control+0x114>)
 80007e4:	f000 fe22 	bl	800142c <HAL_GPIO_WritePin>
	       HAL_GPIO_WritePin(GPIOA, R_SN_Pin, GPIO_PIN_RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	2104      	movs	r1, #4
 80007ec:	4821      	ldr	r0, [pc, #132]	@ (8000874 <Traffic_Light_Control+0x114>)
 80007ee:	f000 fe1d 	bl	800142c <HAL_GPIO_WritePin>
	       osDelay(2000);
 80007f2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80007f6:	f001 fe94 	bl	8002522 <osDelay>

	       /* North-South Red, West-East Green */
	       HAL_GPIO_WritePin(GPIOA, R_SN_Pin, GPIO_PIN_SET);
 80007fa:	2201      	movs	r2, #1
 80007fc:	2104      	movs	r1, #4
 80007fe:	481d      	ldr	r0, [pc, #116]	@ (8000874 <Traffic_Light_Control+0x114>)
 8000800:	f000 fe14 	bl	800142c <HAL_GPIO_WritePin>
	       HAL_GPIO_WritePin(GPIOA, G_SN_Pin, GPIO_PIN_RESET);
 8000804:	2200      	movs	r2, #0
 8000806:	2101      	movs	r1, #1
 8000808:	481a      	ldr	r0, [pc, #104]	@ (8000874 <Traffic_Light_Control+0x114>)
 800080a:	f000 fe0f 	bl	800142c <HAL_GPIO_WritePin>
	       HAL_GPIO_WritePin(GPIOA, Y_SN_Pin, GPIO_PIN_RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	2102      	movs	r1, #2
 8000812:	4818      	ldr	r0, [pc, #96]	@ (8000874 <Traffic_Light_Control+0x114>)
 8000814:	f000 fe0a 	bl	800142c <HAL_GPIO_WritePin>
	       HAL_GPIO_WritePin(GPIOB, G_WE_Pin, GPIO_PIN_SET);
 8000818:	2201      	movs	r2, #1
 800081a:	2101      	movs	r1, #1
 800081c:	4816      	ldr	r0, [pc, #88]	@ (8000878 <Traffic_Light_Control+0x118>)
 800081e:	f000 fe05 	bl	800142c <HAL_GPIO_WritePin>
	       HAL_GPIO_WritePin(GPIOB, Y_WE_Pin, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	2102      	movs	r1, #2
 8000826:	4814      	ldr	r0, [pc, #80]	@ (8000878 <Traffic_Light_Control+0x118>)
 8000828:	f000 fe00 	bl	800142c <HAL_GPIO_WritePin>
	       HAL_GPIO_WritePin(GPIOB, R_WE_Pin, GPIO_PIN_RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	2104      	movs	r1, #4
 8000830:	4811      	ldr	r0, [pc, #68]	@ (8000878 <Traffic_Light_Control+0x118>)
 8000832:	f000 fdfb 	bl	800142c <HAL_GPIO_WritePin>
	       osDelay(8000);
 8000836:	f44f 50fa 	mov.w	r0, #8000	@ 0x1f40
 800083a:	f001 fe72 	bl	8002522 <osDelay>

	       /* North-South Red, West-East Yellow */
	       HAL_GPIO_WritePin(GPIOB, G_WE_Pin, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	2101      	movs	r1, #1
 8000842:	480d      	ldr	r0, [pc, #52]	@ (8000878 <Traffic_Light_Control+0x118>)
 8000844:	f000 fdf2 	bl	800142c <HAL_GPIO_WritePin>
	       HAL_GPIO_WritePin(GPIOB, Y_WE_Pin, GPIO_PIN_SET);
 8000848:	2201      	movs	r2, #1
 800084a:	2102      	movs	r1, #2
 800084c:	480a      	ldr	r0, [pc, #40]	@ (8000878 <Traffic_Light_Control+0x118>)
 800084e:	f000 fded 	bl	800142c <HAL_GPIO_WritePin>
	       HAL_GPIO_WritePin(GPIOB, R_WE_Pin, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	2104      	movs	r1, #4
 8000856:	4808      	ldr	r0, [pc, #32]	@ (8000878 <Traffic_Light_Control+0x118>)
 8000858:	f000 fde8 	bl	800142c <HAL_GPIO_WritePin>
	       osDelay(2000);
 800085c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000860:	f001 fe5f 	bl	8002522 <osDelay>

	       osSemaphoreRelease(PedestrainStatetHandle);
 8000864:	4b02      	ldr	r3, [pc, #8]	@ (8000870 <Traffic_Light_Control+0x110>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4618      	mov	r0, r3
 800086a:	f001 ff51 	bl	8002710 <osSemaphoreRelease>
	  if (osSemaphoreAcquire(PedestrainStatetHandle, osWaitForever) == osOK)
 800086e:	e77b      	b.n	8000768 <Traffic_Light_Control+0x8>
 8000870:	200000a0 	.word	0x200000a0
 8000874:	40020000 	.word	0x40020000
 8000878:	40020400 	.word	0x40020400

0800087c <SN_Crossing_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SN_Crossing_Task */
void SN_Crossing_Task(void *argument)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SN_Crossing_Task */
  /* Infinite loop */
	uint16_t msg=0;
 8000884:	2300      	movs	r3, #0
 8000886:	81fb      	strh	r3, [r7, #14]
  for(;;)
  {
	  if(osMessageQueueGet(SN_STATEHandle, &msg, 0,osWaitForever)==osOK)
 8000888:	4b38      	ldr	r3, [pc, #224]	@ (800096c <SN_Crossing_Task+0xf0>)
 800088a:	6818      	ldr	r0, [r3, #0]
 800088c:	f107 010e 	add.w	r1, r7, #14
 8000890:	f04f 33ff 	mov.w	r3, #4294967295
 8000894:	2200      	movs	r2, #0
 8000896:	f002 f853 	bl	8002940 <osMessageQueueGet>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d160      	bne.n	8000962 <SN_Crossing_Task+0xe6>
	  {
		  if (msg == S_N)
 80008a0:	89fb      	ldrh	r3, [r7, #14]
 80008a2:	2b0a      	cmp	r3, #10
 80008a4:	d15d      	bne.n	8000962 <SN_Crossing_Task+0xe6>
			  {
				/* North-South pedestrian crossing */
				osThreadSuspend(Traffic_controlHandle);
 80008a6:	4b32      	ldr	r3, [pc, #200]	@ (8000970 <SN_Crossing_Task+0xf4>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4618      	mov	r0, r3
 80008ac:	f001 fdf7 	bl	800249e <osThreadSuspend>

				HAL_GPIO_WritePin(GPIOA, R_SN_Pin, GPIO_PIN_SET);
 80008b0:	2201      	movs	r2, #1
 80008b2:	2104      	movs	r1, #4
 80008b4:	482f      	ldr	r0, [pc, #188]	@ (8000974 <SN_Crossing_Task+0xf8>)
 80008b6:	f000 fdb9 	bl	800142c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, G_SN_Pin, GPIO_PIN_RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2101      	movs	r1, #1
 80008be:	482d      	ldr	r0, [pc, #180]	@ (8000974 <SN_Crossing_Task+0xf8>)
 80008c0:	f000 fdb4 	bl	800142c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, Y_SN_Pin, GPIO_PIN_RESET);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2102      	movs	r1, #2
 80008c8:	482a      	ldr	r0, [pc, #168]	@ (8000974 <SN_Crossing_Task+0xf8>)
 80008ca:	f000 fdaf 	bl	800142c <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(PedestrainStop_SN_GPIO_Port, PedestrainStop_SN_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2120      	movs	r1, #32
 80008d2:	4828      	ldr	r0, [pc, #160]	@ (8000974 <SN_Crossing_Task+0xf8>)
 80008d4:	f000 fdaa 	bl	800142c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(PedestrainMove_SN_GPIO_Port, PedestrainMove_SN_Pin, GPIO_PIN_SET);
 80008d8:	2201      	movs	r2, #1
 80008da:	2110      	movs	r1, #16
 80008dc:	4825      	ldr	r0, [pc, #148]	@ (8000974 <SN_Crossing_Task+0xf8>)
 80008de:	f000 fda5 	bl	800142c <HAL_GPIO_WritePin>
				osDelay(5000);
 80008e2:	f241 3088 	movw	r0, #5000	@ 0x1388
 80008e6:	f001 fe1c 	bl	8002522 <osDelay>
				HAL_GPIO_WritePin(PedestrainMove_SN_GPIO_Port, PedestrainMove_SN_Pin, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2110      	movs	r1, #16
 80008ee:	4821      	ldr	r0, [pc, #132]	@ (8000974 <SN_Crossing_Task+0xf8>)
 80008f0:	f000 fd9c 	bl	800142c <HAL_GPIO_WritePin>
				osDelay(1000);
 80008f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008f8:	f001 fe13 	bl	8002522 <osDelay>
				HAL_GPIO_WritePin(PedestrainMove_SN_GPIO_Port, PedestrainMove_SN_Pin, GPIO_PIN_SET);
 80008fc:	2201      	movs	r2, #1
 80008fe:	2110      	movs	r1, #16
 8000900:	481c      	ldr	r0, [pc, #112]	@ (8000974 <SN_Crossing_Task+0xf8>)
 8000902:	f000 fd93 	bl	800142c <HAL_GPIO_WritePin>
				osDelay(1000);
 8000906:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800090a:	f001 fe0a 	bl	8002522 <osDelay>
				HAL_GPIO_WritePin(PedestrainMove_SN_GPIO_Port, PedestrainMove_SN_Pin, GPIO_PIN_RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	2110      	movs	r1, #16
 8000912:	4818      	ldr	r0, [pc, #96]	@ (8000974 <SN_Crossing_Task+0xf8>)
 8000914:	f000 fd8a 	bl	800142c <HAL_GPIO_WritePin>
				osDelay(1000);
 8000918:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800091c:	f001 fe01 	bl	8002522 <osDelay>
				HAL_GPIO_WritePin(PedestrainMove_SN_GPIO_Port, PedestrainMove_SN_Pin, GPIO_PIN_SET);
 8000920:	2201      	movs	r2, #1
 8000922:	2110      	movs	r1, #16
 8000924:	4813      	ldr	r0, [pc, #76]	@ (8000974 <SN_Crossing_Task+0xf8>)
 8000926:	f000 fd81 	bl	800142c <HAL_GPIO_WritePin>
				osDelay(1000);
 800092a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800092e:	f001 fdf8 	bl	8002522 <osDelay>
				HAL_GPIO_WritePin(PedestrainMove_SN_GPIO_Port, PedestrainMove_SN_Pin, GPIO_PIN_RESET);
 8000932:	2200      	movs	r2, #0
 8000934:	2110      	movs	r1, #16
 8000936:	480f      	ldr	r0, [pc, #60]	@ (8000974 <SN_Crossing_Task+0xf8>)
 8000938:	f000 fd78 	bl	800142c <HAL_GPIO_WritePin>
				osDelay(1000);
 800093c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000940:	f001 fdef 	bl	8002522 <osDelay>


				HAL_GPIO_WritePin(PedestrainMove_SN_GPIO_Port, PedestrainMove_SN_Pin, GPIO_PIN_RESET);
 8000944:	2200      	movs	r2, #0
 8000946:	2110      	movs	r1, #16
 8000948:	480a      	ldr	r0, [pc, #40]	@ (8000974 <SN_Crossing_Task+0xf8>)
 800094a:	f000 fd6f 	bl	800142c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(PedestrainStop_SN_GPIO_Port, PedestrainStop_SN_Pin, GPIO_PIN_SET);
 800094e:	2201      	movs	r2, #1
 8000950:	2120      	movs	r1, #32
 8000952:	4808      	ldr	r0, [pc, #32]	@ (8000974 <SN_Crossing_Task+0xf8>)
 8000954:	f000 fd6a 	bl	800142c <HAL_GPIO_WritePin>
				osThreadResume(Traffic_controlHandle);
 8000958:	4b05      	ldr	r3, [pc, #20]	@ (8000970 <SN_Crossing_Task+0xf4>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4618      	mov	r0, r3
 800095e:	f001 fdbf 	bl	80024e0 <osThreadResume>
			  }
	  }


	  osDelay(100);
 8000962:	2064      	movs	r0, #100	@ 0x64
 8000964:	f001 fddd 	bl	8002522 <osDelay>
	  if(osMessageQueueGet(SN_STATEHandle, &msg, 0,osWaitForever)==osOK)
 8000968:	e78e      	b.n	8000888 <SN_Crossing_Task+0xc>
 800096a:	bf00      	nop
 800096c:	20000098 	.word	0x20000098
 8000970:	20000088 	.word	0x20000088
 8000974:	40020000 	.word	0x40020000

08000978 <Button_Interrupt>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Button_Interrupt */
void Button_Interrupt(void *argument)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
	uint32_t last_tick = osKernelGetTickCount();
 8000980:	f001 fce6 	bl	8002350 <osKernelGetTickCount>
 8000984:	6178      	str	r0, [r7, #20]
	    const uint32_t debounce_time = 50; // Debounce time in milliseconds
 8000986:	2332      	movs	r3, #50	@ 0x32
 8000988:	613b      	str	r3, [r7, #16]
	    uint16_t msg = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	81fb      	strh	r3, [r7, #14]
	    for (;;)
	    {
	        // Check North-South button
	        if (HAL_GPIO_ReadPin(PS_NS_GPIO_Port, PS_NS_Pin) == GPIO_PIN_RESET)
 800098e:	2108      	movs	r1, #8
 8000990:	4824      	ldr	r0, [pc, #144]	@ (8000a24 <Button_Interrupt+0xac>)
 8000992:	f000 fd33 	bl	80013fc <HAL_GPIO_ReadPin>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d11b      	bne.n	80009d4 <Button_Interrupt+0x5c>
	        {
	            // Debounce check
	        	osDelay(debounce_time);
 800099c:	6938      	ldr	r0, [r7, #16]
 800099e:	f001 fdc0 	bl	8002522 <osDelay>
	            if ((osKernelGetTickCount() - last_tick) >= debounce_time)
 80009a2:	f001 fcd5 	bl	8002350 <osKernelGetTickCount>
 80009a6:	4602      	mov	r2, r0
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	1ad3      	subs	r3, r2, r3
 80009ac:	693a      	ldr	r2, [r7, #16]
 80009ae:	429a      	cmp	r2, r3
 80009b0:	d810      	bhi.n	80009d4 <Button_Interrupt+0x5c>
	            {
	                printf("North-South button pressed!\n");
 80009b2:	481d      	ldr	r0, [pc, #116]	@ (8000a28 <Button_Interrupt+0xb0>)
 80009b4:	f005 fb40 	bl	8006038 <puts>

	                // Create and send a message for North-South pedestrian crossing
	                msg = S_N;
 80009b8:	230a      	movs	r3, #10
 80009ba:	81fb      	strh	r3, [r7, #14]
	                osMessageQueuePut(SN_STATEHandle, &msg, 0, osWaitForever);
 80009bc:	4b1b      	ldr	r3, [pc, #108]	@ (8000a2c <Button_Interrupt+0xb4>)
 80009be:	6818      	ldr	r0, [r3, #0]
 80009c0:	f107 010e 	add.w	r1, r7, #14
 80009c4:	f04f 33ff 	mov.w	r3, #4294967295
 80009c8:	2200      	movs	r2, #0
 80009ca:	f001 ff59 	bl	8002880 <osMessageQueuePut>
	                last_tick = osKernelGetTickCount(); // Update last tick for debouncing
 80009ce:	f001 fcbf 	bl	8002350 <osKernelGetTickCount>
 80009d2:	6178      	str	r0, [r7, #20]
	            }
	        }
	        // Check West-East button
	        if (HAL_GPIO_ReadPin(PS_WE_GPIO_Port, PS_WE_Pin) == GPIO_PIN_RESET)
 80009d4:	2108      	movs	r1, #8
 80009d6:	4816      	ldr	r0, [pc, #88]	@ (8000a30 <Button_Interrupt+0xb8>)
 80009d8:	f000 fd10 	bl	80013fc <HAL_GPIO_ReadPin>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d11b      	bne.n	8000a1a <Button_Interrupt+0xa2>
	        {
	            // Debounce check
	        	osDelay(debounce_time);
 80009e2:	6938      	ldr	r0, [r7, #16]
 80009e4:	f001 fd9d 	bl	8002522 <osDelay>
	            if ((osKernelGetTickCount() - last_tick) >= debounce_time)
 80009e8:	f001 fcb2 	bl	8002350 <osKernelGetTickCount>
 80009ec:	4602      	mov	r2, r0
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	1ad3      	subs	r3, r2, r3
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d810      	bhi.n	8000a1a <Button_Interrupt+0xa2>
	            {
	                printf("West-East button pressed!\n");
 80009f8:	480e      	ldr	r0, [pc, #56]	@ (8000a34 <Button_Interrupt+0xbc>)
 80009fa:	f005 fb1d 	bl	8006038 <puts>

	                // Create and send a message for West-East pedestrian crossing
	                msg =W_E;
 80009fe:	2314      	movs	r3, #20
 8000a00:	81fb      	strh	r3, [r7, #14]
	                osMessageQueuePut(SN_STATEHandle, &msg, 0, osWaitForever);
 8000a02:	4b0a      	ldr	r3, [pc, #40]	@ (8000a2c <Button_Interrupt+0xb4>)
 8000a04:	6818      	ldr	r0, [r3, #0]
 8000a06:	f107 010e 	add.w	r1, r7, #14
 8000a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f001 ff36 	bl	8002880 <osMessageQueuePut>

	                last_tick = osKernelGetTickCount(); // Update last tick for debouncing
 8000a14:	f001 fc9c 	bl	8002350 <osKernelGetTickCount>
 8000a18:	6178      	str	r0, [r7, #20]
	            }
	        }

	        // Delay to reduce CPU usage
	        osDelay(10);
 8000a1a:	200a      	movs	r0, #10
 8000a1c:	f001 fd81 	bl	8002522 <osDelay>
	        if (HAL_GPIO_ReadPin(PS_NS_GPIO_Port, PS_NS_Pin) == GPIO_PIN_RESET)
 8000a20:	e7b5      	b.n	800098e <Button_Interrupt+0x16>
 8000a22:	bf00      	nop
 8000a24:	40020000 	.word	0x40020000
 8000a28:	080068a0 	.word	0x080068a0
 8000a2c:	20000098 	.word	0x20000098
 8000a30:	40020400 	.word	0x40020400
 8000a34:	080068bc 	.word	0x080068bc

08000a38 <WE_Crossing_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_WE_Crossing_Task */
void WE_Crossing_Task(void *argument)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN WE_Crossing_Task */
  /* Infinite loop */
	uint16_t msg=0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	81fb      	strh	r3, [r7, #14]
  for(;;)
  {
	  if(osMessageQueueGet(SN_STATEHandle, &msg, 0,osWaitForever)==osOK)
 8000a44:	4b38      	ldr	r3, [pc, #224]	@ (8000b28 <WE_Crossing_Task+0xf0>)
 8000a46:	6818      	ldr	r0, [r3, #0]
 8000a48:	f107 010e 	add.w	r1, r7, #14
 8000a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a50:	2200      	movs	r2, #0
 8000a52:	f001 ff75 	bl	8002940 <osMessageQueueGet>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d160      	bne.n	8000b1e <WE_Crossing_Task+0xe6>
	  {
		  if (msg == W_E)
 8000a5c:	89fb      	ldrh	r3, [r7, #14]
 8000a5e:	2b14      	cmp	r3, #20
 8000a60:	d15d      	bne.n	8000b1e <WE_Crossing_Task+0xe6>
		  	  {
		  		/* North-South pedestrian crossing */
		  		osThreadSuspend(Traffic_controlHandle);
 8000a62:	4b32      	ldr	r3, [pc, #200]	@ (8000b2c <WE_Crossing_Task+0xf4>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4618      	mov	r0, r3
 8000a68:	f001 fd19 	bl	800249e <osThreadSuspend>

		  		HAL_GPIO_WritePin(GPIOB, R_WE_Pin, GPIO_PIN_SET);
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	2104      	movs	r1, #4
 8000a70:	482f      	ldr	r0, [pc, #188]	@ (8000b30 <WE_Crossing_Task+0xf8>)
 8000a72:	f000 fcdb 	bl	800142c <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(GPIOB, G_WE_Pin, GPIO_PIN_RESET);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2101      	movs	r1, #1
 8000a7a:	482d      	ldr	r0, [pc, #180]	@ (8000b30 <WE_Crossing_Task+0xf8>)
 8000a7c:	f000 fcd6 	bl	800142c <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(GPIOB, Y_WE_Pin, GPIO_PIN_RESET);
 8000a80:	2200      	movs	r2, #0
 8000a82:	2102      	movs	r1, #2
 8000a84:	482a      	ldr	r0, [pc, #168]	@ (8000b30 <WE_Crossing_Task+0xf8>)
 8000a86:	f000 fcd1 	bl	800142c <HAL_GPIO_WritePin>

		  		HAL_GPIO_WritePin(PedestrainStop_WE_GPIO_Port, PedestrainStop_WE_Pin, GPIO_PIN_RESET);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2120      	movs	r1, #32
 8000a8e:	4828      	ldr	r0, [pc, #160]	@ (8000b30 <WE_Crossing_Task+0xf8>)
 8000a90:	f000 fccc 	bl	800142c <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(PedestrainMove_WE_GPIO_Port, PedestrainMove_WE_Pin, GPIO_PIN_SET);
 8000a94:	2201      	movs	r2, #1
 8000a96:	2110      	movs	r1, #16
 8000a98:	4825      	ldr	r0, [pc, #148]	@ (8000b30 <WE_Crossing_Task+0xf8>)
 8000a9a:	f000 fcc7 	bl	800142c <HAL_GPIO_WritePin>
		  		osDelay(5000);
 8000a9e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000aa2:	f001 fd3e 	bl	8002522 <osDelay>

		  		HAL_GPIO_WritePin(PedestrainMove_WE_GPIO_Port, PedestrainMove_WE_Pin, GPIO_PIN_RESET);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2110      	movs	r1, #16
 8000aaa:	4821      	ldr	r0, [pc, #132]	@ (8000b30 <WE_Crossing_Task+0xf8>)
 8000aac:	f000 fcbe 	bl	800142c <HAL_GPIO_WritePin>
		  		osDelay(1000);
 8000ab0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ab4:	f001 fd35 	bl	8002522 <osDelay>
		  		HAL_GPIO_WritePin(PedestrainMove_WE_GPIO_Port, PedestrainMove_WE_Pin, GPIO_PIN_SET);
 8000ab8:	2201      	movs	r2, #1
 8000aba:	2110      	movs	r1, #16
 8000abc:	481c      	ldr	r0, [pc, #112]	@ (8000b30 <WE_Crossing_Task+0xf8>)
 8000abe:	f000 fcb5 	bl	800142c <HAL_GPIO_WritePin>
		  		osDelay(1000);
 8000ac2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ac6:	f001 fd2c 	bl	8002522 <osDelay>
		  		HAL_GPIO_WritePin(PedestrainMove_WE_GPIO_Port, PedestrainMove_WE_Pin, GPIO_PIN_RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2110      	movs	r1, #16
 8000ace:	4818      	ldr	r0, [pc, #96]	@ (8000b30 <WE_Crossing_Task+0xf8>)
 8000ad0:	f000 fcac 	bl	800142c <HAL_GPIO_WritePin>
		  		osDelay(1000);
 8000ad4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ad8:	f001 fd23 	bl	8002522 <osDelay>
		  		HAL_GPIO_WritePin(PedestrainMove_WE_GPIO_Port, PedestrainMove_WE_Pin, GPIO_PIN_SET);
 8000adc:	2201      	movs	r2, #1
 8000ade:	2110      	movs	r1, #16
 8000ae0:	4813      	ldr	r0, [pc, #76]	@ (8000b30 <WE_Crossing_Task+0xf8>)
 8000ae2:	f000 fca3 	bl	800142c <HAL_GPIO_WritePin>
		  		osDelay(1000);
 8000ae6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000aea:	f001 fd1a 	bl	8002522 <osDelay>
		  		HAL_GPIO_WritePin(PedestrainMove_WE_GPIO_Port, PedestrainMove_WE_Pin, GPIO_PIN_RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2110      	movs	r1, #16
 8000af2:	480f      	ldr	r0, [pc, #60]	@ (8000b30 <WE_Crossing_Task+0xf8>)
 8000af4:	f000 fc9a 	bl	800142c <HAL_GPIO_WritePin>
		  		osDelay(1000);
 8000af8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000afc:	f001 fd11 	bl	8002522 <osDelay>

		  		HAL_GPIO_WritePin(PedestrainMove_WE_GPIO_Port, PedestrainMove_WE_Pin, GPIO_PIN_RESET);
 8000b00:	2200      	movs	r2, #0
 8000b02:	2110      	movs	r1, #16
 8000b04:	480a      	ldr	r0, [pc, #40]	@ (8000b30 <WE_Crossing_Task+0xf8>)
 8000b06:	f000 fc91 	bl	800142c <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(PedestrainStop_WE_GPIO_Port, PedestrainStop_WE_Pin, GPIO_PIN_SET);
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	2120      	movs	r1, #32
 8000b0e:	4808      	ldr	r0, [pc, #32]	@ (8000b30 <WE_Crossing_Task+0xf8>)
 8000b10:	f000 fc8c 	bl	800142c <HAL_GPIO_WritePin>
		  		osThreadResume(Traffic_controlHandle);
 8000b14:	4b05      	ldr	r3, [pc, #20]	@ (8000b2c <WE_Crossing_Task+0xf4>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f001 fce1 	bl	80024e0 <osThreadResume>
		  	  }
	  }


	  osDelay(100);
 8000b1e:	2064      	movs	r0, #100	@ 0x64
 8000b20:	f001 fcff 	bl	8002522 <osDelay>
	  if(osMessageQueueGet(SN_STATEHandle, &msg, 0,osWaitForever)==osOK)
 8000b24:	e78e      	b.n	8000a44 <WE_Crossing_Task+0xc>
 8000b26:	bf00      	nop
 8000b28:	20000098 	.word	0x20000098
 8000b2c:	20000088 	.word	0x20000088
 8000b30:	40020400 	.word	0x40020400

08000b34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a04      	ldr	r2, [pc, #16]	@ (8000b54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d101      	bne.n	8000b4a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b46:	f000 f9d3 	bl	8000ef0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40010000 	.word	0x40010000

08000b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b5c:	b672      	cpsid	i
}
 8000b5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <Error_Handler+0x8>

08000b64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	607b      	str	r3, [r7, #4]
 8000b6e:	4b12      	ldr	r3, [pc, #72]	@ (8000bb8 <HAL_MspInit+0x54>)
 8000b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b72:	4a11      	ldr	r2, [pc, #68]	@ (8000bb8 <HAL_MspInit+0x54>)
 8000b74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b78:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb8 <HAL_MspInit+0x54>)
 8000b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	603b      	str	r3, [r7, #0]
 8000b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb8 <HAL_MspInit+0x54>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb8 <HAL_MspInit+0x54>)
 8000b90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b94:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b96:	4b08      	ldr	r3, [pc, #32]	@ (8000bb8 <HAL_MspInit+0x54>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	210f      	movs	r1, #15
 8000ba6:	f06f 0001 	mvn.w	r0, #1
 8000baa:	f000 fa79 	bl	80010a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40023800 	.word	0x40023800

08000bbc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08c      	sub	sp, #48	@ 0x30
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60bb      	str	r3, [r7, #8]
 8000bd0:	4b2e      	ldr	r3, [pc, #184]	@ (8000c8c <HAL_InitTick+0xd0>)
 8000bd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bd4:	4a2d      	ldr	r2, [pc, #180]	@ (8000c8c <HAL_InitTick+0xd0>)
 8000bd6:	f043 0301 	orr.w	r3, r3, #1
 8000bda:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bdc:	4b2b      	ldr	r3, [pc, #172]	@ (8000c8c <HAL_InitTick+0xd0>)
 8000bde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000be0:	f003 0301 	and.w	r3, r3, #1
 8000be4:	60bb      	str	r3, [r7, #8]
 8000be6:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000be8:	f107 020c 	add.w	r2, r7, #12
 8000bec:	f107 0310 	add.w	r3, r7, #16
 8000bf0:	4611      	mov	r1, r2
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f001 f878 	bl	8001ce8 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000bf8:	f001 f862 	bl	8001cc0 <HAL_RCC_GetPCLK2Freq>
 8000bfc:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c00:	4a23      	ldr	r2, [pc, #140]	@ (8000c90 <HAL_InitTick+0xd4>)
 8000c02:	fba2 2303 	umull	r2, r3, r2, r3
 8000c06:	0c9b      	lsrs	r3, r3, #18
 8000c08:	3b01      	subs	r3, #1
 8000c0a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c0c:	4b21      	ldr	r3, [pc, #132]	@ (8000c94 <HAL_InitTick+0xd8>)
 8000c0e:	4a22      	ldr	r2, [pc, #136]	@ (8000c98 <HAL_InitTick+0xdc>)
 8000c10:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c12:	4b20      	ldr	r3, [pc, #128]	@ (8000c94 <HAL_InitTick+0xd8>)
 8000c14:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c18:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c1a:	4a1e      	ldr	r2, [pc, #120]	@ (8000c94 <HAL_InitTick+0xd8>)
 8000c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c1e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c20:	4b1c      	ldr	r3, [pc, #112]	@ (8000c94 <HAL_InitTick+0xd8>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c26:	4b1b      	ldr	r3, [pc, #108]	@ (8000c94 <HAL_InitTick+0xd8>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c2c:	4b19      	ldr	r3, [pc, #100]	@ (8000c94 <HAL_InitTick+0xd8>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000c32:	4818      	ldr	r0, [pc, #96]	@ (8000c94 <HAL_InitTick+0xd8>)
 8000c34:	f001 f88a 	bl	8001d4c <HAL_TIM_Base_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000c3e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d11b      	bne.n	8000c7e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000c46:	4813      	ldr	r0, [pc, #76]	@ (8000c94 <HAL_InitTick+0xd8>)
 8000c48:	f001 f8da 	bl	8001e00 <HAL_TIM_Base_Start_IT>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000c52:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d111      	bne.n	8000c7e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000c5a:	2019      	movs	r0, #25
 8000c5c:	f000 fa3c 	bl	80010d8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2b0f      	cmp	r3, #15
 8000c64:	d808      	bhi.n	8000c78 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000c66:	2200      	movs	r2, #0
 8000c68:	6879      	ldr	r1, [r7, #4]
 8000c6a:	2019      	movs	r0, #25
 8000c6c:	f000 fa18 	bl	80010a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c70:	4a0a      	ldr	r2, [pc, #40]	@ (8000c9c <HAL_InitTick+0xe0>)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6013      	str	r3, [r2, #0]
 8000c76:	e002      	b.n	8000c7e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c7e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3730      	adds	r7, #48	@ 0x30
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	431bde83 	.word	0x431bde83
 8000c94:	200000a4 	.word	0x200000a4
 8000c98:	40010000 	.word	0x40010000
 8000c9c:	20000004 	.word	0x20000004

08000ca0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ca4:	bf00      	nop
 8000ca6:	e7fd      	b.n	8000ca4 <NMI_Handler+0x4>

08000ca8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cac:	bf00      	nop
 8000cae:	e7fd      	b.n	8000cac <HardFault_Handler+0x4>

08000cb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb4:	bf00      	nop
 8000cb6:	e7fd      	b.n	8000cb4 <MemManage_Handler+0x4>

08000cb8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cbc:	bf00      	nop
 8000cbe:	e7fd      	b.n	8000cbc <BusFault_Handler+0x4>

08000cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc4:	bf00      	nop
 8000cc6:	e7fd      	b.n	8000cc4 <UsageFault_Handler+0x4>

08000cc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
	...

08000cd8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cdc:	4802      	ldr	r0, [pc, #8]	@ (8000ce8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000cde:	f001 f8f1 	bl	8001ec4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	200000a4 	.word	0x200000a4

08000cec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]
 8000cfc:	e00a      	b.n	8000d14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cfe:	f3af 8000 	nop.w
 8000d02:	4601      	mov	r1, r0
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	1c5a      	adds	r2, r3, #1
 8000d08:	60ba      	str	r2, [r7, #8]
 8000d0a:	b2ca      	uxtb	r2, r1
 8000d0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	3301      	adds	r3, #1
 8000d12:	617b      	str	r3, [r7, #20]
 8000d14:	697a      	ldr	r2, [r7, #20]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	dbf0      	blt.n	8000cfe <_read+0x12>
  }

  return len;
 8000d1c:	687b      	ldr	r3, [r7, #4]
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3718      	adds	r7, #24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b086      	sub	sp, #24
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	60f8      	str	r0, [r7, #12]
 8000d2e:	60b9      	str	r1, [r7, #8]
 8000d30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]
 8000d36:	e009      	b.n	8000d4c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	1c5a      	adds	r2, r3, #1
 8000d3c:	60ba      	str	r2, [r7, #8]
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	617b      	str	r3, [r7, #20]
 8000d4c:	697a      	ldr	r2, [r7, #20]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	dbf1      	blt.n	8000d38 <_write+0x12>
  }
  return len;
 8000d54:	687b      	ldr	r3, [r7, #4]
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3718      	adds	r7, #24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <_close>:

int _close(int file)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	b083      	sub	sp, #12
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d76:	b480      	push	{r7}
 8000d78:	b083      	sub	sp, #12
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
 8000d7e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d86:	605a      	str	r2, [r3, #4]
  return 0;
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <_isatty>:

int _isatty(int file)
{
 8000d96:	b480      	push	{r7}
 8000d98:	b083      	sub	sp, #12
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d9e:	2301      	movs	r3, #1
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3714      	adds	r7, #20
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
	...

08000dc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dd0:	4a14      	ldr	r2, [pc, #80]	@ (8000e24 <_sbrk+0x5c>)
 8000dd2:	4b15      	ldr	r3, [pc, #84]	@ (8000e28 <_sbrk+0x60>)
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ddc:	4b13      	ldr	r3, [pc, #76]	@ (8000e2c <_sbrk+0x64>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d102      	bne.n	8000dea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000de4:	4b11      	ldr	r3, [pc, #68]	@ (8000e2c <_sbrk+0x64>)
 8000de6:	4a12      	ldr	r2, [pc, #72]	@ (8000e30 <_sbrk+0x68>)
 8000de8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dea:	4b10      	ldr	r3, [pc, #64]	@ (8000e2c <_sbrk+0x64>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4413      	add	r3, r2
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d207      	bcs.n	8000e08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000df8:	f005 faa2 	bl	8006340 <__errno>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	220c      	movs	r2, #12
 8000e00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e02:	f04f 33ff 	mov.w	r3, #4294967295
 8000e06:	e009      	b.n	8000e1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e08:	4b08      	ldr	r3, [pc, #32]	@ (8000e2c <_sbrk+0x64>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e0e:	4b07      	ldr	r3, [pc, #28]	@ (8000e2c <_sbrk+0x64>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4413      	add	r3, r2
 8000e16:	4a05      	ldr	r2, [pc, #20]	@ (8000e2c <_sbrk+0x64>)
 8000e18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3718      	adds	r7, #24
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20010000 	.word	0x20010000
 8000e28:	00000400 	.word	0x00000400
 8000e2c:	200000ec 	.word	0x200000ec
 8000e30:	20004c28 	.word	0x20004c28

08000e34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e38:	4b06      	ldr	r3, [pc, #24]	@ (8000e54 <SystemInit+0x20>)
 8000e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e3e:	4a05      	ldr	r2, [pc, #20]	@ (8000e54 <SystemInit+0x20>)
 8000e40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e90 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e5c:	f7ff ffea 	bl	8000e34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e60:	480c      	ldr	r0, [pc, #48]	@ (8000e94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e62:	490d      	ldr	r1, [pc, #52]	@ (8000e98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e64:	4a0d      	ldr	r2, [pc, #52]	@ (8000e9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e68:	e002      	b.n	8000e70 <LoopCopyDataInit>

08000e6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6e:	3304      	adds	r3, #4

08000e70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e74:	d3f9      	bcc.n	8000e6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e76:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e78:	4c0a      	ldr	r4, [pc, #40]	@ (8000ea4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e7c:	e001      	b.n	8000e82 <LoopFillZerobss>

08000e7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e80:	3204      	adds	r2, #4

08000e82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e84:	d3fb      	bcc.n	8000e7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e86:	f005 fa61 	bl	800634c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e8a:	f7ff fb21 	bl	80004d0 <main>
  bx  lr    
 8000e8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e90:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000e94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e98:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000e9c:	080069e8 	.word	0x080069e8
  ldr r2, =_sbss
 8000ea0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000ea4:	20004c28 	.word	0x20004c28

08000ea8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea8:	e7fe      	b.n	8000ea8 <ADC_IRQHandler>
	...

08000eac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000eec <HAL_Init+0x40>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a0d      	ldr	r2, [pc, #52]	@ (8000eec <HAL_Init+0x40>)
 8000eb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000eba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8000eec <HAL_Init+0x40>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a0a      	ldr	r2, [pc, #40]	@ (8000eec <HAL_Init+0x40>)
 8000ec2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ec6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec8:	4b08      	ldr	r3, [pc, #32]	@ (8000eec <HAL_Init+0x40>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a07      	ldr	r2, [pc, #28]	@ (8000eec <HAL_Init+0x40>)
 8000ece:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ed2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed4:	2003      	movs	r0, #3
 8000ed6:	f000 f8d8 	bl	800108a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eda:	200f      	movs	r0, #15
 8000edc:	f7ff fe6e 	bl	8000bbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ee0:	f7ff fe40 	bl	8000b64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40023c00 	.word	0x40023c00

08000ef0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	@ (8000f10 <HAL_IncTick+0x20>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4b06      	ldr	r3, [pc, #24]	@ (8000f14 <HAL_IncTick+0x24>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4413      	add	r3, r2
 8000f00:	4a04      	ldr	r2, [pc, #16]	@ (8000f14 <HAL_IncTick+0x24>)
 8000f02:	6013      	str	r3, [r2, #0]
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	20000008 	.word	0x20000008
 8000f14:	200000f0 	.word	0x200000f0

08000f18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f1c:	4b03      	ldr	r3, [pc, #12]	@ (8000f2c <HAL_GetTick+0x14>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	200000f0 	.word	0x200000f0

08000f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f40:	4b0c      	ldr	r3, [pc, #48]	@ (8000f74 <__NVIC_SetPriorityGrouping+0x44>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f46:	68ba      	ldr	r2, [r7, #8]
 8000f48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f62:	4a04      	ldr	r2, [pc, #16]	@ (8000f74 <__NVIC_SetPriorityGrouping+0x44>)
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	60d3      	str	r3, [r2, #12]
}
 8000f68:	bf00      	nop
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f7c:	4b04      	ldr	r3, [pc, #16]	@ (8000f90 <__NVIC_GetPriorityGrouping+0x18>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	0a1b      	lsrs	r3, r3, #8
 8000f82:	f003 0307 	and.w	r3, r3, #7
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	db0b      	blt.n	8000fbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	f003 021f 	and.w	r2, r3, #31
 8000fac:	4907      	ldr	r1, [pc, #28]	@ (8000fcc <__NVIC_EnableIRQ+0x38>)
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	095b      	lsrs	r3, r3, #5
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e000e100 	.word	0xe000e100

08000fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	6039      	str	r1, [r7, #0]
 8000fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	db0a      	blt.n	8000ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	490c      	ldr	r1, [pc, #48]	@ (800101c <__NVIC_SetPriority+0x4c>)
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	0112      	lsls	r2, r2, #4
 8000ff0:	b2d2      	uxtb	r2, r2
 8000ff2:	440b      	add	r3, r1
 8000ff4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff8:	e00a      	b.n	8001010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	4908      	ldr	r1, [pc, #32]	@ (8001020 <__NVIC_SetPriority+0x50>)
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	f003 030f 	and.w	r3, r3, #15
 8001006:	3b04      	subs	r3, #4
 8001008:	0112      	lsls	r2, r2, #4
 800100a:	b2d2      	uxtb	r2, r2
 800100c:	440b      	add	r3, r1
 800100e:	761a      	strb	r2, [r3, #24]
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000e100 	.word	0xe000e100
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001024:	b480      	push	{r7}
 8001026:	b089      	sub	sp, #36	@ 0x24
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	f1c3 0307 	rsb	r3, r3, #7
 800103e:	2b04      	cmp	r3, #4
 8001040:	bf28      	it	cs
 8001042:	2304      	movcs	r3, #4
 8001044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	3304      	adds	r3, #4
 800104a:	2b06      	cmp	r3, #6
 800104c:	d902      	bls.n	8001054 <NVIC_EncodePriority+0x30>
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3b03      	subs	r3, #3
 8001052:	e000      	b.n	8001056 <NVIC_EncodePriority+0x32>
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001058:	f04f 32ff 	mov.w	r2, #4294967295
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43da      	mvns	r2, r3
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	401a      	ands	r2, r3
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800106c:	f04f 31ff 	mov.w	r1, #4294967295
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	fa01 f303 	lsl.w	r3, r1, r3
 8001076:	43d9      	mvns	r1, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800107c:	4313      	orrs	r3, r2
         );
}
 800107e:	4618      	mov	r0, r3
 8001080:	3724      	adds	r7, #36	@ 0x24
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f7ff ff4c 	bl	8000f30 <__NVIC_SetPriorityGrouping>
}
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
 80010ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010b2:	f7ff ff61 	bl	8000f78 <__NVIC_GetPriorityGrouping>
 80010b6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	68b9      	ldr	r1, [r7, #8]
 80010bc:	6978      	ldr	r0, [r7, #20]
 80010be:	f7ff ffb1 	bl	8001024 <NVIC_EncodePriority>
 80010c2:	4602      	mov	r2, r0
 80010c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c8:	4611      	mov	r1, r2
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff ff80 	bl	8000fd0 <__NVIC_SetPriority>
}
 80010d0:	bf00      	nop
 80010d2:	3718      	adds	r7, #24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff ff54 	bl	8000f94 <__NVIC_EnableIRQ>
}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b089      	sub	sp, #36	@ 0x24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001106:	2300      	movs	r3, #0
 8001108:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800110a:	2300      	movs	r3, #0
 800110c:	61fb      	str	r3, [r7, #28]
 800110e:	e159      	b.n	80013c4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001110:	2201      	movs	r2, #1
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	697a      	ldr	r2, [r7, #20]
 8001120:	4013      	ands	r3, r2
 8001122:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	429a      	cmp	r2, r3
 800112a:	f040 8148 	bne.w	80013be <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f003 0303 	and.w	r3, r3, #3
 8001136:	2b01      	cmp	r3, #1
 8001138:	d005      	beq.n	8001146 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001142:	2b02      	cmp	r3, #2
 8001144:	d130      	bne.n	80011a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	2203      	movs	r2, #3
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43db      	mvns	r3, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4013      	ands	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	68da      	ldr	r2, [r3, #12]
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4313      	orrs	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800117c:	2201      	movs	r2, #1
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	091b      	lsrs	r3, r3, #4
 8001192:	f003 0201 	and.w	r2, r3, #1
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 0303 	and.w	r3, r3, #3
 80011b0:	2b03      	cmp	r3, #3
 80011b2:	d017      	beq.n	80011e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	2203      	movs	r2, #3
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4013      	ands	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	689a      	ldr	r2, [r3, #8]
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4313      	orrs	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f003 0303 	and.w	r3, r3, #3
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d123      	bne.n	8001238 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	08da      	lsrs	r2, r3, #3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3208      	adds	r2, #8
 80011f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	f003 0307 	and.w	r3, r3, #7
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	220f      	movs	r2, #15
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	691a      	ldr	r2, [r3, #16]
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	08da      	lsrs	r2, r3, #3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	3208      	adds	r2, #8
 8001232:	69b9      	ldr	r1, [r7, #24]
 8001234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	2203      	movs	r2, #3
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4013      	ands	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f003 0203 	and.w	r2, r3, #3
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4313      	orrs	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001274:	2b00      	cmp	r3, #0
 8001276:	f000 80a2 	beq.w	80013be <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	4b57      	ldr	r3, [pc, #348]	@ (80013dc <HAL_GPIO_Init+0x2e8>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001282:	4a56      	ldr	r2, [pc, #344]	@ (80013dc <HAL_GPIO_Init+0x2e8>)
 8001284:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001288:	6453      	str	r3, [r2, #68]	@ 0x44
 800128a:	4b54      	ldr	r3, [pc, #336]	@ (80013dc <HAL_GPIO_Init+0x2e8>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800128e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001296:	4a52      	ldr	r2, [pc, #328]	@ (80013e0 <HAL_GPIO_Init+0x2ec>)
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	089b      	lsrs	r3, r3, #2
 800129c:	3302      	adds	r3, #2
 800129e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	f003 0303 	and.w	r3, r3, #3
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	220f      	movs	r2, #15
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43db      	mvns	r3, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4013      	ands	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a49      	ldr	r2, [pc, #292]	@ (80013e4 <HAL_GPIO_Init+0x2f0>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d019      	beq.n	80012f6 <HAL_GPIO_Init+0x202>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a48      	ldr	r2, [pc, #288]	@ (80013e8 <HAL_GPIO_Init+0x2f4>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d013      	beq.n	80012f2 <HAL_GPIO_Init+0x1fe>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a47      	ldr	r2, [pc, #284]	@ (80013ec <HAL_GPIO_Init+0x2f8>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d00d      	beq.n	80012ee <HAL_GPIO_Init+0x1fa>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a46      	ldr	r2, [pc, #280]	@ (80013f0 <HAL_GPIO_Init+0x2fc>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d007      	beq.n	80012ea <HAL_GPIO_Init+0x1f6>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a45      	ldr	r2, [pc, #276]	@ (80013f4 <HAL_GPIO_Init+0x300>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d101      	bne.n	80012e6 <HAL_GPIO_Init+0x1f2>
 80012e2:	2304      	movs	r3, #4
 80012e4:	e008      	b.n	80012f8 <HAL_GPIO_Init+0x204>
 80012e6:	2307      	movs	r3, #7
 80012e8:	e006      	b.n	80012f8 <HAL_GPIO_Init+0x204>
 80012ea:	2303      	movs	r3, #3
 80012ec:	e004      	b.n	80012f8 <HAL_GPIO_Init+0x204>
 80012ee:	2302      	movs	r3, #2
 80012f0:	e002      	b.n	80012f8 <HAL_GPIO_Init+0x204>
 80012f2:	2301      	movs	r3, #1
 80012f4:	e000      	b.n	80012f8 <HAL_GPIO_Init+0x204>
 80012f6:	2300      	movs	r3, #0
 80012f8:	69fa      	ldr	r2, [r7, #28]
 80012fa:	f002 0203 	and.w	r2, r2, #3
 80012fe:	0092      	lsls	r2, r2, #2
 8001300:	4093      	lsls	r3, r2
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4313      	orrs	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001308:	4935      	ldr	r1, [pc, #212]	@ (80013e0 <HAL_GPIO_Init+0x2ec>)
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	089b      	lsrs	r3, r3, #2
 800130e:	3302      	adds	r3, #2
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001316:	4b38      	ldr	r3, [pc, #224]	@ (80013f8 <HAL_GPIO_Init+0x304>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	43db      	mvns	r3, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4013      	ands	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d003      	beq.n	800133a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	4313      	orrs	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800133a:	4a2f      	ldr	r2, [pc, #188]	@ (80013f8 <HAL_GPIO_Init+0x304>)
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001340:	4b2d      	ldr	r3, [pc, #180]	@ (80013f8 <HAL_GPIO_Init+0x304>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	43db      	mvns	r3, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4013      	ands	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d003      	beq.n	8001364 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	4313      	orrs	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001364:	4a24      	ldr	r2, [pc, #144]	@ (80013f8 <HAL_GPIO_Init+0x304>)
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800136a:	4b23      	ldr	r3, [pc, #140]	@ (80013f8 <HAL_GPIO_Init+0x304>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	43db      	mvns	r3, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4013      	ands	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	4313      	orrs	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800138e:	4a1a      	ldr	r2, [pc, #104]	@ (80013f8 <HAL_GPIO_Init+0x304>)
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001394:	4b18      	ldr	r3, [pc, #96]	@ (80013f8 <HAL_GPIO_Init+0x304>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013b8:	4a0f      	ldr	r2, [pc, #60]	@ (80013f8 <HAL_GPIO_Init+0x304>)
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	3301      	adds	r3, #1
 80013c2:	61fb      	str	r3, [r7, #28]
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	2b0f      	cmp	r3, #15
 80013c8:	f67f aea2 	bls.w	8001110 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013cc:	bf00      	nop
 80013ce:	bf00      	nop
 80013d0:	3724      	adds	r7, #36	@ 0x24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40013800 	.word	0x40013800
 80013e4:	40020000 	.word	0x40020000
 80013e8:	40020400 	.word	0x40020400
 80013ec:	40020800 	.word	0x40020800
 80013f0:	40020c00 	.word	0x40020c00
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40013c00 	.word	0x40013c00

080013fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	460b      	mov	r3, r1
 8001406:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	691a      	ldr	r2, [r3, #16]
 800140c:	887b      	ldrh	r3, [r7, #2]
 800140e:	4013      	ands	r3, r2
 8001410:	2b00      	cmp	r3, #0
 8001412:	d002      	beq.n	800141a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001414:	2301      	movs	r3, #1
 8001416:	73fb      	strb	r3, [r7, #15]
 8001418:	e001      	b.n	800141e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800141a:	2300      	movs	r3, #0
 800141c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800141e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	460b      	mov	r3, r1
 8001436:	807b      	strh	r3, [r7, #2]
 8001438:	4613      	mov	r3, r2
 800143a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800143c:	787b      	ldrb	r3, [r7, #1]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001442:	887a      	ldrh	r2, [r7, #2]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001448:	e003      	b.n	8001452 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800144a:	887b      	ldrh	r3, [r7, #2]
 800144c:	041a      	lsls	r2, r3, #16
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	619a      	str	r2, [r3, #24]
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
	...

08001460 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d101      	bne.n	8001472 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e267      	b.n	8001942 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	2b00      	cmp	r3, #0
 800147c:	d075      	beq.n	800156a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800147e:	4b88      	ldr	r3, [pc, #544]	@ (80016a0 <HAL_RCC_OscConfig+0x240>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f003 030c 	and.w	r3, r3, #12
 8001486:	2b04      	cmp	r3, #4
 8001488:	d00c      	beq.n	80014a4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800148a:	4b85      	ldr	r3, [pc, #532]	@ (80016a0 <HAL_RCC_OscConfig+0x240>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001492:	2b08      	cmp	r3, #8
 8001494:	d112      	bne.n	80014bc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001496:	4b82      	ldr	r3, [pc, #520]	@ (80016a0 <HAL_RCC_OscConfig+0x240>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800149e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80014a2:	d10b      	bne.n	80014bc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a4:	4b7e      	ldr	r3, [pc, #504]	@ (80016a0 <HAL_RCC_OscConfig+0x240>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d05b      	beq.n	8001568 <HAL_RCC_OscConfig+0x108>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d157      	bne.n	8001568 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e242      	b.n	8001942 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014c4:	d106      	bne.n	80014d4 <HAL_RCC_OscConfig+0x74>
 80014c6:	4b76      	ldr	r3, [pc, #472]	@ (80016a0 <HAL_RCC_OscConfig+0x240>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a75      	ldr	r2, [pc, #468]	@ (80016a0 <HAL_RCC_OscConfig+0x240>)
 80014cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014d0:	6013      	str	r3, [r2, #0]
 80014d2:	e01d      	b.n	8001510 <HAL_RCC_OscConfig+0xb0>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014dc:	d10c      	bne.n	80014f8 <HAL_RCC_OscConfig+0x98>
 80014de:	4b70      	ldr	r3, [pc, #448]	@ (80016a0 <HAL_RCC_OscConfig+0x240>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a6f      	ldr	r2, [pc, #444]	@ (80016a0 <HAL_RCC_OscConfig+0x240>)
 80014e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014e8:	6013      	str	r3, [r2, #0]
 80014ea:	4b6d      	ldr	r3, [pc, #436]	@ (80016a0 <HAL_RCC_OscConfig+0x240>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a6c      	ldr	r2, [pc, #432]	@ (80016a0 <HAL_RCC_OscConfig+0x240>)
 80014f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014f4:	6013      	str	r3, [r2, #0]
 80014f6:	e00b      	b.n	8001510 <HAL_RCC_OscConfig+0xb0>
 80014f8:	4b69      	ldr	r3, [pc, #420]	@ (80016a0 <HAL_RCC_OscConfig+0x240>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a68      	ldr	r2, [pc, #416]	@ (80016a0 <HAL_RCC_OscConfig+0x240>)
 80014fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001502:	6013      	str	r3, [r2, #0]
 8001504:	4b66      	ldr	r3, [pc, #408]	@ (80016a0 <HAL_RCC_OscConfig+0x240>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a65      	ldr	r2, [pc, #404]	@ (80016a0 <HAL_RCC_OscConfig+0x240>)
 800150a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800150e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d013      	beq.n	8001540 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001518:	f7ff fcfe 	bl	8000f18 <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001520:	f7ff fcfa 	bl	8000f18 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b64      	cmp	r3, #100	@ 0x64
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e207      	b.n	8001942 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001532:	4b5b      	ldr	r3, [pc, #364]	@ (80016a0 <HAL_RCC_OscConfig+0x240>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0f0      	beq.n	8001520 <HAL_RCC_OscConfig+0xc0>
 800153e:	e014      	b.n	800156a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001540:	f7ff fcea 	bl	8000f18 <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001548:	f7ff fce6 	bl	8000f18 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b64      	cmp	r3, #100	@ 0x64
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e1f3      	b.n	8001942 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800155a:	4b51      	ldr	r3, [pc, #324]	@ (80016a0 <HAL_RCC_OscConfig+0x240>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f0      	bne.n	8001548 <HAL_RCC_OscConfig+0xe8>
 8001566:	e000      	b.n	800156a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001568:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d063      	beq.n	800163e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001576:	4b4a      	ldr	r3, [pc, #296]	@ (80016a0 <HAL_RCC_OscConfig+0x240>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f003 030c 	and.w	r3, r3, #12
 800157e:	2b00      	cmp	r3, #0
 8001580:	d00b      	beq.n	800159a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001582:	4b47      	ldr	r3, [pc, #284]	@ (80016a0 <HAL_RCC_OscConfig+0x240>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800158a:	2b08      	cmp	r3, #8
 800158c:	d11c      	bne.n	80015c8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800158e:	4b44      	ldr	r3, [pc, #272]	@ (80016a0 <HAL_RCC_OscConfig+0x240>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d116      	bne.n	80015c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800159a:	4b41      	ldr	r3, [pc, #260]	@ (80016a0 <HAL_RCC_OscConfig+0x240>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d005      	beq.n	80015b2 <HAL_RCC_OscConfig+0x152>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d001      	beq.n	80015b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e1c7      	b.n	8001942 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b2:	4b3b      	ldr	r3, [pc, #236]	@ (80016a0 <HAL_RCC_OscConfig+0x240>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	691b      	ldr	r3, [r3, #16]
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	4937      	ldr	r1, [pc, #220]	@ (80016a0 <HAL_RCC_OscConfig+0x240>)
 80015c2:	4313      	orrs	r3, r2
 80015c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015c6:	e03a      	b.n	800163e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d020      	beq.n	8001612 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015d0:	4b34      	ldr	r3, [pc, #208]	@ (80016a4 <HAL_RCC_OscConfig+0x244>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d6:	f7ff fc9f 	bl	8000f18 <HAL_GetTick>
 80015da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015dc:	e008      	b.n	80015f0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015de:	f7ff fc9b 	bl	8000f18 <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e1a8      	b.n	8001942 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f0:	4b2b      	ldr	r3, [pc, #172]	@ (80016a0 <HAL_RCC_OscConfig+0x240>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d0f0      	beq.n	80015de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015fc:	4b28      	ldr	r3, [pc, #160]	@ (80016a0 <HAL_RCC_OscConfig+0x240>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	691b      	ldr	r3, [r3, #16]
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	4925      	ldr	r1, [pc, #148]	@ (80016a0 <HAL_RCC_OscConfig+0x240>)
 800160c:	4313      	orrs	r3, r2
 800160e:	600b      	str	r3, [r1, #0]
 8001610:	e015      	b.n	800163e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001612:	4b24      	ldr	r3, [pc, #144]	@ (80016a4 <HAL_RCC_OscConfig+0x244>)
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001618:	f7ff fc7e 	bl	8000f18 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001620:	f7ff fc7a 	bl	8000f18 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e187      	b.n	8001942 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001632:	4b1b      	ldr	r3, [pc, #108]	@ (80016a0 <HAL_RCC_OscConfig+0x240>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1f0      	bne.n	8001620 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0308 	and.w	r3, r3, #8
 8001646:	2b00      	cmp	r3, #0
 8001648:	d036      	beq.n	80016b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d016      	beq.n	8001680 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001652:	4b15      	ldr	r3, [pc, #84]	@ (80016a8 <HAL_RCC_OscConfig+0x248>)
 8001654:	2201      	movs	r2, #1
 8001656:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001658:	f7ff fc5e 	bl	8000f18 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001660:	f7ff fc5a 	bl	8000f18 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e167      	b.n	8001942 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001672:	4b0b      	ldr	r3, [pc, #44]	@ (80016a0 <HAL_RCC_OscConfig+0x240>)
 8001674:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0f0      	beq.n	8001660 <HAL_RCC_OscConfig+0x200>
 800167e:	e01b      	b.n	80016b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001680:	4b09      	ldr	r3, [pc, #36]	@ (80016a8 <HAL_RCC_OscConfig+0x248>)
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001686:	f7ff fc47 	bl	8000f18 <HAL_GetTick>
 800168a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800168c:	e00e      	b.n	80016ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800168e:	f7ff fc43 	bl	8000f18 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b02      	cmp	r3, #2
 800169a:	d907      	bls.n	80016ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e150      	b.n	8001942 <HAL_RCC_OscConfig+0x4e2>
 80016a0:	40023800 	.word	0x40023800
 80016a4:	42470000 	.word	0x42470000
 80016a8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016ac:	4b88      	ldr	r3, [pc, #544]	@ (80018d0 <HAL_RCC_OscConfig+0x470>)
 80016ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1ea      	bne.n	800168e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0304 	and.w	r3, r3, #4
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	f000 8097 	beq.w	80017f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016c6:	2300      	movs	r3, #0
 80016c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ca:	4b81      	ldr	r3, [pc, #516]	@ (80018d0 <HAL_RCC_OscConfig+0x470>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d10f      	bne.n	80016f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	60bb      	str	r3, [r7, #8]
 80016da:	4b7d      	ldr	r3, [pc, #500]	@ (80018d0 <HAL_RCC_OscConfig+0x470>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016de:	4a7c      	ldr	r2, [pc, #496]	@ (80018d0 <HAL_RCC_OscConfig+0x470>)
 80016e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016e6:	4b7a      	ldr	r3, [pc, #488]	@ (80018d0 <HAL_RCC_OscConfig+0x470>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016f2:	2301      	movs	r3, #1
 80016f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f6:	4b77      	ldr	r3, [pc, #476]	@ (80018d4 <HAL_RCC_OscConfig+0x474>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d118      	bne.n	8001734 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001702:	4b74      	ldr	r3, [pc, #464]	@ (80018d4 <HAL_RCC_OscConfig+0x474>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a73      	ldr	r2, [pc, #460]	@ (80018d4 <HAL_RCC_OscConfig+0x474>)
 8001708:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800170c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800170e:	f7ff fc03 	bl	8000f18 <HAL_GetTick>
 8001712:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001714:	e008      	b.n	8001728 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001716:	f7ff fbff 	bl	8000f18 <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e10c      	b.n	8001942 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001728:	4b6a      	ldr	r3, [pc, #424]	@ (80018d4 <HAL_RCC_OscConfig+0x474>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001730:	2b00      	cmp	r3, #0
 8001732:	d0f0      	beq.n	8001716 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d106      	bne.n	800174a <HAL_RCC_OscConfig+0x2ea>
 800173c:	4b64      	ldr	r3, [pc, #400]	@ (80018d0 <HAL_RCC_OscConfig+0x470>)
 800173e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001740:	4a63      	ldr	r2, [pc, #396]	@ (80018d0 <HAL_RCC_OscConfig+0x470>)
 8001742:	f043 0301 	orr.w	r3, r3, #1
 8001746:	6713      	str	r3, [r2, #112]	@ 0x70
 8001748:	e01c      	b.n	8001784 <HAL_RCC_OscConfig+0x324>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	2b05      	cmp	r3, #5
 8001750:	d10c      	bne.n	800176c <HAL_RCC_OscConfig+0x30c>
 8001752:	4b5f      	ldr	r3, [pc, #380]	@ (80018d0 <HAL_RCC_OscConfig+0x470>)
 8001754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001756:	4a5e      	ldr	r2, [pc, #376]	@ (80018d0 <HAL_RCC_OscConfig+0x470>)
 8001758:	f043 0304 	orr.w	r3, r3, #4
 800175c:	6713      	str	r3, [r2, #112]	@ 0x70
 800175e:	4b5c      	ldr	r3, [pc, #368]	@ (80018d0 <HAL_RCC_OscConfig+0x470>)
 8001760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001762:	4a5b      	ldr	r2, [pc, #364]	@ (80018d0 <HAL_RCC_OscConfig+0x470>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	6713      	str	r3, [r2, #112]	@ 0x70
 800176a:	e00b      	b.n	8001784 <HAL_RCC_OscConfig+0x324>
 800176c:	4b58      	ldr	r3, [pc, #352]	@ (80018d0 <HAL_RCC_OscConfig+0x470>)
 800176e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001770:	4a57      	ldr	r2, [pc, #348]	@ (80018d0 <HAL_RCC_OscConfig+0x470>)
 8001772:	f023 0301 	bic.w	r3, r3, #1
 8001776:	6713      	str	r3, [r2, #112]	@ 0x70
 8001778:	4b55      	ldr	r3, [pc, #340]	@ (80018d0 <HAL_RCC_OscConfig+0x470>)
 800177a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800177c:	4a54      	ldr	r2, [pc, #336]	@ (80018d0 <HAL_RCC_OscConfig+0x470>)
 800177e:	f023 0304 	bic.w	r3, r3, #4
 8001782:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d015      	beq.n	80017b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800178c:	f7ff fbc4 	bl	8000f18 <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001792:	e00a      	b.n	80017aa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001794:	f7ff fbc0 	bl	8000f18 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e0cb      	b.n	8001942 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017aa:	4b49      	ldr	r3, [pc, #292]	@ (80018d0 <HAL_RCC_OscConfig+0x470>)
 80017ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d0ee      	beq.n	8001794 <HAL_RCC_OscConfig+0x334>
 80017b6:	e014      	b.n	80017e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b8:	f7ff fbae 	bl	8000f18 <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017be:	e00a      	b.n	80017d6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017c0:	f7ff fbaa 	bl	8000f18 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e0b5      	b.n	8001942 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017d6:	4b3e      	ldr	r3, [pc, #248]	@ (80018d0 <HAL_RCC_OscConfig+0x470>)
 80017d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1ee      	bne.n	80017c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017e2:	7dfb      	ldrb	r3, [r7, #23]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d105      	bne.n	80017f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017e8:	4b39      	ldr	r3, [pc, #228]	@ (80018d0 <HAL_RCC_OscConfig+0x470>)
 80017ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ec:	4a38      	ldr	r2, [pc, #224]	@ (80018d0 <HAL_RCC_OscConfig+0x470>)
 80017ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017f2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	f000 80a1 	beq.w	8001940 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017fe:	4b34      	ldr	r3, [pc, #208]	@ (80018d0 <HAL_RCC_OscConfig+0x470>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f003 030c 	and.w	r3, r3, #12
 8001806:	2b08      	cmp	r3, #8
 8001808:	d05c      	beq.n	80018c4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	2b02      	cmp	r3, #2
 8001810:	d141      	bne.n	8001896 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001812:	4b31      	ldr	r3, [pc, #196]	@ (80018d8 <HAL_RCC_OscConfig+0x478>)
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001818:	f7ff fb7e 	bl	8000f18 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001820:	f7ff fb7a 	bl	8000f18 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e087      	b.n	8001942 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001832:	4b27      	ldr	r3, [pc, #156]	@ (80018d0 <HAL_RCC_OscConfig+0x470>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1f0      	bne.n	8001820 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69da      	ldr	r2, [r3, #28]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a1b      	ldr	r3, [r3, #32]
 8001846:	431a      	orrs	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800184c:	019b      	lsls	r3, r3, #6
 800184e:	431a      	orrs	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001854:	085b      	lsrs	r3, r3, #1
 8001856:	3b01      	subs	r3, #1
 8001858:	041b      	lsls	r3, r3, #16
 800185a:	431a      	orrs	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001860:	061b      	lsls	r3, r3, #24
 8001862:	491b      	ldr	r1, [pc, #108]	@ (80018d0 <HAL_RCC_OscConfig+0x470>)
 8001864:	4313      	orrs	r3, r2
 8001866:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001868:	4b1b      	ldr	r3, [pc, #108]	@ (80018d8 <HAL_RCC_OscConfig+0x478>)
 800186a:	2201      	movs	r2, #1
 800186c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186e:	f7ff fb53 	bl	8000f18 <HAL_GetTick>
 8001872:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001874:	e008      	b.n	8001888 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001876:	f7ff fb4f 	bl	8000f18 <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e05c      	b.n	8001942 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001888:	4b11      	ldr	r3, [pc, #68]	@ (80018d0 <HAL_RCC_OscConfig+0x470>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d0f0      	beq.n	8001876 <HAL_RCC_OscConfig+0x416>
 8001894:	e054      	b.n	8001940 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001896:	4b10      	ldr	r3, [pc, #64]	@ (80018d8 <HAL_RCC_OscConfig+0x478>)
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189c:	f7ff fb3c 	bl	8000f18 <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a4:	f7ff fb38 	bl	8000f18 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e045      	b.n	8001942 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018b6:	4b06      	ldr	r3, [pc, #24]	@ (80018d0 <HAL_RCC_OscConfig+0x470>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1f0      	bne.n	80018a4 <HAL_RCC_OscConfig+0x444>
 80018c2:	e03d      	b.n	8001940 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d107      	bne.n	80018dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e038      	b.n	8001942 <HAL_RCC_OscConfig+0x4e2>
 80018d0:	40023800 	.word	0x40023800
 80018d4:	40007000 	.word	0x40007000
 80018d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018dc:	4b1b      	ldr	r3, [pc, #108]	@ (800194c <HAL_RCC_OscConfig+0x4ec>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d028      	beq.n	800193c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d121      	bne.n	800193c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001902:	429a      	cmp	r2, r3
 8001904:	d11a      	bne.n	800193c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001906:	68fa      	ldr	r2, [r7, #12]
 8001908:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800190c:	4013      	ands	r3, r2
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001912:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001914:	4293      	cmp	r3, r2
 8001916:	d111      	bne.n	800193c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001922:	085b      	lsrs	r3, r3, #1
 8001924:	3b01      	subs	r3, #1
 8001926:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001928:	429a      	cmp	r2, r3
 800192a:	d107      	bne.n	800193c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001936:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001938:	429a      	cmp	r2, r3
 800193a:	d001      	beq.n	8001940 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e000      	b.n	8001942 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3718      	adds	r7, #24
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40023800 	.word	0x40023800

08001950 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d101      	bne.n	8001964 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e0cc      	b.n	8001afe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001964:	4b68      	ldr	r3, [pc, #416]	@ (8001b08 <HAL_RCC_ClockConfig+0x1b8>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0307 	and.w	r3, r3, #7
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	429a      	cmp	r2, r3
 8001970:	d90c      	bls.n	800198c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001972:	4b65      	ldr	r3, [pc, #404]	@ (8001b08 <HAL_RCC_ClockConfig+0x1b8>)
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	b2d2      	uxtb	r2, r2
 8001978:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800197a:	4b63      	ldr	r3, [pc, #396]	@ (8001b08 <HAL_RCC_ClockConfig+0x1b8>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	429a      	cmp	r2, r3
 8001986:	d001      	beq.n	800198c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e0b8      	b.n	8001afe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d020      	beq.n	80019da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0304 	and.w	r3, r3, #4
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d005      	beq.n	80019b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019a4:	4b59      	ldr	r3, [pc, #356]	@ (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	4a58      	ldr	r2, [pc, #352]	@ (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 80019aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80019ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0308 	and.w	r3, r3, #8
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d005      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019bc:	4b53      	ldr	r3, [pc, #332]	@ (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	4a52      	ldr	r2, [pc, #328]	@ (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 80019c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80019c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019c8:	4b50      	ldr	r3, [pc, #320]	@ (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	494d      	ldr	r1, [pc, #308]	@ (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 80019d6:	4313      	orrs	r3, r2
 80019d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d044      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d107      	bne.n	80019fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ee:	4b47      	ldr	r3, [pc, #284]	@ (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d119      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e07f      	b.n	8001afe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d003      	beq.n	8001a0e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a0a:	2b03      	cmp	r3, #3
 8001a0c:	d107      	bne.n	8001a1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a0e:	4b3f      	ldr	r3, [pc, #252]	@ (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d109      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e06f      	b.n	8001afe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a1e:	4b3b      	ldr	r3, [pc, #236]	@ (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e067      	b.n	8001afe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a2e:	4b37      	ldr	r3, [pc, #220]	@ (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f023 0203 	bic.w	r2, r3, #3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	4934      	ldr	r1, [pc, #208]	@ (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a40:	f7ff fa6a 	bl	8000f18 <HAL_GetTick>
 8001a44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a46:	e00a      	b.n	8001a5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a48:	f7ff fa66 	bl	8000f18 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e04f      	b.n	8001afe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a5e:	4b2b      	ldr	r3, [pc, #172]	@ (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f003 020c 	and.w	r2, r3, #12
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d1eb      	bne.n	8001a48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a70:	4b25      	ldr	r3, [pc, #148]	@ (8001b08 <HAL_RCC_ClockConfig+0x1b8>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0307 	and.w	r3, r3, #7
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d20c      	bcs.n	8001a98 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a7e:	4b22      	ldr	r3, [pc, #136]	@ (8001b08 <HAL_RCC_ClockConfig+0x1b8>)
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	b2d2      	uxtb	r2, r2
 8001a84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a86:	4b20      	ldr	r3, [pc, #128]	@ (8001b08 <HAL_RCC_ClockConfig+0x1b8>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	683a      	ldr	r2, [r7, #0]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d001      	beq.n	8001a98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e032      	b.n	8001afe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0304 	and.w	r3, r3, #4
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d008      	beq.n	8001ab6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aa4:	4b19      	ldr	r3, [pc, #100]	@ (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	4916      	ldr	r1, [pc, #88]	@ (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0308 	and.w	r3, r3, #8
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d009      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ac2:	4b12      	ldr	r3, [pc, #72]	@ (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	490e      	ldr	r1, [pc, #56]	@ (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ad6:	f000 f821 	bl	8001b1c <HAL_RCC_GetSysClockFreq>
 8001ada:	4602      	mov	r2, r0
 8001adc:	4b0b      	ldr	r3, [pc, #44]	@ (8001b0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	091b      	lsrs	r3, r3, #4
 8001ae2:	f003 030f 	and.w	r3, r3, #15
 8001ae6:	490a      	ldr	r1, [pc, #40]	@ (8001b10 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae8:	5ccb      	ldrb	r3, [r1, r3]
 8001aea:	fa22 f303 	lsr.w	r3, r2, r3
 8001aee:	4a09      	ldr	r2, [pc, #36]	@ (8001b14 <HAL_RCC_ClockConfig+0x1c4>)
 8001af0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001af2:	4b09      	ldr	r3, [pc, #36]	@ (8001b18 <HAL_RCC_ClockConfig+0x1c8>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff f860 	bl	8000bbc <HAL_InitTick>

  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40023c00 	.word	0x40023c00
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	080069c0 	.word	0x080069c0
 8001b14:	20000000 	.word	0x20000000
 8001b18:	20000004 	.word	0x20000004

08001b1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b20:	b090      	sub	sp, #64	@ 0x40
 8001b22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b24:	2300      	movs	r3, #0
 8001b26:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001b30:	2300      	movs	r3, #0
 8001b32:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b34:	4b59      	ldr	r3, [pc, #356]	@ (8001c9c <HAL_RCC_GetSysClockFreq+0x180>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 030c 	and.w	r3, r3, #12
 8001b3c:	2b08      	cmp	r3, #8
 8001b3e:	d00d      	beq.n	8001b5c <HAL_RCC_GetSysClockFreq+0x40>
 8001b40:	2b08      	cmp	r3, #8
 8001b42:	f200 80a1 	bhi.w	8001c88 <HAL_RCC_GetSysClockFreq+0x16c>
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d002      	beq.n	8001b50 <HAL_RCC_GetSysClockFreq+0x34>
 8001b4a:	2b04      	cmp	r3, #4
 8001b4c:	d003      	beq.n	8001b56 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b4e:	e09b      	b.n	8001c88 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b50:	4b53      	ldr	r3, [pc, #332]	@ (8001ca0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b52:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b54:	e09b      	b.n	8001c8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b56:	4b53      	ldr	r3, [pc, #332]	@ (8001ca4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b58:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b5a:	e098      	b.n	8001c8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b5c:	4b4f      	ldr	r3, [pc, #316]	@ (8001c9c <HAL_RCC_GetSysClockFreq+0x180>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b64:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b66:	4b4d      	ldr	r3, [pc, #308]	@ (8001c9c <HAL_RCC_GetSysClockFreq+0x180>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d028      	beq.n	8001bc4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b72:	4b4a      	ldr	r3, [pc, #296]	@ (8001c9c <HAL_RCC_GetSysClockFreq+0x180>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	099b      	lsrs	r3, r3, #6
 8001b78:	2200      	movs	r2, #0
 8001b7a:	623b      	str	r3, [r7, #32]
 8001b7c:	627a      	str	r2, [r7, #36]	@ 0x24
 8001b7e:	6a3b      	ldr	r3, [r7, #32]
 8001b80:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b84:	2100      	movs	r1, #0
 8001b86:	4b47      	ldr	r3, [pc, #284]	@ (8001ca4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b88:	fb03 f201 	mul.w	r2, r3, r1
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	fb00 f303 	mul.w	r3, r0, r3
 8001b92:	4413      	add	r3, r2
 8001b94:	4a43      	ldr	r2, [pc, #268]	@ (8001ca4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b96:	fba0 1202 	umull	r1, r2, r0, r2
 8001b9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b9c:	460a      	mov	r2, r1
 8001b9e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001ba0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ba2:	4413      	add	r3, r2
 8001ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ba6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ba8:	2200      	movs	r2, #0
 8001baa:	61bb      	str	r3, [r7, #24]
 8001bac:	61fa      	str	r2, [r7, #28]
 8001bae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bb2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001bb6:	f7fe fb13 	bl	80001e0 <__aeabi_uldivmod>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001bc2:	e053      	b.n	8001c6c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bc4:	4b35      	ldr	r3, [pc, #212]	@ (8001c9c <HAL_RCC_GetSysClockFreq+0x180>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	099b      	lsrs	r3, r3, #6
 8001bca:	2200      	movs	r2, #0
 8001bcc:	613b      	str	r3, [r7, #16]
 8001bce:	617a      	str	r2, [r7, #20]
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001bd6:	f04f 0b00 	mov.w	fp, #0
 8001bda:	4652      	mov	r2, sl
 8001bdc:	465b      	mov	r3, fp
 8001bde:	f04f 0000 	mov.w	r0, #0
 8001be2:	f04f 0100 	mov.w	r1, #0
 8001be6:	0159      	lsls	r1, r3, #5
 8001be8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bec:	0150      	lsls	r0, r2, #5
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	ebb2 080a 	subs.w	r8, r2, sl
 8001bf6:	eb63 090b 	sbc.w	r9, r3, fp
 8001bfa:	f04f 0200 	mov.w	r2, #0
 8001bfe:	f04f 0300 	mov.w	r3, #0
 8001c02:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001c06:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001c0a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001c0e:	ebb2 0408 	subs.w	r4, r2, r8
 8001c12:	eb63 0509 	sbc.w	r5, r3, r9
 8001c16:	f04f 0200 	mov.w	r2, #0
 8001c1a:	f04f 0300 	mov.w	r3, #0
 8001c1e:	00eb      	lsls	r3, r5, #3
 8001c20:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c24:	00e2      	lsls	r2, r4, #3
 8001c26:	4614      	mov	r4, r2
 8001c28:	461d      	mov	r5, r3
 8001c2a:	eb14 030a 	adds.w	r3, r4, sl
 8001c2e:	603b      	str	r3, [r7, #0]
 8001c30:	eb45 030b 	adc.w	r3, r5, fp
 8001c34:	607b      	str	r3, [r7, #4]
 8001c36:	f04f 0200 	mov.w	r2, #0
 8001c3a:	f04f 0300 	mov.w	r3, #0
 8001c3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c42:	4629      	mov	r1, r5
 8001c44:	028b      	lsls	r3, r1, #10
 8001c46:	4621      	mov	r1, r4
 8001c48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c4c:	4621      	mov	r1, r4
 8001c4e:	028a      	lsls	r2, r1, #10
 8001c50:	4610      	mov	r0, r2
 8001c52:	4619      	mov	r1, r3
 8001c54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c56:	2200      	movs	r2, #0
 8001c58:	60bb      	str	r3, [r7, #8]
 8001c5a:	60fa      	str	r2, [r7, #12]
 8001c5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c60:	f7fe fabe 	bl	80001e0 <__aeabi_uldivmod>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	4613      	mov	r3, r2
 8001c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c9c <HAL_RCC_GetSysClockFreq+0x180>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	0c1b      	lsrs	r3, r3, #16
 8001c72:	f003 0303 	and.w	r3, r3, #3
 8001c76:	3301      	adds	r3, #1
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001c7c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c84:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001c86:	e002      	b.n	8001c8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c88:	4b05      	ldr	r3, [pc, #20]	@ (8001ca0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c8a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001c8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3740      	adds	r7, #64	@ 0x40
 8001c94:	46bd      	mov	sp, r7
 8001c96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	00f42400 	.word	0x00f42400
 8001ca4:	017d7840 	.word	0x017d7840

08001ca8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cac:	4b03      	ldr	r3, [pc, #12]	@ (8001cbc <HAL_RCC_GetHCLKFreq+0x14>)
 8001cae:	681b      	ldr	r3, [r3, #0]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	20000000 	.word	0x20000000

08001cc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cc4:	f7ff fff0 	bl	8001ca8 <HAL_RCC_GetHCLKFreq>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	4b05      	ldr	r3, [pc, #20]	@ (8001ce0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	0b5b      	lsrs	r3, r3, #13
 8001cd0:	f003 0307 	and.w	r3, r3, #7
 8001cd4:	4903      	ldr	r1, [pc, #12]	@ (8001ce4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cd6:	5ccb      	ldrb	r3, [r1, r3]
 8001cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	080069d0 	.word	0x080069d0

08001ce8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	220f      	movs	r2, #15
 8001cf6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001cf8:	4b12      	ldr	r3, [pc, #72]	@ (8001d44 <HAL_RCC_GetClockConfig+0x5c>)
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f003 0203 	and.w	r2, r3, #3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d04:	4b0f      	ldr	r3, [pc, #60]	@ (8001d44 <HAL_RCC_GetClockConfig+0x5c>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d10:	4b0c      	ldr	r3, [pc, #48]	@ (8001d44 <HAL_RCC_GetClockConfig+0x5c>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d1c:	4b09      	ldr	r3, [pc, #36]	@ (8001d44 <HAL_RCC_GetClockConfig+0x5c>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	08db      	lsrs	r3, r3, #3
 8001d22:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d2a:	4b07      	ldr	r3, [pc, #28]	@ (8001d48 <HAL_RCC_GetClockConfig+0x60>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0207 	and.w	r2, r3, #7
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	601a      	str	r2, [r3, #0]
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	40023800 	.word	0x40023800
 8001d48:	40023c00 	.word	0x40023c00

08001d4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e041      	b.n	8001de2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d106      	bne.n	8001d78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 f839 	bl	8001dea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3304      	adds	r3, #4
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4610      	mov	r0, r2
 8001d8c:	f000 f9b2 	bl	80020f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b083      	sub	sp, #12
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
	...

08001e00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d001      	beq.n	8001e18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e044      	b.n	8001ea2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68da      	ldr	r2, [r3, #12]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f042 0201 	orr.w	r2, r2, #1
 8001e2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a1e      	ldr	r2, [pc, #120]	@ (8001eb0 <HAL_TIM_Base_Start_IT+0xb0>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d018      	beq.n	8001e6c <HAL_TIM_Base_Start_IT+0x6c>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e42:	d013      	beq.n	8001e6c <HAL_TIM_Base_Start_IT+0x6c>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a1a      	ldr	r2, [pc, #104]	@ (8001eb4 <HAL_TIM_Base_Start_IT+0xb4>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d00e      	beq.n	8001e6c <HAL_TIM_Base_Start_IT+0x6c>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a19      	ldr	r2, [pc, #100]	@ (8001eb8 <HAL_TIM_Base_Start_IT+0xb8>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d009      	beq.n	8001e6c <HAL_TIM_Base_Start_IT+0x6c>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a17      	ldr	r2, [pc, #92]	@ (8001ebc <HAL_TIM_Base_Start_IT+0xbc>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d004      	beq.n	8001e6c <HAL_TIM_Base_Start_IT+0x6c>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a16      	ldr	r2, [pc, #88]	@ (8001ec0 <HAL_TIM_Base_Start_IT+0xc0>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d111      	bne.n	8001e90 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2b06      	cmp	r3, #6
 8001e7c:	d010      	beq.n	8001ea0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f042 0201 	orr.w	r2, r2, #1
 8001e8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e8e:	e007      	b.n	8001ea0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f042 0201 	orr.w	r2, r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3714      	adds	r7, #20
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	40010000 	.word	0x40010000
 8001eb4:	40000400 	.word	0x40000400
 8001eb8:	40000800 	.word	0x40000800
 8001ebc:	40000c00 	.word	0x40000c00
 8001ec0:	40014000 	.word	0x40014000

08001ec4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d020      	beq.n	8001f28 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d01b      	beq.n	8001f28 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f06f 0202 	mvn.w	r2, #2
 8001ef8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2201      	movs	r2, #1
 8001efe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	f003 0303 	and.w	r3, r3, #3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 f8d2 	bl	80020b8 <HAL_TIM_IC_CaptureCallback>
 8001f14:	e005      	b.n	8001f22 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f8c4 	bl	80020a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 f8d5 	bl	80020cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	f003 0304 	and.w	r3, r3, #4
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d020      	beq.n	8001f74 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d01b      	beq.n	8001f74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f06f 0204 	mvn.w	r2, #4
 8001f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2202      	movs	r2, #2
 8001f4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f8ac 	bl	80020b8 <HAL_TIM_IC_CaptureCallback>
 8001f60:	e005      	b.n	8001f6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f89e 	bl	80020a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 f8af 	bl	80020cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	f003 0308 	and.w	r3, r3, #8
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d020      	beq.n	8001fc0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f003 0308 	and.w	r3, r3, #8
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d01b      	beq.n	8001fc0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f06f 0208 	mvn.w	r2, #8
 8001f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2204      	movs	r2, #4
 8001f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	f003 0303 	and.w	r3, r3, #3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 f886 	bl	80020b8 <HAL_TIM_IC_CaptureCallback>
 8001fac:	e005      	b.n	8001fba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f878 	bl	80020a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f000 f889 	bl	80020cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	f003 0310 	and.w	r3, r3, #16
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d020      	beq.n	800200c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	f003 0310 	and.w	r3, r3, #16
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d01b      	beq.n	800200c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f06f 0210 	mvn.w	r2, #16
 8001fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2208      	movs	r2, #8
 8001fe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f860 	bl	80020b8 <HAL_TIM_IC_CaptureCallback>
 8001ff8:	e005      	b.n	8002006 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 f852 	bl	80020a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f000 f863 	bl	80020cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00c      	beq.n	8002030 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b00      	cmp	r3, #0
 800201e:	d007      	beq.n	8002030 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f06f 0201 	mvn.w	r2, #1
 8002028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7fe fd82 	bl	8000b34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00c      	beq.n	8002054 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002040:	2b00      	cmp	r3, #0
 8002042:	d007      	beq.n	8002054 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800204c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 f8e6 	bl	8002220 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00c      	beq.n	8002078 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002064:	2b00      	cmp	r3, #0
 8002066:	d007      	beq.n	8002078 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 f834 	bl	80020e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	f003 0320 	and.w	r3, r3, #32
 800207e:	2b00      	cmp	r3, #0
 8002080:	d00c      	beq.n	800209c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f003 0320 	and.w	r3, r3, #32
 8002088:	2b00      	cmp	r3, #0
 800208a:	d007      	beq.n	800209c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f06f 0220 	mvn.w	r2, #32
 8002094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f8b8 	bl	800220c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800209c:	bf00      	nop
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a3a      	ldr	r2, [pc, #232]	@ (80021f0 <TIM_Base_SetConfig+0xfc>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d00f      	beq.n	800212c <TIM_Base_SetConfig+0x38>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002112:	d00b      	beq.n	800212c <TIM_Base_SetConfig+0x38>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a37      	ldr	r2, [pc, #220]	@ (80021f4 <TIM_Base_SetConfig+0x100>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d007      	beq.n	800212c <TIM_Base_SetConfig+0x38>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a36      	ldr	r2, [pc, #216]	@ (80021f8 <TIM_Base_SetConfig+0x104>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d003      	beq.n	800212c <TIM_Base_SetConfig+0x38>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a35      	ldr	r2, [pc, #212]	@ (80021fc <TIM_Base_SetConfig+0x108>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d108      	bne.n	800213e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002132:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	4313      	orrs	r3, r2
 800213c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a2b      	ldr	r2, [pc, #172]	@ (80021f0 <TIM_Base_SetConfig+0xfc>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d01b      	beq.n	800217e <TIM_Base_SetConfig+0x8a>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800214c:	d017      	beq.n	800217e <TIM_Base_SetConfig+0x8a>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a28      	ldr	r2, [pc, #160]	@ (80021f4 <TIM_Base_SetConfig+0x100>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d013      	beq.n	800217e <TIM_Base_SetConfig+0x8a>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a27      	ldr	r2, [pc, #156]	@ (80021f8 <TIM_Base_SetConfig+0x104>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d00f      	beq.n	800217e <TIM_Base_SetConfig+0x8a>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a26      	ldr	r2, [pc, #152]	@ (80021fc <TIM_Base_SetConfig+0x108>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d00b      	beq.n	800217e <TIM_Base_SetConfig+0x8a>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a25      	ldr	r2, [pc, #148]	@ (8002200 <TIM_Base_SetConfig+0x10c>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d007      	beq.n	800217e <TIM_Base_SetConfig+0x8a>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a24      	ldr	r2, [pc, #144]	@ (8002204 <TIM_Base_SetConfig+0x110>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d003      	beq.n	800217e <TIM_Base_SetConfig+0x8a>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a23      	ldr	r2, [pc, #140]	@ (8002208 <TIM_Base_SetConfig+0x114>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d108      	bne.n	8002190 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002184:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	4313      	orrs	r3, r2
 800218e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	4313      	orrs	r3, r2
 800219c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	689a      	ldr	r2, [r3, #8]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a0e      	ldr	r2, [pc, #56]	@ (80021f0 <TIM_Base_SetConfig+0xfc>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d103      	bne.n	80021c4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	691a      	ldr	r2, [r3, #16]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d105      	bne.n	80021e2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	f023 0201 	bic.w	r2, r3, #1
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	611a      	str	r2, [r3, #16]
  }
}
 80021e2:	bf00      	nop
 80021e4:	3714      	adds	r7, #20
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	40010000 	.word	0x40010000
 80021f4:	40000400 	.word	0x40000400
 80021f8:	40000800 	.word	0x40000800
 80021fc:	40000c00 	.word	0x40000c00
 8002200:	40014000 	.word	0x40014000
 8002204:	40014400 	.word	0x40014400
 8002208:	40014800 	.word	0x40014800

0800220c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <__NVIC_SetPriority>:
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	6039      	str	r1, [r7, #0]
 800223e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002244:	2b00      	cmp	r3, #0
 8002246:	db0a      	blt.n	800225e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	b2da      	uxtb	r2, r3
 800224c:	490c      	ldr	r1, [pc, #48]	@ (8002280 <__NVIC_SetPriority+0x4c>)
 800224e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002252:	0112      	lsls	r2, r2, #4
 8002254:	b2d2      	uxtb	r2, r2
 8002256:	440b      	add	r3, r1
 8002258:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800225c:	e00a      	b.n	8002274 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	b2da      	uxtb	r2, r3
 8002262:	4908      	ldr	r1, [pc, #32]	@ (8002284 <__NVIC_SetPriority+0x50>)
 8002264:	79fb      	ldrb	r3, [r7, #7]
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	3b04      	subs	r3, #4
 800226c:	0112      	lsls	r2, r2, #4
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	440b      	add	r3, r1
 8002272:	761a      	strb	r2, [r3, #24]
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	e000e100 	.word	0xe000e100
 8002284:	e000ed00 	.word	0xe000ed00

08002288 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800228c:	4b05      	ldr	r3, [pc, #20]	@ (80022a4 <SysTick_Handler+0x1c>)
 800228e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002290:	f002 fc3a 	bl	8004b08 <xTaskGetSchedulerState>
 8002294:	4603      	mov	r3, r0
 8002296:	2b01      	cmp	r3, #1
 8002298:	d001      	beq.n	800229e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800229a:	f003 fb35 	bl	8005908 <xPortSysTickHandler>
  }
}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	e000e010 	.word	0xe000e010

080022a8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80022ac:	2100      	movs	r1, #0
 80022ae:	f06f 0004 	mvn.w	r0, #4
 80022b2:	f7ff ffbf 	bl	8002234 <__NVIC_SetPriority>
#endif
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
	...

080022bc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022c2:	f3ef 8305 	mrs	r3, IPSR
 80022c6:	603b      	str	r3, [r7, #0]
  return(result);
 80022c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80022ce:	f06f 0305 	mvn.w	r3, #5
 80022d2:	607b      	str	r3, [r7, #4]
 80022d4:	e00c      	b.n	80022f0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80022d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002300 <osKernelInitialize+0x44>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d105      	bne.n	80022ea <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80022de:	4b08      	ldr	r3, [pc, #32]	@ (8002300 <osKernelInitialize+0x44>)
 80022e0:	2201      	movs	r2, #1
 80022e2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80022e4:	2300      	movs	r3, #0
 80022e6:	607b      	str	r3, [r7, #4]
 80022e8:	e002      	b.n	80022f0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80022ea:	f04f 33ff 	mov.w	r3, #4294967295
 80022ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80022f0:	687b      	ldr	r3, [r7, #4]
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	200000f4 	.word	0x200000f4

08002304 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800230a:	f3ef 8305 	mrs	r3, IPSR
 800230e:	603b      	str	r3, [r7, #0]
  return(result);
 8002310:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <osKernelStart+0x1a>
    stat = osErrorISR;
 8002316:	f06f 0305 	mvn.w	r3, #5
 800231a:	607b      	str	r3, [r7, #4]
 800231c:	e010      	b.n	8002340 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800231e:	4b0b      	ldr	r3, [pc, #44]	@ (800234c <osKernelStart+0x48>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d109      	bne.n	800233a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002326:	f7ff ffbf 	bl	80022a8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800232a:	4b08      	ldr	r3, [pc, #32]	@ (800234c <osKernelStart+0x48>)
 800232c:	2202      	movs	r2, #2
 800232e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002330:	f001 ff74 	bl	800421c <vTaskStartScheduler>
      stat = osOK;
 8002334:	2300      	movs	r3, #0
 8002336:	607b      	str	r3, [r7, #4]
 8002338:	e002      	b.n	8002340 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800233a:	f04f 33ff 	mov.w	r3, #4294967295
 800233e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002340:	687b      	ldr	r3, [r7, #4]
}
 8002342:	4618      	mov	r0, r3
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	200000f4 	.word	0x200000f4

08002350 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002356:	f3ef 8305 	mrs	r3, IPSR
 800235a:	603b      	str	r3, [r7, #0]
  return(result);
 800235c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8002362:	f002 f887 	bl	8004474 <xTaskGetTickCountFromISR>
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	e002      	b.n	8002370 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800236a:	f002 f873 	bl	8004454 <xTaskGetTickCount>
 800236e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8002370:	687b      	ldr	r3, [r7, #4]
}
 8002372:	4618      	mov	r0, r3
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800237a:	b580      	push	{r7, lr}
 800237c:	b08e      	sub	sp, #56	@ 0x38
 800237e:	af04      	add	r7, sp, #16
 8002380:	60f8      	str	r0, [r7, #12]
 8002382:	60b9      	str	r1, [r7, #8]
 8002384:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002386:	2300      	movs	r3, #0
 8002388:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800238a:	f3ef 8305 	mrs	r3, IPSR
 800238e:	617b      	str	r3, [r7, #20]
  return(result);
 8002390:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002392:	2b00      	cmp	r3, #0
 8002394:	d17e      	bne.n	8002494 <osThreadNew+0x11a>
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d07b      	beq.n	8002494 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800239c:	2380      	movs	r3, #128	@ 0x80
 800239e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80023a0:	2318      	movs	r3, #24
 80023a2:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80023a4:	2300      	movs	r3, #0
 80023a6:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80023a8:	f04f 33ff 	mov.w	r3, #4294967295
 80023ac:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d045      	beq.n	8002440 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d002      	beq.n	80023c2 <osThreadNew+0x48>
        name = attr->name;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d002      	beq.n	80023d0 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d008      	beq.n	80023e8 <osThreadNew+0x6e>
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	2b38      	cmp	r3, #56	@ 0x38
 80023da:	d805      	bhi.n	80023e8 <osThreadNew+0x6e>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <osThreadNew+0x72>
        return (NULL);
 80023e8:	2300      	movs	r3, #0
 80023ea:	e054      	b.n	8002496 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d003      	beq.n	80023fc <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	089b      	lsrs	r3, r3, #2
 80023fa:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00e      	beq.n	8002422 <osThreadNew+0xa8>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	2ba7      	cmp	r3, #167	@ 0xa7
 800240a:	d90a      	bls.n	8002422 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002410:	2b00      	cmp	r3, #0
 8002412:	d006      	beq.n	8002422 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	695b      	ldr	r3, [r3, #20]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d002      	beq.n	8002422 <osThreadNew+0xa8>
        mem = 1;
 800241c:	2301      	movs	r3, #1
 800241e:	61bb      	str	r3, [r7, #24]
 8002420:	e010      	b.n	8002444 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d10c      	bne.n	8002444 <osThreadNew+0xca>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d108      	bne.n	8002444 <osThreadNew+0xca>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d104      	bne.n	8002444 <osThreadNew+0xca>
          mem = 0;
 800243a:	2300      	movs	r3, #0
 800243c:	61bb      	str	r3, [r7, #24]
 800243e:	e001      	b.n	8002444 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002440:	2300      	movs	r3, #0
 8002442:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d110      	bne.n	800246c <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002452:	9202      	str	r2, [sp, #8]
 8002454:	9301      	str	r3, [sp, #4]
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	6a3a      	ldr	r2, [r7, #32]
 800245e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f001 fbdf 	bl	8003c24 <xTaskCreateStatic>
 8002466:	4603      	mov	r3, r0
 8002468:	613b      	str	r3, [r7, #16]
 800246a:	e013      	b.n	8002494 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d110      	bne.n	8002494 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002472:	6a3b      	ldr	r3, [r7, #32]
 8002474:	b29a      	uxth	r2, r3
 8002476:	f107 0310 	add.w	r3, r7, #16
 800247a:	9301      	str	r3, [sp, #4]
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002484:	68f8      	ldr	r0, [r7, #12]
 8002486:	f001 fc2d 	bl	8003ce4 <xTaskCreate>
 800248a:	4603      	mov	r3, r0
 800248c:	2b01      	cmp	r3, #1
 800248e:	d001      	beq.n	8002494 <osThreadNew+0x11a>
            hTask = NULL;
 8002490:	2300      	movs	r3, #0
 8002492:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002494:	693b      	ldr	r3, [r7, #16]
}
 8002496:	4618      	mov	r0, r3
 8002498:	3728      	adds	r7, #40	@ 0x28
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 800249e:	b580      	push	{r7, lr}
 80024a0:	b086      	sub	sp, #24
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024aa:	f3ef 8305 	mrs	r3, IPSR
 80024ae:	60fb      	str	r3, [r7, #12]
  return(result);
 80024b0:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d003      	beq.n	80024be <osThreadSuspend+0x20>
    stat = osErrorISR;
 80024b6:	f06f 0305 	mvn.w	r3, #5
 80024ba:	617b      	str	r3, [r7, #20]
 80024bc:	e00b      	b.n	80024d6 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d103      	bne.n	80024cc <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 80024c4:	f06f 0303 	mvn.w	r3, #3
 80024c8:	617b      	str	r3, [r7, #20]
 80024ca:	e004      	b.n	80024d6 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 80024cc:	2300      	movs	r3, #0
 80024ce:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 80024d0:	6938      	ldr	r0, [r7, #16]
 80024d2:	f001 fd9b 	bl	800400c <vTaskSuspend>
  }

  return (stat);
 80024d6:	697b      	ldr	r3, [r7, #20]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3718      	adds	r7, #24
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024ec:	f3ef 8305 	mrs	r3, IPSR
 80024f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80024f2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d003      	beq.n	8002500 <osThreadResume+0x20>
    stat = osErrorISR;
 80024f8:	f06f 0305 	mvn.w	r3, #5
 80024fc:	617b      	str	r3, [r7, #20]
 80024fe:	e00b      	b.n	8002518 <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d103      	bne.n	800250e <osThreadResume+0x2e>
    stat = osErrorParameter;
 8002506:	f06f 0303 	mvn.w	r3, #3
 800250a:	617b      	str	r3, [r7, #20]
 800250c:	e004      	b.n	8002518 <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 800250e:	2300      	movs	r3, #0
 8002510:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 8002512:	6938      	ldr	r0, [r7, #16]
 8002514:	f001 fe22 	bl	800415c <vTaskResume>
  }

  return (stat);
 8002518:	697b      	ldr	r3, [r7, #20]
}
 800251a:	4618      	mov	r0, r3
 800251c:	3718      	adds	r7, #24
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002522:	b580      	push	{r7, lr}
 8002524:	b084      	sub	sp, #16
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800252a:	f3ef 8305 	mrs	r3, IPSR
 800252e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002530:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <osDelay+0x1c>
    stat = osErrorISR;
 8002536:	f06f 0305 	mvn.w	r3, #5
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	e007      	b.n	800254e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800253e:	2300      	movs	r3, #0
 8002540:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d002      	beq.n	800254e <osDelay+0x2c>
      vTaskDelay(ticks);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f001 fd29 	bl	8003fa0 <vTaskDelay>
    }
  }

  return (stat);
 800254e:	68fb      	ldr	r3, [r7, #12]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8002558:	b580      	push	{r7, lr}
 800255a:	b08a      	sub	sp, #40	@ 0x28
 800255c:	af02      	add	r7, sp, #8
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8002564:	2300      	movs	r3, #0
 8002566:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002568:	f3ef 8305 	mrs	r3, IPSR
 800256c:	613b      	str	r3, [r7, #16]
  return(result);
 800256e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8002570:	2b00      	cmp	r3, #0
 8002572:	d175      	bne.n	8002660 <osSemaphoreNew+0x108>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d072      	beq.n	8002660 <osSemaphoreNew+0x108>
 800257a:	68ba      	ldr	r2, [r7, #8]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	429a      	cmp	r2, r3
 8002580:	d86e      	bhi.n	8002660 <osSemaphoreNew+0x108>
    mem = -1;
 8002582:	f04f 33ff 	mov.w	r3, #4294967295
 8002586:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d015      	beq.n	80025ba <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d006      	beq.n	80025a4 <osSemaphoreNew+0x4c>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	2b4f      	cmp	r3, #79	@ 0x4f
 800259c:	d902      	bls.n	80025a4 <osSemaphoreNew+0x4c>
        mem = 1;
 800259e:	2301      	movs	r3, #1
 80025a0:	61bb      	str	r3, [r7, #24]
 80025a2:	e00c      	b.n	80025be <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d108      	bne.n	80025be <osSemaphoreNew+0x66>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d104      	bne.n	80025be <osSemaphoreNew+0x66>
          mem = 0;
 80025b4:	2300      	movs	r3, #0
 80025b6:	61bb      	str	r3, [r7, #24]
 80025b8:	e001      	b.n	80025be <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80025ba:	2300      	movs	r3, #0
 80025bc:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c4:	d04c      	beq.n	8002660 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d128      	bne.n	800261e <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d10a      	bne.n	80025e8 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	2203      	movs	r2, #3
 80025d8:	9200      	str	r2, [sp, #0]
 80025da:	2200      	movs	r2, #0
 80025dc:	2100      	movs	r1, #0
 80025de:	2001      	movs	r0, #1
 80025e0:	f000 fb5e 	bl	8002ca0 <xQueueGenericCreateStatic>
 80025e4:	61f8      	str	r0, [r7, #28]
 80025e6:	e005      	b.n	80025f4 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80025e8:	2203      	movs	r2, #3
 80025ea:	2100      	movs	r1, #0
 80025ec:	2001      	movs	r0, #1
 80025ee:	f000 fbd4 	bl	8002d9a <xQueueGenericCreate>
 80025f2:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d022      	beq.n	8002640 <osSemaphoreNew+0xe8>
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d01f      	beq.n	8002640 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002600:	2300      	movs	r3, #0
 8002602:	2200      	movs	r2, #0
 8002604:	2100      	movs	r1, #0
 8002606:	69f8      	ldr	r0, [r7, #28]
 8002608:	f000 fc94 	bl	8002f34 <xQueueGenericSend>
 800260c:	4603      	mov	r3, r0
 800260e:	2b01      	cmp	r3, #1
 8002610:	d016      	beq.n	8002640 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8002612:	69f8      	ldr	r0, [r7, #28]
 8002614:	f001 f932 	bl	800387c <vQueueDelete>
            hSemaphore = NULL;
 8002618:	2300      	movs	r3, #0
 800261a:	61fb      	str	r3, [r7, #28]
 800261c:	e010      	b.n	8002640 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d108      	bne.n	8002636 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	461a      	mov	r2, r3
 800262a:	68b9      	ldr	r1, [r7, #8]
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f000 fc12 	bl	8002e56 <xQueueCreateCountingSemaphoreStatic>
 8002632:	61f8      	str	r0, [r7, #28]
 8002634:	e004      	b.n	8002640 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8002636:	68b9      	ldr	r1, [r7, #8]
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f000 fc45 	bl	8002ec8 <xQueueCreateCountingSemaphore>
 800263e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00c      	beq.n	8002660 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <osSemaphoreNew+0xfc>
          name = attr->name;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	617b      	str	r3, [r7, #20]
 8002652:	e001      	b.n	8002658 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8002654:	2300      	movs	r3, #0
 8002656:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8002658:	6979      	ldr	r1, [r7, #20]
 800265a:	69f8      	ldr	r0, [r7, #28]
 800265c:	f001 fa5a 	bl	8003b14 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8002660:	69fb      	ldr	r3, [r7, #28]
}
 8002662:	4618      	mov	r0, r3
 8002664:	3720      	adds	r7, #32
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
	...

0800266c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800267a:	2300      	movs	r3, #0
 800267c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d103      	bne.n	800268c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8002684:	f06f 0303 	mvn.w	r3, #3
 8002688:	617b      	str	r3, [r7, #20]
 800268a:	e039      	b.n	8002700 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800268c:	f3ef 8305 	mrs	r3, IPSR
 8002690:	60fb      	str	r3, [r7, #12]
  return(result);
 8002692:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002694:	2b00      	cmp	r3, #0
 8002696:	d022      	beq.n	80026de <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d003      	beq.n	80026a6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800269e:	f06f 0303 	mvn.w	r3, #3
 80026a2:	617b      	str	r3, [r7, #20]
 80026a4:	e02c      	b.n	8002700 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80026a6:	2300      	movs	r3, #0
 80026a8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80026aa:	f107 0308 	add.w	r3, r7, #8
 80026ae:	461a      	mov	r2, r3
 80026b0:	2100      	movs	r1, #0
 80026b2:	6938      	ldr	r0, [r7, #16]
 80026b4:	f001 f860 	bl	8003778 <xQueueReceiveFromISR>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d003      	beq.n	80026c6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80026be:	f06f 0302 	mvn.w	r3, #2
 80026c2:	617b      	str	r3, [r7, #20]
 80026c4:	e01c      	b.n	8002700 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d019      	beq.n	8002700 <osSemaphoreAcquire+0x94>
 80026cc:	4b0f      	ldr	r3, [pc, #60]	@ (800270c <osSemaphoreAcquire+0xa0>)
 80026ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	f3bf 8f4f 	dsb	sy
 80026d8:	f3bf 8f6f 	isb	sy
 80026dc:	e010      	b.n	8002700 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80026de:	6839      	ldr	r1, [r7, #0]
 80026e0:	6938      	ldr	r0, [r7, #16]
 80026e2:	f000 ff39 	bl	8003558 <xQueueSemaphoreTake>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d009      	beq.n	8002700 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80026f2:	f06f 0301 	mvn.w	r3, #1
 80026f6:	617b      	str	r3, [r7, #20]
 80026f8:	e002      	b.n	8002700 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80026fa:	f06f 0302 	mvn.w	r3, #2
 80026fe:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8002700:	697b      	ldr	r3, [r7, #20]
}
 8002702:	4618      	mov	r0, r3
 8002704:	3718      	adds	r7, #24
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	e000ed04 	.word	0xe000ed04

08002710 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800271c:	2300      	movs	r3, #0
 800271e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d103      	bne.n	800272e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8002726:	f06f 0303 	mvn.w	r3, #3
 800272a:	617b      	str	r3, [r7, #20]
 800272c:	e02c      	b.n	8002788 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800272e:	f3ef 8305 	mrs	r3, IPSR
 8002732:	60fb      	str	r3, [r7, #12]
  return(result);
 8002734:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002736:	2b00      	cmp	r3, #0
 8002738:	d01a      	beq.n	8002770 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800273a:	2300      	movs	r3, #0
 800273c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800273e:	f107 0308 	add.w	r3, r7, #8
 8002742:	4619      	mov	r1, r3
 8002744:	6938      	ldr	r0, [r7, #16]
 8002746:	f000 fd95 	bl	8003274 <xQueueGiveFromISR>
 800274a:	4603      	mov	r3, r0
 800274c:	2b01      	cmp	r3, #1
 800274e:	d003      	beq.n	8002758 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8002750:	f06f 0302 	mvn.w	r3, #2
 8002754:	617b      	str	r3, [r7, #20]
 8002756:	e017      	b.n	8002788 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d014      	beq.n	8002788 <osSemaphoreRelease+0x78>
 800275e:	4b0d      	ldr	r3, [pc, #52]	@ (8002794 <osSemaphoreRelease+0x84>)
 8002760:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	f3bf 8f4f 	dsb	sy
 800276a:	f3bf 8f6f 	isb	sy
 800276e:	e00b      	b.n	8002788 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002770:	2300      	movs	r3, #0
 8002772:	2200      	movs	r2, #0
 8002774:	2100      	movs	r1, #0
 8002776:	6938      	ldr	r0, [r7, #16]
 8002778:	f000 fbdc 	bl	8002f34 <xQueueGenericSend>
 800277c:	4603      	mov	r3, r0
 800277e:	2b01      	cmp	r3, #1
 8002780:	d002      	beq.n	8002788 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8002782:	f06f 0302 	mvn.w	r3, #2
 8002786:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8002788:	697b      	ldr	r3, [r7, #20]
}
 800278a:	4618      	mov	r0, r3
 800278c:	3718      	adds	r7, #24
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	e000ed04 	.word	0xe000ed04

08002798 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8002798:	b580      	push	{r7, lr}
 800279a:	b08a      	sub	sp, #40	@ 0x28
 800279c:	af02      	add	r7, sp, #8
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80027a4:	2300      	movs	r3, #0
 80027a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027a8:	f3ef 8305 	mrs	r3, IPSR
 80027ac:	613b      	str	r3, [r7, #16]
  return(result);
 80027ae:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d15f      	bne.n	8002874 <osMessageQueueNew+0xdc>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d05c      	beq.n	8002874 <osMessageQueueNew+0xdc>
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d059      	beq.n	8002874 <osMessageQueueNew+0xdc>
    mem = -1;
 80027c0:	f04f 33ff 	mov.w	r3, #4294967295
 80027c4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d029      	beq.n	8002820 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d012      	beq.n	80027fa <osMessageQueueNew+0x62>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	2b4f      	cmp	r3, #79	@ 0x4f
 80027da:	d90e      	bls.n	80027fa <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00a      	beq.n	80027fa <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	695a      	ldr	r2, [r3, #20]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	68b9      	ldr	r1, [r7, #8]
 80027ec:	fb01 f303 	mul.w	r3, r1, r3
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d302      	bcc.n	80027fa <osMessageQueueNew+0x62>
        mem = 1;
 80027f4:	2301      	movs	r3, #1
 80027f6:	61bb      	str	r3, [r7, #24]
 80027f8:	e014      	b.n	8002824 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d110      	bne.n	8002824 <osMessageQueueNew+0x8c>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10c      	bne.n	8002824 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800280e:	2b00      	cmp	r3, #0
 8002810:	d108      	bne.n	8002824 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d104      	bne.n	8002824 <osMessageQueueNew+0x8c>
          mem = 0;
 800281a:	2300      	movs	r3, #0
 800281c:	61bb      	str	r3, [r7, #24]
 800281e:	e001      	b.n	8002824 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8002820:	2300      	movs	r3, #0
 8002822:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d10b      	bne.n	8002842 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	691a      	ldr	r2, [r3, #16]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	2100      	movs	r1, #0
 8002834:	9100      	str	r1, [sp, #0]
 8002836:	68b9      	ldr	r1, [r7, #8]
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f000 fa31 	bl	8002ca0 <xQueueGenericCreateStatic>
 800283e:	61f8      	str	r0, [r7, #28]
 8002840:	e008      	b.n	8002854 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d105      	bne.n	8002854 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8002848:	2200      	movs	r2, #0
 800284a:	68b9      	ldr	r1, [r7, #8]
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f000 faa4 	bl	8002d9a <xQueueGenericCreate>
 8002852:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00c      	beq.n	8002874 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d003      	beq.n	8002868 <osMessageQueueNew+0xd0>
        name = attr->name;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	617b      	str	r3, [r7, #20]
 8002866:	e001      	b.n	800286c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8002868:	2300      	movs	r3, #0
 800286a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800286c:	6979      	ldr	r1, [r7, #20]
 800286e:	69f8      	ldr	r0, [r7, #28]
 8002870:	f001 f950 	bl	8003b14 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8002874:	69fb      	ldr	r3, [r7, #28]
}
 8002876:	4618      	mov	r0, r3
 8002878:	3720      	adds	r7, #32
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
	...

08002880 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8002880:	b580      	push	{r7, lr}
 8002882:	b088      	sub	sp, #32
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	603b      	str	r3, [r7, #0]
 800288c:	4613      	mov	r3, r2
 800288e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002894:	2300      	movs	r3, #0
 8002896:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002898:	f3ef 8305 	mrs	r3, IPSR
 800289c:	617b      	str	r3, [r7, #20]
  return(result);
 800289e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d028      	beq.n	80028f6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d005      	beq.n	80028b6 <osMessageQueuePut+0x36>
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d002      	beq.n	80028b6 <osMessageQueuePut+0x36>
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d003      	beq.n	80028be <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80028b6:	f06f 0303 	mvn.w	r3, #3
 80028ba:	61fb      	str	r3, [r7, #28]
 80028bc:	e038      	b.n	8002930 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80028be:	2300      	movs	r3, #0
 80028c0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80028c2:	f107 0210 	add.w	r2, r7, #16
 80028c6:	2300      	movs	r3, #0
 80028c8:	68b9      	ldr	r1, [r7, #8]
 80028ca:	69b8      	ldr	r0, [r7, #24]
 80028cc:	f000 fc34 	bl	8003138 <xQueueGenericSendFromISR>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d003      	beq.n	80028de <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80028d6:	f06f 0302 	mvn.w	r3, #2
 80028da:	61fb      	str	r3, [r7, #28]
 80028dc:	e028      	b.n	8002930 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d025      	beq.n	8002930 <osMessageQueuePut+0xb0>
 80028e4:	4b15      	ldr	r3, [pc, #84]	@ (800293c <osMessageQueuePut+0xbc>)
 80028e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	f3bf 8f4f 	dsb	sy
 80028f0:	f3bf 8f6f 	isb	sy
 80028f4:	e01c      	b.n	8002930 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d002      	beq.n	8002902 <osMessageQueuePut+0x82>
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d103      	bne.n	800290a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8002902:	f06f 0303 	mvn.w	r3, #3
 8002906:	61fb      	str	r3, [r7, #28]
 8002908:	e012      	b.n	8002930 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800290a:	2300      	movs	r3, #0
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	68b9      	ldr	r1, [r7, #8]
 8002910:	69b8      	ldr	r0, [r7, #24]
 8002912:	f000 fb0f 	bl	8002f34 <xQueueGenericSend>
 8002916:	4603      	mov	r3, r0
 8002918:	2b01      	cmp	r3, #1
 800291a:	d009      	beq.n	8002930 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8002922:	f06f 0301 	mvn.w	r3, #1
 8002926:	61fb      	str	r3, [r7, #28]
 8002928:	e002      	b.n	8002930 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800292a:	f06f 0302 	mvn.w	r3, #2
 800292e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8002930:	69fb      	ldr	r3, [r7, #28]
}
 8002932:	4618      	mov	r0, r3
 8002934:	3720      	adds	r7, #32
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	e000ed04 	.word	0xe000ed04

08002940 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8002940:	b580      	push	{r7, lr}
 8002942:	b088      	sub	sp, #32
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
 800294c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002952:	2300      	movs	r3, #0
 8002954:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002956:	f3ef 8305 	mrs	r3, IPSR
 800295a:	617b      	str	r3, [r7, #20]
  return(result);
 800295c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800295e:	2b00      	cmp	r3, #0
 8002960:	d028      	beq.n	80029b4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d005      	beq.n	8002974 <osMessageQueueGet+0x34>
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d002      	beq.n	8002974 <osMessageQueueGet+0x34>
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d003      	beq.n	800297c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8002974:	f06f 0303 	mvn.w	r3, #3
 8002978:	61fb      	str	r3, [r7, #28]
 800297a:	e037      	b.n	80029ec <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800297c:	2300      	movs	r3, #0
 800297e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8002980:	f107 0310 	add.w	r3, r7, #16
 8002984:	461a      	mov	r2, r3
 8002986:	68b9      	ldr	r1, [r7, #8]
 8002988:	69b8      	ldr	r0, [r7, #24]
 800298a:	f000 fef5 	bl	8003778 <xQueueReceiveFromISR>
 800298e:	4603      	mov	r3, r0
 8002990:	2b01      	cmp	r3, #1
 8002992:	d003      	beq.n	800299c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8002994:	f06f 0302 	mvn.w	r3, #2
 8002998:	61fb      	str	r3, [r7, #28]
 800299a:	e027      	b.n	80029ec <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d024      	beq.n	80029ec <osMessageQueueGet+0xac>
 80029a2:	4b15      	ldr	r3, [pc, #84]	@ (80029f8 <osMessageQueueGet+0xb8>)
 80029a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	f3bf 8f4f 	dsb	sy
 80029ae:	f3bf 8f6f 	isb	sy
 80029b2:	e01b      	b.n	80029ec <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d002      	beq.n	80029c0 <osMessageQueueGet+0x80>
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d103      	bne.n	80029c8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80029c0:	f06f 0303 	mvn.w	r3, #3
 80029c4:	61fb      	str	r3, [r7, #28]
 80029c6:	e011      	b.n	80029ec <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	68b9      	ldr	r1, [r7, #8]
 80029cc:	69b8      	ldr	r0, [r7, #24]
 80029ce:	f000 fce1 	bl	8003394 <xQueueReceive>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d009      	beq.n	80029ec <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80029de:	f06f 0301 	mvn.w	r3, #1
 80029e2:	61fb      	str	r3, [r7, #28]
 80029e4:	e002      	b.n	80029ec <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80029e6:	f06f 0302 	mvn.w	r3, #2
 80029ea:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80029ec:	69fb      	ldr	r3, [r7, #28]
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3720      	adds	r7, #32
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	e000ed04 	.word	0xe000ed04

080029fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	4a07      	ldr	r2, [pc, #28]	@ (8002a28 <vApplicationGetIdleTaskMemory+0x2c>)
 8002a0c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	4a06      	ldr	r2, [pc, #24]	@ (8002a2c <vApplicationGetIdleTaskMemory+0x30>)
 8002a12:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2280      	movs	r2, #128	@ 0x80
 8002a18:	601a      	str	r2, [r3, #0]
}
 8002a1a:	bf00      	nop
 8002a1c:	3714      	adds	r7, #20
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	200000f8 	.word	0x200000f8
 8002a2c:	200001a0 	.word	0x200001a0

08002a30 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	4a07      	ldr	r2, [pc, #28]	@ (8002a5c <vApplicationGetTimerTaskMemory+0x2c>)
 8002a40:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	4a06      	ldr	r2, [pc, #24]	@ (8002a60 <vApplicationGetTimerTaskMemory+0x30>)
 8002a46:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a4e:	601a      	str	r2, [r3, #0]
}
 8002a50:	bf00      	nop
 8002a52:	3714      	adds	r7, #20
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	200003a0 	.word	0x200003a0
 8002a60:	20000448 	.word	0x20000448

08002a64 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f103 0208 	add.w	r2, r3, #8
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f04f 32ff 	mov.w	r2, #4294967295
 8002a7c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f103 0208 	add.w	r2, r3, #8
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f103 0208 	add.w	r2, r3, #8
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002ab2:	bf00      	nop
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b085      	sub	sp, #20
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
 8002ac6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	1c5a      	adds	r2, r3, #1
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	601a      	str	r2, [r3, #0]
}
 8002afa:	bf00      	nop
 8002afc:	3714      	adds	r7, #20
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b06:	b480      	push	{r7}
 8002b08:	b085      	sub	sp, #20
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
 8002b0e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b1c:	d103      	bne.n	8002b26 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	60fb      	str	r3, [r7, #12]
 8002b24:	e00c      	b.n	8002b40 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	3308      	adds	r3, #8
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	e002      	b.n	8002b34 <vListInsert+0x2e>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	60fb      	str	r3, [r7, #12]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d2f6      	bcs.n	8002b2e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	685a      	ldr	r2, [r3, #4]
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	683a      	ldr	r2, [r7, #0]
 8002b4e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	1c5a      	adds	r2, r3, #1
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	601a      	str	r2, [r3, #0]
}
 8002b6c:	bf00      	nop
 8002b6e:	3714      	adds	r7, #20
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	6892      	ldr	r2, [r2, #8]
 8002b8e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	6852      	ldr	r2, [r2, #4]
 8002b98:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d103      	bne.n	8002bac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	1e5a      	subs	r2, r3, #1
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3714      	adds	r7, #20
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d10b      	bne.n	8002bf8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002be4:	f383 8811 	msr	BASEPRI, r3
 8002be8:	f3bf 8f6f 	isb	sy
 8002bec:	f3bf 8f4f 	dsb	sy
 8002bf0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002bf2:	bf00      	nop
 8002bf4:	bf00      	nop
 8002bf6:	e7fd      	b.n	8002bf4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002bf8:	f002 fdf6 	bl	80057e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c04:	68f9      	ldr	r1, [r7, #12]
 8002c06:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002c08:	fb01 f303 	mul.w	r3, r1, r3
 8002c0c:	441a      	add	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	68f9      	ldr	r1, [r7, #12]
 8002c2c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002c2e:	fb01 f303 	mul.w	r3, r1, r3
 8002c32:	441a      	add	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	22ff      	movs	r2, #255	@ 0xff
 8002c3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	22ff      	movs	r2, #255	@ 0xff
 8002c44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d114      	bne.n	8002c78 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d01a      	beq.n	8002c8c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	3310      	adds	r3, #16
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f001 fd8e 	bl	800477c <xTaskRemoveFromEventList>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d012      	beq.n	8002c8c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002c66:	4b0d      	ldr	r3, [pc, #52]	@ (8002c9c <xQueueGenericReset+0xd0>)
 8002c68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c6c:	601a      	str	r2, [r3, #0]
 8002c6e:	f3bf 8f4f 	dsb	sy
 8002c72:	f3bf 8f6f 	isb	sy
 8002c76:	e009      	b.n	8002c8c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	3310      	adds	r3, #16
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff fef1 	bl	8002a64 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	3324      	adds	r3, #36	@ 0x24
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7ff feec 	bl	8002a64 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002c8c:	f002 fdde 	bl	800584c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002c90:	2301      	movs	r3, #1
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	e000ed04 	.word	0xe000ed04

08002ca0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08e      	sub	sp, #56	@ 0x38
 8002ca4:	af02      	add	r7, sp, #8
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
 8002cac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10b      	bne.n	8002ccc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cb8:	f383 8811 	msr	BASEPRI, r3
 8002cbc:	f3bf 8f6f 	isb	sy
 8002cc0:	f3bf 8f4f 	dsb	sy
 8002cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002cc6:	bf00      	nop
 8002cc8:	bf00      	nop
 8002cca:	e7fd      	b.n	8002cc8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d10b      	bne.n	8002cea <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cd6:	f383 8811 	msr	BASEPRI, r3
 8002cda:	f3bf 8f6f 	isb	sy
 8002cde:	f3bf 8f4f 	dsb	sy
 8002ce2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002ce4:	bf00      	nop
 8002ce6:	bf00      	nop
 8002ce8:	e7fd      	b.n	8002ce6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d002      	beq.n	8002cf6 <xQueueGenericCreateStatic+0x56>
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <xQueueGenericCreateStatic+0x5a>
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e000      	b.n	8002cfc <xQueueGenericCreateStatic+0x5c>
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10b      	bne.n	8002d18 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d04:	f383 8811 	msr	BASEPRI, r3
 8002d08:	f3bf 8f6f 	isb	sy
 8002d0c:	f3bf 8f4f 	dsb	sy
 8002d10:	623b      	str	r3, [r7, #32]
}
 8002d12:	bf00      	nop
 8002d14:	bf00      	nop
 8002d16:	e7fd      	b.n	8002d14 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d102      	bne.n	8002d24 <xQueueGenericCreateStatic+0x84>
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d101      	bne.n	8002d28 <xQueueGenericCreateStatic+0x88>
 8002d24:	2301      	movs	r3, #1
 8002d26:	e000      	b.n	8002d2a <xQueueGenericCreateStatic+0x8a>
 8002d28:	2300      	movs	r3, #0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10b      	bne.n	8002d46 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d32:	f383 8811 	msr	BASEPRI, r3
 8002d36:	f3bf 8f6f 	isb	sy
 8002d3a:	f3bf 8f4f 	dsb	sy
 8002d3e:	61fb      	str	r3, [r7, #28]
}
 8002d40:	bf00      	nop
 8002d42:	bf00      	nop
 8002d44:	e7fd      	b.n	8002d42 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002d46:	2350      	movs	r3, #80	@ 0x50
 8002d48:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	2b50      	cmp	r3, #80	@ 0x50
 8002d4e:	d00b      	beq.n	8002d68 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d54:	f383 8811 	msr	BASEPRI, r3
 8002d58:	f3bf 8f6f 	isb	sy
 8002d5c:	f3bf 8f4f 	dsb	sy
 8002d60:	61bb      	str	r3, [r7, #24]
}
 8002d62:	bf00      	nop
 8002d64:	bf00      	nop
 8002d66:	e7fd      	b.n	8002d64 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002d68:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00d      	beq.n	8002d90 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d7c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d82:	9300      	str	r3, [sp, #0]
 8002d84:	4613      	mov	r3, r2
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	68b9      	ldr	r1, [r7, #8]
 8002d8a:	68f8      	ldr	r0, [r7, #12]
 8002d8c:	f000 f840 	bl	8002e10 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3730      	adds	r7, #48	@ 0x30
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b08a      	sub	sp, #40	@ 0x28
 8002d9e:	af02      	add	r7, sp, #8
 8002da0:	60f8      	str	r0, [r7, #12]
 8002da2:	60b9      	str	r1, [r7, #8]
 8002da4:	4613      	mov	r3, r2
 8002da6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10b      	bne.n	8002dc6 <xQueueGenericCreate+0x2c>
	__asm volatile
 8002dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002db2:	f383 8811 	msr	BASEPRI, r3
 8002db6:	f3bf 8f6f 	isb	sy
 8002dba:	f3bf 8f4f 	dsb	sy
 8002dbe:	613b      	str	r3, [r7, #16]
}
 8002dc0:	bf00      	nop
 8002dc2:	bf00      	nop
 8002dc4:	e7fd      	b.n	8002dc2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	68ba      	ldr	r2, [r7, #8]
 8002dca:	fb02 f303 	mul.w	r3, r2, r3
 8002dce:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	3350      	adds	r3, #80	@ 0x50
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f002 fe29 	bl	8005a2c <pvPortMalloc>
 8002dda:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d011      	beq.n	8002e06 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	3350      	adds	r3, #80	@ 0x50
 8002dea:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002df4:	79fa      	ldrb	r2, [r7, #7]
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	697a      	ldr	r2, [r7, #20]
 8002dfe:	68b9      	ldr	r1, [r7, #8]
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f000 f805 	bl	8002e10 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002e06:	69bb      	ldr	r3, [r7, #24]
	}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3720      	adds	r7, #32
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
 8002e1c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d103      	bne.n	8002e2c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	601a      	str	r2, [r3, #0]
 8002e2a:	e002      	b.n	8002e32 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	68ba      	ldr	r2, [r7, #8]
 8002e3c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002e3e:	2101      	movs	r1, #1
 8002e40:	69b8      	ldr	r0, [r7, #24]
 8002e42:	f7ff fec3 	bl	8002bcc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	78fa      	ldrb	r2, [r7, #3]
 8002e4a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002e4e:	bf00      	nop
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b08a      	sub	sp, #40	@ 0x28
 8002e5a:	af02      	add	r7, sp, #8
 8002e5c:	60f8      	str	r0, [r7, #12]
 8002e5e:	60b9      	str	r1, [r7, #8]
 8002e60:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d10b      	bne.n	8002e80 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8002e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e6c:	f383 8811 	msr	BASEPRI, r3
 8002e70:	f3bf 8f6f 	isb	sy
 8002e74:	f3bf 8f4f 	dsb	sy
 8002e78:	61bb      	str	r3, [r7, #24]
}
 8002e7a:	bf00      	nop
 8002e7c:	bf00      	nop
 8002e7e:	e7fd      	b.n	8002e7c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002e80:	68ba      	ldr	r2, [r7, #8]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d90b      	bls.n	8002ea0 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8002e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e8c:	f383 8811 	msr	BASEPRI, r3
 8002e90:	f3bf 8f6f 	isb	sy
 8002e94:	f3bf 8f4f 	dsb	sy
 8002e98:	617b      	str	r3, [r7, #20]
}
 8002e9a:	bf00      	nop
 8002e9c:	bf00      	nop
 8002e9e:	e7fd      	b.n	8002e9c <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	9300      	str	r3, [sp, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	2100      	movs	r1, #0
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f7ff fef8 	bl	8002ca0 <xQueueGenericCreateStatic>
 8002eb0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d002      	beq.n	8002ebe <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	68ba      	ldr	r2, [r7, #8]
 8002ebc:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002ebe:	69fb      	ldr	r3, [r7, #28]
	}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3720      	adds	r7, #32
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b086      	sub	sp, #24
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d10b      	bne.n	8002ef0 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8002ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002edc:	f383 8811 	msr	BASEPRI, r3
 8002ee0:	f3bf 8f6f 	isb	sy
 8002ee4:	f3bf 8f4f 	dsb	sy
 8002ee8:	613b      	str	r3, [r7, #16]
}
 8002eea:	bf00      	nop
 8002eec:	bf00      	nop
 8002eee:	e7fd      	b.n	8002eec <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002ef0:	683a      	ldr	r2, [r7, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d90b      	bls.n	8002f10 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8002ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002efc:	f383 8811 	msr	BASEPRI, r3
 8002f00:	f3bf 8f6f 	isb	sy
 8002f04:	f3bf 8f4f 	dsb	sy
 8002f08:	60fb      	str	r3, [r7, #12]
}
 8002f0a:	bf00      	nop
 8002f0c:	bf00      	nop
 8002f0e:	e7fd      	b.n	8002f0c <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002f10:	2202      	movs	r2, #2
 8002f12:	2100      	movs	r1, #0
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f7ff ff40 	bl	8002d9a <xQueueGenericCreate>
 8002f1a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d002      	beq.n	8002f28 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002f28:	697b      	ldr	r3, [r7, #20]
	}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3718      	adds	r7, #24
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
	...

08002f34 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b08e      	sub	sp, #56	@ 0x38
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
 8002f40:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002f42:	2300      	movs	r3, #0
 8002f44:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d10b      	bne.n	8002f68 <xQueueGenericSend+0x34>
	__asm volatile
 8002f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f54:	f383 8811 	msr	BASEPRI, r3
 8002f58:	f3bf 8f6f 	isb	sy
 8002f5c:	f3bf 8f4f 	dsb	sy
 8002f60:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002f62:	bf00      	nop
 8002f64:	bf00      	nop
 8002f66:	e7fd      	b.n	8002f64 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d103      	bne.n	8002f76 <xQueueGenericSend+0x42>
 8002f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <xQueueGenericSend+0x46>
 8002f76:	2301      	movs	r3, #1
 8002f78:	e000      	b.n	8002f7c <xQueueGenericSend+0x48>
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d10b      	bne.n	8002f98 <xQueueGenericSend+0x64>
	__asm volatile
 8002f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f84:	f383 8811 	msr	BASEPRI, r3
 8002f88:	f3bf 8f6f 	isb	sy
 8002f8c:	f3bf 8f4f 	dsb	sy
 8002f90:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002f92:	bf00      	nop
 8002f94:	bf00      	nop
 8002f96:	e7fd      	b.n	8002f94 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d103      	bne.n	8002fa6 <xQueueGenericSend+0x72>
 8002f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d101      	bne.n	8002faa <xQueueGenericSend+0x76>
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e000      	b.n	8002fac <xQueueGenericSend+0x78>
 8002faa:	2300      	movs	r3, #0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10b      	bne.n	8002fc8 <xQueueGenericSend+0x94>
	__asm volatile
 8002fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fb4:	f383 8811 	msr	BASEPRI, r3
 8002fb8:	f3bf 8f6f 	isb	sy
 8002fbc:	f3bf 8f4f 	dsb	sy
 8002fc0:	623b      	str	r3, [r7, #32]
}
 8002fc2:	bf00      	nop
 8002fc4:	bf00      	nop
 8002fc6:	e7fd      	b.n	8002fc4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002fc8:	f001 fd9e 	bl	8004b08 <xTaskGetSchedulerState>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d102      	bne.n	8002fd8 <xQueueGenericSend+0xa4>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <xQueueGenericSend+0xa8>
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e000      	b.n	8002fde <xQueueGenericSend+0xaa>
 8002fdc:	2300      	movs	r3, #0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10b      	bne.n	8002ffa <xQueueGenericSend+0xc6>
	__asm volatile
 8002fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fe6:	f383 8811 	msr	BASEPRI, r3
 8002fea:	f3bf 8f6f 	isb	sy
 8002fee:	f3bf 8f4f 	dsb	sy
 8002ff2:	61fb      	str	r3, [r7, #28]
}
 8002ff4:	bf00      	nop
 8002ff6:	bf00      	nop
 8002ff8:	e7fd      	b.n	8002ff6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ffa:	f002 fbf5 	bl	80057e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003000:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003004:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003006:	429a      	cmp	r2, r3
 8003008:	d302      	bcc.n	8003010 <xQueueGenericSend+0xdc>
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	2b02      	cmp	r3, #2
 800300e:	d129      	bne.n	8003064 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003010:	683a      	ldr	r2, [r7, #0]
 8003012:	68b9      	ldr	r1, [r7, #8]
 8003014:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003016:	f000 fc6d 	bl	80038f4 <prvCopyDataToQueue>
 800301a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800301c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800301e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003020:	2b00      	cmp	r3, #0
 8003022:	d010      	beq.n	8003046 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003026:	3324      	adds	r3, #36	@ 0x24
 8003028:	4618      	mov	r0, r3
 800302a:	f001 fba7 	bl	800477c <xTaskRemoveFromEventList>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d013      	beq.n	800305c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003034:	4b3f      	ldr	r3, [pc, #252]	@ (8003134 <xQueueGenericSend+0x200>)
 8003036:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800303a:	601a      	str	r2, [r3, #0]
 800303c:	f3bf 8f4f 	dsb	sy
 8003040:	f3bf 8f6f 	isb	sy
 8003044:	e00a      	b.n	800305c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003048:	2b00      	cmp	r3, #0
 800304a:	d007      	beq.n	800305c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800304c:	4b39      	ldr	r3, [pc, #228]	@ (8003134 <xQueueGenericSend+0x200>)
 800304e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	f3bf 8f4f 	dsb	sy
 8003058:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800305c:	f002 fbf6 	bl	800584c <vPortExitCritical>
				return pdPASS;
 8003060:	2301      	movs	r3, #1
 8003062:	e063      	b.n	800312c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d103      	bne.n	8003072 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800306a:	f002 fbef 	bl	800584c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800306e:	2300      	movs	r3, #0
 8003070:	e05c      	b.n	800312c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003074:	2b00      	cmp	r3, #0
 8003076:	d106      	bne.n	8003086 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003078:	f107 0314 	add.w	r3, r7, #20
 800307c:	4618      	mov	r0, r3
 800307e:	f001 fbe1 	bl	8004844 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003082:	2301      	movs	r3, #1
 8003084:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003086:	f002 fbe1 	bl	800584c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800308a:	f001 f937 	bl	80042fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800308e:	f002 fbab 	bl	80057e8 <vPortEnterCritical>
 8003092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003094:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003098:	b25b      	sxtb	r3, r3
 800309a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800309e:	d103      	bne.n	80030a8 <xQueueGenericSend+0x174>
 80030a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80030ae:	b25b      	sxtb	r3, r3
 80030b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b4:	d103      	bne.n	80030be <xQueueGenericSend+0x18a>
 80030b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80030be:	f002 fbc5 	bl	800584c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030c2:	1d3a      	adds	r2, r7, #4
 80030c4:	f107 0314 	add.w	r3, r7, #20
 80030c8:	4611      	mov	r1, r2
 80030ca:	4618      	mov	r0, r3
 80030cc:	f001 fbd0 	bl	8004870 <xTaskCheckForTimeOut>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d124      	bne.n	8003120 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80030d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80030d8:	f000 fd04 	bl	8003ae4 <prvIsQueueFull>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d018      	beq.n	8003114 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80030e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030e4:	3310      	adds	r3, #16
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	4611      	mov	r1, r2
 80030ea:	4618      	mov	r0, r3
 80030ec:	f001 faf4 	bl	80046d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80030f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80030f2:	f000 fc8f 	bl	8003a14 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80030f6:	f001 f90f 	bl	8004318 <xTaskResumeAll>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f47f af7c 	bne.w	8002ffa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003102:	4b0c      	ldr	r3, [pc, #48]	@ (8003134 <xQueueGenericSend+0x200>)
 8003104:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003108:	601a      	str	r2, [r3, #0]
 800310a:	f3bf 8f4f 	dsb	sy
 800310e:	f3bf 8f6f 	isb	sy
 8003112:	e772      	b.n	8002ffa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003114:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003116:	f000 fc7d 	bl	8003a14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800311a:	f001 f8fd 	bl	8004318 <xTaskResumeAll>
 800311e:	e76c      	b.n	8002ffa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003120:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003122:	f000 fc77 	bl	8003a14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003126:	f001 f8f7 	bl	8004318 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800312a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800312c:	4618      	mov	r0, r3
 800312e:	3738      	adds	r7, #56	@ 0x38
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	e000ed04 	.word	0xe000ed04

08003138 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b090      	sub	sp, #64	@ 0x40
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
 8003144:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800314a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800314c:	2b00      	cmp	r3, #0
 800314e:	d10b      	bne.n	8003168 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003154:	f383 8811 	msr	BASEPRI, r3
 8003158:	f3bf 8f6f 	isb	sy
 800315c:	f3bf 8f4f 	dsb	sy
 8003160:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003162:	bf00      	nop
 8003164:	bf00      	nop
 8003166:	e7fd      	b.n	8003164 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d103      	bne.n	8003176 <xQueueGenericSendFromISR+0x3e>
 800316e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <xQueueGenericSendFromISR+0x42>
 8003176:	2301      	movs	r3, #1
 8003178:	e000      	b.n	800317c <xQueueGenericSendFromISR+0x44>
 800317a:	2300      	movs	r3, #0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d10b      	bne.n	8003198 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003184:	f383 8811 	msr	BASEPRI, r3
 8003188:	f3bf 8f6f 	isb	sy
 800318c:	f3bf 8f4f 	dsb	sy
 8003190:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003192:	bf00      	nop
 8003194:	bf00      	nop
 8003196:	e7fd      	b.n	8003194 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	2b02      	cmp	r3, #2
 800319c:	d103      	bne.n	80031a6 <xQueueGenericSendFromISR+0x6e>
 800319e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d101      	bne.n	80031aa <xQueueGenericSendFromISR+0x72>
 80031a6:	2301      	movs	r3, #1
 80031a8:	e000      	b.n	80031ac <xQueueGenericSendFromISR+0x74>
 80031aa:	2300      	movs	r3, #0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d10b      	bne.n	80031c8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80031b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031b4:	f383 8811 	msr	BASEPRI, r3
 80031b8:	f3bf 8f6f 	isb	sy
 80031bc:	f3bf 8f4f 	dsb	sy
 80031c0:	623b      	str	r3, [r7, #32]
}
 80031c2:	bf00      	nop
 80031c4:	bf00      	nop
 80031c6:	e7fd      	b.n	80031c4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80031c8:	f002 fbee 	bl	80059a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80031cc:	f3ef 8211 	mrs	r2, BASEPRI
 80031d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031d4:	f383 8811 	msr	BASEPRI, r3
 80031d8:	f3bf 8f6f 	isb	sy
 80031dc:	f3bf 8f4f 	dsb	sy
 80031e0:	61fa      	str	r2, [r7, #28]
 80031e2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80031e4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80031e6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80031e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d302      	bcc.n	80031fa <xQueueGenericSendFromISR+0xc2>
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d12f      	bne.n	800325a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80031fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003200:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003208:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800320a:	683a      	ldr	r2, [r7, #0]
 800320c:	68b9      	ldr	r1, [r7, #8]
 800320e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003210:	f000 fb70 	bl	80038f4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003214:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800321c:	d112      	bne.n	8003244 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800321e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003222:	2b00      	cmp	r3, #0
 8003224:	d016      	beq.n	8003254 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003228:	3324      	adds	r3, #36	@ 0x24
 800322a:	4618      	mov	r0, r3
 800322c:	f001 faa6 	bl	800477c <xTaskRemoveFromEventList>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00e      	beq.n	8003254 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00b      	beq.n	8003254 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	601a      	str	r2, [r3, #0]
 8003242:	e007      	b.n	8003254 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003244:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003248:	3301      	adds	r3, #1
 800324a:	b2db      	uxtb	r3, r3
 800324c:	b25a      	sxtb	r2, r3
 800324e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003250:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003254:	2301      	movs	r3, #1
 8003256:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003258:	e001      	b.n	800325e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800325a:	2300      	movs	r3, #0
 800325c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800325e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003260:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003268:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800326a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800326c:	4618      	mov	r0, r3
 800326e:	3740      	adds	r7, #64	@ 0x40
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b08e      	sub	sp, #56	@ 0x38
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003284:	2b00      	cmp	r3, #0
 8003286:	d10b      	bne.n	80032a0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8003288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800328c:	f383 8811 	msr	BASEPRI, r3
 8003290:	f3bf 8f6f 	isb	sy
 8003294:	f3bf 8f4f 	dsb	sy
 8003298:	623b      	str	r3, [r7, #32]
}
 800329a:	bf00      	nop
 800329c:	bf00      	nop
 800329e:	e7fd      	b.n	800329c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80032a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00b      	beq.n	80032c0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80032a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032ac:	f383 8811 	msr	BASEPRI, r3
 80032b0:	f3bf 8f6f 	isb	sy
 80032b4:	f3bf 8f4f 	dsb	sy
 80032b8:	61fb      	str	r3, [r7, #28]
}
 80032ba:	bf00      	nop
 80032bc:	bf00      	nop
 80032be:	e7fd      	b.n	80032bc <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80032c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d103      	bne.n	80032d0 <xQueueGiveFromISR+0x5c>
 80032c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d101      	bne.n	80032d4 <xQueueGiveFromISR+0x60>
 80032d0:	2301      	movs	r3, #1
 80032d2:	e000      	b.n	80032d6 <xQueueGiveFromISR+0x62>
 80032d4:	2300      	movs	r3, #0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10b      	bne.n	80032f2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 80032da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032de:	f383 8811 	msr	BASEPRI, r3
 80032e2:	f3bf 8f6f 	isb	sy
 80032e6:	f3bf 8f4f 	dsb	sy
 80032ea:	61bb      	str	r3, [r7, #24]
}
 80032ec:	bf00      	nop
 80032ee:	bf00      	nop
 80032f0:	e7fd      	b.n	80032ee <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80032f2:	f002 fb59 	bl	80059a8 <vPortValidateInterruptPriority>
	__asm volatile
 80032f6:	f3ef 8211 	mrs	r2, BASEPRI
 80032fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032fe:	f383 8811 	msr	BASEPRI, r3
 8003302:	f3bf 8f6f 	isb	sy
 8003306:	f3bf 8f4f 	dsb	sy
 800330a:	617a      	str	r2, [r7, #20]
 800330c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800330e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003310:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003316:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800331a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800331c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800331e:	429a      	cmp	r2, r3
 8003320:	d22b      	bcs.n	800337a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003324:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003328:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800332c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800332e:	1c5a      	adds	r2, r3, #1
 8003330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003332:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003334:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800333c:	d112      	bne.n	8003364 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800333e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003342:	2b00      	cmp	r3, #0
 8003344:	d016      	beq.n	8003374 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003348:	3324      	adds	r3, #36	@ 0x24
 800334a:	4618      	mov	r0, r3
 800334c:	f001 fa16 	bl	800477c <xTaskRemoveFromEventList>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00e      	beq.n	8003374 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00b      	beq.n	8003374 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	2201      	movs	r2, #1
 8003360:	601a      	str	r2, [r3, #0]
 8003362:	e007      	b.n	8003374 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003364:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003368:	3301      	adds	r3, #1
 800336a:	b2db      	uxtb	r3, r3
 800336c:	b25a      	sxtb	r2, r3
 800336e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003370:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003374:	2301      	movs	r3, #1
 8003376:	637b      	str	r3, [r7, #52]	@ 0x34
 8003378:	e001      	b.n	800337e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800337a:	2300      	movs	r3, #0
 800337c:	637b      	str	r3, [r7, #52]	@ 0x34
 800337e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003380:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f383 8811 	msr	BASEPRI, r3
}
 8003388:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800338a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800338c:	4618      	mov	r0, r3
 800338e:	3738      	adds	r7, #56	@ 0x38
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b08c      	sub	sp, #48	@ 0x30
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80033a0:	2300      	movs	r3, #0
 80033a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80033a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10b      	bne.n	80033c6 <xQueueReceive+0x32>
	__asm volatile
 80033ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033b2:	f383 8811 	msr	BASEPRI, r3
 80033b6:	f3bf 8f6f 	isb	sy
 80033ba:	f3bf 8f4f 	dsb	sy
 80033be:	623b      	str	r3, [r7, #32]
}
 80033c0:	bf00      	nop
 80033c2:	bf00      	nop
 80033c4:	e7fd      	b.n	80033c2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d103      	bne.n	80033d4 <xQueueReceive+0x40>
 80033cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d101      	bne.n	80033d8 <xQueueReceive+0x44>
 80033d4:	2301      	movs	r3, #1
 80033d6:	e000      	b.n	80033da <xQueueReceive+0x46>
 80033d8:	2300      	movs	r3, #0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10b      	bne.n	80033f6 <xQueueReceive+0x62>
	__asm volatile
 80033de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033e2:	f383 8811 	msr	BASEPRI, r3
 80033e6:	f3bf 8f6f 	isb	sy
 80033ea:	f3bf 8f4f 	dsb	sy
 80033ee:	61fb      	str	r3, [r7, #28]
}
 80033f0:	bf00      	nop
 80033f2:	bf00      	nop
 80033f4:	e7fd      	b.n	80033f2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033f6:	f001 fb87 	bl	8004b08 <xTaskGetSchedulerState>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d102      	bne.n	8003406 <xQueueReceive+0x72>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <xQueueReceive+0x76>
 8003406:	2301      	movs	r3, #1
 8003408:	e000      	b.n	800340c <xQueueReceive+0x78>
 800340a:	2300      	movs	r3, #0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d10b      	bne.n	8003428 <xQueueReceive+0x94>
	__asm volatile
 8003410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003414:	f383 8811 	msr	BASEPRI, r3
 8003418:	f3bf 8f6f 	isb	sy
 800341c:	f3bf 8f4f 	dsb	sy
 8003420:	61bb      	str	r3, [r7, #24]
}
 8003422:	bf00      	nop
 8003424:	bf00      	nop
 8003426:	e7fd      	b.n	8003424 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003428:	f002 f9de 	bl	80057e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800342c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800342e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003430:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003434:	2b00      	cmp	r3, #0
 8003436:	d01f      	beq.n	8003478 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003438:	68b9      	ldr	r1, [r7, #8]
 800343a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800343c:	f000 fac4 	bl	80039c8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003442:	1e5a      	subs	r2, r3, #1
 8003444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003446:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00f      	beq.n	8003470 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003452:	3310      	adds	r3, #16
 8003454:	4618      	mov	r0, r3
 8003456:	f001 f991 	bl	800477c <xTaskRemoveFromEventList>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d007      	beq.n	8003470 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003460:	4b3c      	ldr	r3, [pc, #240]	@ (8003554 <xQueueReceive+0x1c0>)
 8003462:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	f3bf 8f4f 	dsb	sy
 800346c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003470:	f002 f9ec 	bl	800584c <vPortExitCritical>
				return pdPASS;
 8003474:	2301      	movs	r3, #1
 8003476:	e069      	b.n	800354c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d103      	bne.n	8003486 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800347e:	f002 f9e5 	bl	800584c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003482:	2300      	movs	r3, #0
 8003484:	e062      	b.n	800354c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003488:	2b00      	cmp	r3, #0
 800348a:	d106      	bne.n	800349a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800348c:	f107 0310 	add.w	r3, r7, #16
 8003490:	4618      	mov	r0, r3
 8003492:	f001 f9d7 	bl	8004844 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003496:	2301      	movs	r3, #1
 8003498:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800349a:	f002 f9d7 	bl	800584c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800349e:	f000 ff2d 	bl	80042fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80034a2:	f002 f9a1 	bl	80057e8 <vPortEnterCritical>
 80034a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80034ac:	b25b      	sxtb	r3, r3
 80034ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b2:	d103      	bne.n	80034bc <xQueueReceive+0x128>
 80034b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80034c2:	b25b      	sxtb	r3, r3
 80034c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c8:	d103      	bne.n	80034d2 <xQueueReceive+0x13e>
 80034ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80034d2:	f002 f9bb 	bl	800584c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034d6:	1d3a      	adds	r2, r7, #4
 80034d8:	f107 0310 	add.w	r3, r7, #16
 80034dc:	4611      	mov	r1, r2
 80034de:	4618      	mov	r0, r3
 80034e0:	f001 f9c6 	bl	8004870 <xTaskCheckForTimeOut>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d123      	bne.n	8003532 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80034ec:	f000 fae4 	bl	8003ab8 <prvIsQueueEmpty>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d017      	beq.n	8003526 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80034f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034f8:	3324      	adds	r3, #36	@ 0x24
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	4611      	mov	r1, r2
 80034fe:	4618      	mov	r0, r3
 8003500:	f001 f8ea 	bl	80046d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003504:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003506:	f000 fa85 	bl	8003a14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800350a:	f000 ff05 	bl	8004318 <xTaskResumeAll>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d189      	bne.n	8003428 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003514:	4b0f      	ldr	r3, [pc, #60]	@ (8003554 <xQueueReceive+0x1c0>)
 8003516:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	f3bf 8f4f 	dsb	sy
 8003520:	f3bf 8f6f 	isb	sy
 8003524:	e780      	b.n	8003428 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003526:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003528:	f000 fa74 	bl	8003a14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800352c:	f000 fef4 	bl	8004318 <xTaskResumeAll>
 8003530:	e77a      	b.n	8003428 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003532:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003534:	f000 fa6e 	bl	8003a14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003538:	f000 feee 	bl	8004318 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800353c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800353e:	f000 fabb 	bl	8003ab8 <prvIsQueueEmpty>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	f43f af6f 	beq.w	8003428 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800354a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800354c:	4618      	mov	r0, r3
 800354e:	3730      	adds	r7, #48	@ 0x30
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	e000ed04 	.word	0xe000ed04

08003558 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b08e      	sub	sp, #56	@ 0x38
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003562:	2300      	movs	r3, #0
 8003564:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800356a:	2300      	movs	r3, #0
 800356c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800356e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10b      	bne.n	800358c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8003574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003578:	f383 8811 	msr	BASEPRI, r3
 800357c:	f3bf 8f6f 	isb	sy
 8003580:	f3bf 8f4f 	dsb	sy
 8003584:	623b      	str	r3, [r7, #32]
}
 8003586:	bf00      	nop
 8003588:	bf00      	nop
 800358a:	e7fd      	b.n	8003588 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800358c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800358e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00b      	beq.n	80035ac <xQueueSemaphoreTake+0x54>
	__asm volatile
 8003594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003598:	f383 8811 	msr	BASEPRI, r3
 800359c:	f3bf 8f6f 	isb	sy
 80035a0:	f3bf 8f4f 	dsb	sy
 80035a4:	61fb      	str	r3, [r7, #28]
}
 80035a6:	bf00      	nop
 80035a8:	bf00      	nop
 80035aa:	e7fd      	b.n	80035a8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80035ac:	f001 faac 	bl	8004b08 <xTaskGetSchedulerState>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d102      	bne.n	80035bc <xQueueSemaphoreTake+0x64>
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d101      	bne.n	80035c0 <xQueueSemaphoreTake+0x68>
 80035bc:	2301      	movs	r3, #1
 80035be:	e000      	b.n	80035c2 <xQueueSemaphoreTake+0x6a>
 80035c0:	2300      	movs	r3, #0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10b      	bne.n	80035de <xQueueSemaphoreTake+0x86>
	__asm volatile
 80035c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ca:	f383 8811 	msr	BASEPRI, r3
 80035ce:	f3bf 8f6f 	isb	sy
 80035d2:	f3bf 8f4f 	dsb	sy
 80035d6:	61bb      	str	r3, [r7, #24]
}
 80035d8:	bf00      	nop
 80035da:	bf00      	nop
 80035dc:	e7fd      	b.n	80035da <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80035de:	f002 f903 	bl	80057e8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80035e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035e6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80035e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d024      	beq.n	8003638 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80035ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035f0:	1e5a      	subs	r2, r3, #1
 80035f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035f4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80035f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d104      	bne.n	8003608 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80035fe:	f001 fbfd 	bl	8004dfc <pvTaskIncrementMutexHeldCount>
 8003602:	4602      	mov	r2, r0
 8003604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003606:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00f      	beq.n	8003630 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003612:	3310      	adds	r3, #16
 8003614:	4618      	mov	r0, r3
 8003616:	f001 f8b1 	bl	800477c <xTaskRemoveFromEventList>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d007      	beq.n	8003630 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003620:	4b54      	ldr	r3, [pc, #336]	@ (8003774 <xQueueSemaphoreTake+0x21c>)
 8003622:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	f3bf 8f4f 	dsb	sy
 800362c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003630:	f002 f90c 	bl	800584c <vPortExitCritical>
				return pdPASS;
 8003634:	2301      	movs	r3, #1
 8003636:	e098      	b.n	800376a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d112      	bne.n	8003664 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800363e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00b      	beq.n	800365c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8003644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003648:	f383 8811 	msr	BASEPRI, r3
 800364c:	f3bf 8f6f 	isb	sy
 8003650:	f3bf 8f4f 	dsb	sy
 8003654:	617b      	str	r3, [r7, #20]
}
 8003656:	bf00      	nop
 8003658:	bf00      	nop
 800365a:	e7fd      	b.n	8003658 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800365c:	f002 f8f6 	bl	800584c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003660:	2300      	movs	r3, #0
 8003662:	e082      	b.n	800376a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003666:	2b00      	cmp	r3, #0
 8003668:	d106      	bne.n	8003678 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800366a:	f107 030c 	add.w	r3, r7, #12
 800366e:	4618      	mov	r0, r3
 8003670:	f001 f8e8 	bl	8004844 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003674:	2301      	movs	r3, #1
 8003676:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003678:	f002 f8e8 	bl	800584c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800367c:	f000 fe3e 	bl	80042fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003680:	f002 f8b2 	bl	80057e8 <vPortEnterCritical>
 8003684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003686:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800368a:	b25b      	sxtb	r3, r3
 800368c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003690:	d103      	bne.n	800369a <xQueueSemaphoreTake+0x142>
 8003692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003694:	2200      	movs	r2, #0
 8003696:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800369a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800369c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80036a0:	b25b      	sxtb	r3, r3
 80036a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a6:	d103      	bne.n	80036b0 <xQueueSemaphoreTake+0x158>
 80036a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80036b0:	f002 f8cc 	bl	800584c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80036b4:	463a      	mov	r2, r7
 80036b6:	f107 030c 	add.w	r3, r7, #12
 80036ba:	4611      	mov	r1, r2
 80036bc:	4618      	mov	r0, r3
 80036be:	f001 f8d7 	bl	8004870 <xTaskCheckForTimeOut>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d132      	bne.n	800372e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80036c8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80036ca:	f000 f9f5 	bl	8003ab8 <prvIsQueueEmpty>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d026      	beq.n	8003722 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80036d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d109      	bne.n	80036f0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80036dc:	f002 f884 	bl	80057e8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80036e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f001 fa2d 	bl	8004b44 <xTaskPriorityInherit>
 80036ea:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80036ec:	f002 f8ae 	bl	800584c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80036f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036f2:	3324      	adds	r3, #36	@ 0x24
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	4611      	mov	r1, r2
 80036f8:	4618      	mov	r0, r3
 80036fa:	f000 ffed 	bl	80046d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80036fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003700:	f000 f988 	bl	8003a14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003704:	f000 fe08 	bl	8004318 <xTaskResumeAll>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	f47f af67 	bne.w	80035de <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003710:	4b18      	ldr	r3, [pc, #96]	@ (8003774 <xQueueSemaphoreTake+0x21c>)
 8003712:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	f3bf 8f4f 	dsb	sy
 800371c:	f3bf 8f6f 	isb	sy
 8003720:	e75d      	b.n	80035de <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003722:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003724:	f000 f976 	bl	8003a14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003728:	f000 fdf6 	bl	8004318 <xTaskResumeAll>
 800372c:	e757      	b.n	80035de <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800372e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003730:	f000 f970 	bl	8003a14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003734:	f000 fdf0 	bl	8004318 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003738:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800373a:	f000 f9bd 	bl	8003ab8 <prvIsQueueEmpty>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	f43f af4c 	beq.w	80035de <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00d      	beq.n	8003768 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800374c:	f002 f84c 	bl	80057e8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003750:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003752:	f000 f8b7 	bl	80038c4 <prvGetDisinheritPriorityAfterTimeout>
 8003756:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800375e:	4618      	mov	r0, r3
 8003760:	f001 fac8 	bl	8004cf4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003764:	f002 f872 	bl	800584c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003768:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800376a:	4618      	mov	r0, r3
 800376c:	3738      	adds	r7, #56	@ 0x38
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	e000ed04 	.word	0xe000ed04

08003778 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b08e      	sub	sp, #56	@ 0x38
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10b      	bne.n	80037a6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800378e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003792:	f383 8811 	msr	BASEPRI, r3
 8003796:	f3bf 8f6f 	isb	sy
 800379a:	f3bf 8f4f 	dsb	sy
 800379e:	623b      	str	r3, [r7, #32]
}
 80037a0:	bf00      	nop
 80037a2:	bf00      	nop
 80037a4:	e7fd      	b.n	80037a2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d103      	bne.n	80037b4 <xQueueReceiveFromISR+0x3c>
 80037ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <xQueueReceiveFromISR+0x40>
 80037b4:	2301      	movs	r3, #1
 80037b6:	e000      	b.n	80037ba <xQueueReceiveFromISR+0x42>
 80037b8:	2300      	movs	r3, #0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10b      	bne.n	80037d6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80037be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037c2:	f383 8811 	msr	BASEPRI, r3
 80037c6:	f3bf 8f6f 	isb	sy
 80037ca:	f3bf 8f4f 	dsb	sy
 80037ce:	61fb      	str	r3, [r7, #28]
}
 80037d0:	bf00      	nop
 80037d2:	bf00      	nop
 80037d4:	e7fd      	b.n	80037d2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80037d6:	f002 f8e7 	bl	80059a8 <vPortValidateInterruptPriority>
	__asm volatile
 80037da:	f3ef 8211 	mrs	r2, BASEPRI
 80037de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037e2:	f383 8811 	msr	BASEPRI, r3
 80037e6:	f3bf 8f6f 	isb	sy
 80037ea:	f3bf 8f4f 	dsb	sy
 80037ee:	61ba      	str	r2, [r7, #24]
 80037f0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80037f2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80037f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037fa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d02f      	beq.n	8003862 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003804:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003808:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800380c:	68b9      	ldr	r1, [r7, #8]
 800380e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003810:	f000 f8da 	bl	80039c8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003816:	1e5a      	subs	r2, r3, #1
 8003818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800381a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800381c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003824:	d112      	bne.n	800384c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d016      	beq.n	800385c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800382e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003830:	3310      	adds	r3, #16
 8003832:	4618      	mov	r0, r3
 8003834:	f000 ffa2 	bl	800477c <xTaskRemoveFromEventList>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00e      	beq.n	800385c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00b      	beq.n	800385c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	e007      	b.n	800385c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800384c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003850:	3301      	adds	r3, #1
 8003852:	b2db      	uxtb	r3, r3
 8003854:	b25a      	sxtb	r2, r3
 8003856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003858:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800385c:	2301      	movs	r3, #1
 800385e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003860:	e001      	b.n	8003866 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8003862:	2300      	movs	r3, #0
 8003864:	637b      	str	r3, [r7, #52]	@ 0x34
 8003866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003868:	613b      	str	r3, [r7, #16]
	__asm volatile
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	f383 8811 	msr	BASEPRI, r3
}
 8003870:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003872:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003874:	4618      	mov	r0, r3
 8003876:	3738      	adds	r7, #56	@ 0x38
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10b      	bne.n	80038a6 <vQueueDelete+0x2a>
	__asm volatile
 800388e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003892:	f383 8811 	msr	BASEPRI, r3
 8003896:	f3bf 8f6f 	isb	sy
 800389a:	f3bf 8f4f 	dsb	sy
 800389e:	60bb      	str	r3, [r7, #8]
}
 80038a0:	bf00      	nop
 80038a2:	bf00      	nop
 80038a4:	e7fd      	b.n	80038a2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f000 f95e 	bl	8003b68 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d102      	bne.n	80038bc <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f002 f986 	bl	8005bc8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80038bc:	bf00      	nop
 80038be:	3710      	adds	r7, #16
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80038c4:	b480      	push	{r7}
 80038c6:	b085      	sub	sp, #20
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d006      	beq.n	80038e2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	e001      	b.n	80038e6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80038e2:	2300      	movs	r3, #0
 80038e4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80038e6:	68fb      	ldr	r3, [r7, #12]
	}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3714      	adds	r7, #20
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003900:	2300      	movs	r3, #0
 8003902:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003908:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10d      	bne.n	800392e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d14d      	bne.n	80039b6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	4618      	mov	r0, r3
 8003920:	f001 f978 	bl	8004c14 <xTaskPriorityDisinherit>
 8003924:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	609a      	str	r2, [r3, #8]
 800392c:	e043      	b.n	80039b6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d119      	bne.n	8003968 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6858      	ldr	r0, [r3, #4]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393c:	461a      	mov	r2, r3
 800393e:	68b9      	ldr	r1, [r7, #8]
 8003940:	f002 fd2b 	bl	800639a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	685a      	ldr	r2, [r3, #4]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800394c:	441a      	add	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	685a      	ldr	r2, [r3, #4]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	429a      	cmp	r2, r3
 800395c:	d32b      	bcc.n	80039b6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	605a      	str	r2, [r3, #4]
 8003966:	e026      	b.n	80039b6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	68d8      	ldr	r0, [r3, #12]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003970:	461a      	mov	r2, r3
 8003972:	68b9      	ldr	r1, [r7, #8]
 8003974:	f002 fd11 	bl	800639a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	68da      	ldr	r2, [r3, #12]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003980:	425b      	negs	r3, r3
 8003982:	441a      	add	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	68da      	ldr	r2, [r3, #12]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	429a      	cmp	r2, r3
 8003992:	d207      	bcs.n	80039a4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	689a      	ldr	r2, [r3, #8]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399c:	425b      	negs	r3, r3
 800399e:	441a      	add	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d105      	bne.n	80039b6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d002      	beq.n	80039b6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	3b01      	subs	r3, #1
 80039b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1c5a      	adds	r2, r3, #1
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80039be:	697b      	ldr	r3, [r7, #20]
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3718      	adds	r7, #24
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d018      	beq.n	8003a0c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68da      	ldr	r2, [r3, #12]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e2:	441a      	add	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	68da      	ldr	r2, [r3, #12]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d303      	bcc.n	80039fc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	68d9      	ldr	r1, [r3, #12]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a04:	461a      	mov	r2, r3
 8003a06:	6838      	ldr	r0, [r7, #0]
 8003a08:	f002 fcc7 	bl	800639a <memcpy>
	}
}
 8003a0c:	bf00      	nop
 8003a0e:	3708      	adds	r7, #8
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003a1c:	f001 fee4 	bl	80057e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a26:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a28:	e011      	b.n	8003a4e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d012      	beq.n	8003a58 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	3324      	adds	r3, #36	@ 0x24
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 fea0 	bl	800477c <xTaskRemoveFromEventList>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003a42:	f000 ff79 	bl	8004938 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003a46:	7bfb      	ldrb	r3, [r7, #15]
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	dce9      	bgt.n	8003a2a <prvUnlockQueue+0x16>
 8003a56:	e000      	b.n	8003a5a <prvUnlockQueue+0x46>
					break;
 8003a58:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	22ff      	movs	r2, #255	@ 0xff
 8003a5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003a62:	f001 fef3 	bl	800584c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003a66:	f001 febf 	bl	80057e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a70:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a72:	e011      	b.n	8003a98 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d012      	beq.n	8003aa2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	3310      	adds	r3, #16
 8003a80:	4618      	mov	r0, r3
 8003a82:	f000 fe7b 	bl	800477c <xTaskRemoveFromEventList>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d001      	beq.n	8003a90 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003a8c:	f000 ff54 	bl	8004938 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003a90:	7bbb      	ldrb	r3, [r7, #14]
 8003a92:	3b01      	subs	r3, #1
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	dce9      	bgt.n	8003a74 <prvUnlockQueue+0x60>
 8003aa0:	e000      	b.n	8003aa4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003aa2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	22ff      	movs	r2, #255	@ 0xff
 8003aa8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003aac:	f001 fece 	bl	800584c <vPortExitCritical>
}
 8003ab0:	bf00      	nop
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ac0:	f001 fe92 	bl	80057e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d102      	bne.n	8003ad2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003acc:	2301      	movs	r3, #1
 8003ace:	60fb      	str	r3, [r7, #12]
 8003ad0:	e001      	b.n	8003ad6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ad6:	f001 feb9 	bl	800584c <vPortExitCritical>

	return xReturn;
 8003ada:	68fb      	ldr	r3, [r7, #12]
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003aec:	f001 fe7c 	bl	80057e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d102      	bne.n	8003b02 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003afc:	2301      	movs	r3, #1
 8003afe:	60fb      	str	r3, [r7, #12]
 8003b00:	e001      	b.n	8003b06 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003b02:	2300      	movs	r3, #0
 8003b04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003b06:	f001 fea1 	bl	800584c <vPortExitCritical>

	return xReturn;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b1e:	2300      	movs	r3, #0
 8003b20:	60fb      	str	r3, [r7, #12]
 8003b22:	e014      	b.n	8003b4e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003b24:	4a0f      	ldr	r2, [pc, #60]	@ (8003b64 <vQueueAddToRegistry+0x50>)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10b      	bne.n	8003b48 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003b30:	490c      	ldr	r1, [pc, #48]	@ (8003b64 <vQueueAddToRegistry+0x50>)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003b3a:	4a0a      	ldr	r2, [pc, #40]	@ (8003b64 <vQueueAddToRegistry+0x50>)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	00db      	lsls	r3, r3, #3
 8003b40:	4413      	add	r3, r2
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003b46:	e006      	b.n	8003b56 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	60fb      	str	r3, [r7, #12]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2b07      	cmp	r3, #7
 8003b52:	d9e7      	bls.n	8003b24 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003b54:	bf00      	nop
 8003b56:	bf00      	nop
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	20000848 	.word	0x20000848

08003b68 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b70:	2300      	movs	r3, #0
 8003b72:	60fb      	str	r3, [r7, #12]
 8003b74:	e016      	b.n	8003ba4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8003b76:	4a10      	ldr	r2, [pc, #64]	@ (8003bb8 <vQueueUnregisterQueue+0x50>)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	4413      	add	r3, r2
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d10b      	bne.n	8003b9e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8003b86:	4a0c      	ldr	r2, [pc, #48]	@ (8003bb8 <vQueueUnregisterQueue+0x50>)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8003b90:	4a09      	ldr	r2, [pc, #36]	@ (8003bb8 <vQueueUnregisterQueue+0x50>)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	4413      	add	r3, r2
 8003b98:	2200      	movs	r2, #0
 8003b9a:	605a      	str	r2, [r3, #4]
				break;
 8003b9c:	e006      	b.n	8003bac <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	60fb      	str	r3, [r7, #12]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2b07      	cmp	r3, #7
 8003ba8:	d9e5      	bls.n	8003b76 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8003baa:	bf00      	nop
 8003bac:	bf00      	nop
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr
 8003bb8:	20000848 	.word	0x20000848

08003bbc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b086      	sub	sp, #24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003bcc:	f001 fe0c 	bl	80057e8 <vPortEnterCritical>
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003bd6:	b25b      	sxtb	r3, r3
 8003bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bdc:	d103      	bne.n	8003be6 <vQueueWaitForMessageRestricted+0x2a>
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003bec:	b25b      	sxtb	r3, r3
 8003bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf2:	d103      	bne.n	8003bfc <vQueueWaitForMessageRestricted+0x40>
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003bfc:	f001 fe26 	bl	800584c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d106      	bne.n	8003c16 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	3324      	adds	r3, #36	@ 0x24
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	68b9      	ldr	r1, [r7, #8]
 8003c10:	4618      	mov	r0, r3
 8003c12:	f000 fd87 	bl	8004724 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003c16:	6978      	ldr	r0, [r7, #20]
 8003c18:	f7ff fefc 	bl	8003a14 <prvUnlockQueue>
	}
 8003c1c:	bf00      	nop
 8003c1e:	3718      	adds	r7, #24
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b08e      	sub	sp, #56	@ 0x38
 8003c28:	af04      	add	r7, sp, #16
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	607a      	str	r2, [r7, #4]
 8003c30:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003c32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d10b      	bne.n	8003c50 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c3c:	f383 8811 	msr	BASEPRI, r3
 8003c40:	f3bf 8f6f 	isb	sy
 8003c44:	f3bf 8f4f 	dsb	sy
 8003c48:	623b      	str	r3, [r7, #32]
}
 8003c4a:	bf00      	nop
 8003c4c:	bf00      	nop
 8003c4e:	e7fd      	b.n	8003c4c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10b      	bne.n	8003c6e <xTaskCreateStatic+0x4a>
	__asm volatile
 8003c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c5a:	f383 8811 	msr	BASEPRI, r3
 8003c5e:	f3bf 8f6f 	isb	sy
 8003c62:	f3bf 8f4f 	dsb	sy
 8003c66:	61fb      	str	r3, [r7, #28]
}
 8003c68:	bf00      	nop
 8003c6a:	bf00      	nop
 8003c6c:	e7fd      	b.n	8003c6a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003c6e:	23a8      	movs	r3, #168	@ 0xa8
 8003c70:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	2ba8      	cmp	r3, #168	@ 0xa8
 8003c76:	d00b      	beq.n	8003c90 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003c78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c7c:	f383 8811 	msr	BASEPRI, r3
 8003c80:	f3bf 8f6f 	isb	sy
 8003c84:	f3bf 8f4f 	dsb	sy
 8003c88:	61bb      	str	r3, [r7, #24]
}
 8003c8a:	bf00      	nop
 8003c8c:	bf00      	nop
 8003c8e:	e7fd      	b.n	8003c8c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003c90:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d01e      	beq.n	8003cd6 <xTaskCreateStatic+0xb2>
 8003c98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d01b      	beq.n	8003cd6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ca0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003ca6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003caa:	2202      	movs	r2, #2
 8003cac:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	9303      	str	r3, [sp, #12]
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb6:	9302      	str	r3, [sp, #8]
 8003cb8:	f107 0314 	add.w	r3, r7, #20
 8003cbc:	9301      	str	r3, [sp, #4]
 8003cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	68b9      	ldr	r1, [r7, #8]
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f000 f851 	bl	8003d70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003cce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003cd0:	f000 f8f6 	bl	8003ec0 <prvAddNewTaskToReadyList>
 8003cd4:	e001      	b.n	8003cda <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003cda:	697b      	ldr	r3, [r7, #20]
	}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3728      	adds	r7, #40	@ 0x28
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b08c      	sub	sp, #48	@ 0x30
 8003ce8:	af04      	add	r7, sp, #16
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	603b      	str	r3, [r7, #0]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003cf4:	88fb      	ldrh	r3, [r7, #6]
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f001 fe97 	bl	8005a2c <pvPortMalloc>
 8003cfe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00e      	beq.n	8003d24 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003d06:	20a8      	movs	r0, #168	@ 0xa8
 8003d08:	f001 fe90 	bl	8005a2c <pvPortMalloc>
 8003d0c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d003      	beq.n	8003d1c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	631a      	str	r2, [r3, #48]	@ 0x30
 8003d1a:	e005      	b.n	8003d28 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003d1c:	6978      	ldr	r0, [r7, #20]
 8003d1e:	f001 ff53 	bl	8005bc8 <vPortFree>
 8003d22:	e001      	b.n	8003d28 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003d24:	2300      	movs	r3, #0
 8003d26:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d017      	beq.n	8003d5e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003d36:	88fa      	ldrh	r2, [r7, #6]
 8003d38:	2300      	movs	r3, #0
 8003d3a:	9303      	str	r3, [sp, #12]
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	9302      	str	r3, [sp, #8]
 8003d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d42:	9301      	str	r3, [sp, #4]
 8003d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d46:	9300      	str	r3, [sp, #0]
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	68b9      	ldr	r1, [r7, #8]
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f000 f80f 	bl	8003d70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d52:	69f8      	ldr	r0, [r7, #28]
 8003d54:	f000 f8b4 	bl	8003ec0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	61bb      	str	r3, [r7, #24]
 8003d5c:	e002      	b.n	8003d64 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d62:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003d64:	69bb      	ldr	r3, [r7, #24]
	}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3720      	adds	r7, #32
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
	...

08003d70 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b088      	sub	sp, #32
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
 8003d7c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d80:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	461a      	mov	r2, r3
 8003d88:	21a5      	movs	r1, #165	@ 0xa5
 8003d8a:	f002 fa35 	bl	80061f8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4413      	add	r3, r2
 8003d9e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	f023 0307 	bic.w	r3, r3, #7
 8003da6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	f003 0307 	and.w	r3, r3, #7
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00b      	beq.n	8003dca <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003db6:	f383 8811 	msr	BASEPRI, r3
 8003dba:	f3bf 8f6f 	isb	sy
 8003dbe:	f3bf 8f4f 	dsb	sy
 8003dc2:	617b      	str	r3, [r7, #20]
}
 8003dc4:	bf00      	nop
 8003dc6:	bf00      	nop
 8003dc8:	e7fd      	b.n	8003dc6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d01f      	beq.n	8003e10 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	61fb      	str	r3, [r7, #28]
 8003dd4:	e012      	b.n	8003dfc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	4413      	add	r3, r2
 8003ddc:	7819      	ldrb	r1, [r3, #0]
 8003dde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	4413      	add	r3, r2
 8003de4:	3334      	adds	r3, #52	@ 0x34
 8003de6:	460a      	mov	r2, r1
 8003de8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003dea:	68ba      	ldr	r2, [r7, #8]
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	4413      	add	r3, r2
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d006      	beq.n	8003e04 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	3301      	adds	r3, #1
 8003dfa:	61fb      	str	r3, [r7, #28]
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	2b0f      	cmp	r3, #15
 8003e00:	d9e9      	bls.n	8003dd6 <prvInitialiseNewTask+0x66>
 8003e02:	e000      	b.n	8003e06 <prvInitialiseNewTask+0x96>
			{
				break;
 8003e04:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e0e:	e003      	b.n	8003e18 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e1a:	2b37      	cmp	r3, #55	@ 0x37
 8003e1c:	d901      	bls.n	8003e22 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003e1e:	2337      	movs	r3, #55	@ 0x37
 8003e20:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e26:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e2c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e30:	2200      	movs	r2, #0
 8003e32:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e36:	3304      	adds	r3, #4
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7fe fe33 	bl	8002aa4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e40:	3318      	adds	r3, #24
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7fe fe2e 	bl	8002aa4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e4c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e50:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e56:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e5c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e60:	2200      	movs	r2, #0
 8003e62:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e70:	3354      	adds	r3, #84	@ 0x54
 8003e72:	224c      	movs	r2, #76	@ 0x4c
 8003e74:	2100      	movs	r1, #0
 8003e76:	4618      	mov	r0, r3
 8003e78:	f002 f9be 	bl	80061f8 <memset>
 8003e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e7e:	4a0d      	ldr	r2, [pc, #52]	@ (8003eb4 <prvInitialiseNewTask+0x144>)
 8003e80:	659a      	str	r2, [r3, #88]	@ 0x58
 8003e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e84:	4a0c      	ldr	r2, [pc, #48]	@ (8003eb8 <prvInitialiseNewTask+0x148>)
 8003e86:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e8a:	4a0c      	ldr	r2, [pc, #48]	@ (8003ebc <prvInitialiseNewTask+0x14c>)
 8003e8c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003e8e:	683a      	ldr	r2, [r7, #0]
 8003e90:	68f9      	ldr	r1, [r7, #12]
 8003e92:	69b8      	ldr	r0, [r7, #24]
 8003e94:	f001 fb74 	bl	8005580 <pxPortInitialiseStack>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e9c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d002      	beq.n	8003eaa <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ea6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ea8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003eaa:	bf00      	nop
 8003eac:	3720      	adds	r7, #32
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	20004adc 	.word	0x20004adc
 8003eb8:	20004b44 	.word	0x20004b44
 8003ebc:	20004bac 	.word	0x20004bac

08003ec0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003ec8:	f001 fc8e 	bl	80057e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003ecc:	4b2d      	ldr	r3, [pc, #180]	@ (8003f84 <prvAddNewTaskToReadyList+0xc4>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	4a2c      	ldr	r2, [pc, #176]	@ (8003f84 <prvAddNewTaskToReadyList+0xc4>)
 8003ed4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003ed6:	4b2c      	ldr	r3, [pc, #176]	@ (8003f88 <prvAddNewTaskToReadyList+0xc8>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d109      	bne.n	8003ef2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003ede:	4a2a      	ldr	r2, [pc, #168]	@ (8003f88 <prvAddNewTaskToReadyList+0xc8>)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003ee4:	4b27      	ldr	r3, [pc, #156]	@ (8003f84 <prvAddNewTaskToReadyList+0xc4>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d110      	bne.n	8003f0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003eec:	f000 fd48 	bl	8004980 <prvInitialiseTaskLists>
 8003ef0:	e00d      	b.n	8003f0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003ef2:	4b26      	ldr	r3, [pc, #152]	@ (8003f8c <prvAddNewTaskToReadyList+0xcc>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d109      	bne.n	8003f0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003efa:	4b23      	ldr	r3, [pc, #140]	@ (8003f88 <prvAddNewTaskToReadyList+0xc8>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d802      	bhi.n	8003f0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003f08:	4a1f      	ldr	r2, [pc, #124]	@ (8003f88 <prvAddNewTaskToReadyList+0xc8>)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003f0e:	4b20      	ldr	r3, [pc, #128]	@ (8003f90 <prvAddNewTaskToReadyList+0xd0>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	3301      	adds	r3, #1
 8003f14:	4a1e      	ldr	r2, [pc, #120]	@ (8003f90 <prvAddNewTaskToReadyList+0xd0>)
 8003f16:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003f18:	4b1d      	ldr	r3, [pc, #116]	@ (8003f90 <prvAddNewTaskToReadyList+0xd0>)
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f24:	4b1b      	ldr	r3, [pc, #108]	@ (8003f94 <prvAddNewTaskToReadyList+0xd4>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d903      	bls.n	8003f34 <prvAddNewTaskToReadyList+0x74>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f30:	4a18      	ldr	r2, [pc, #96]	@ (8003f94 <prvAddNewTaskToReadyList+0xd4>)
 8003f32:	6013      	str	r3, [r2, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f38:	4613      	mov	r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	4413      	add	r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	4a15      	ldr	r2, [pc, #84]	@ (8003f98 <prvAddNewTaskToReadyList+0xd8>)
 8003f42:	441a      	add	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	3304      	adds	r3, #4
 8003f48:	4619      	mov	r1, r3
 8003f4a:	4610      	mov	r0, r2
 8003f4c:	f7fe fdb7 	bl	8002abe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003f50:	f001 fc7c 	bl	800584c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003f54:	4b0d      	ldr	r3, [pc, #52]	@ (8003f8c <prvAddNewTaskToReadyList+0xcc>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00e      	beq.n	8003f7a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f88 <prvAddNewTaskToReadyList+0xc8>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d207      	bcs.n	8003f7a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8003f9c <prvAddNewTaskToReadyList+0xdc>)
 8003f6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f70:	601a      	str	r2, [r3, #0]
 8003f72:	f3bf 8f4f 	dsb	sy
 8003f76:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f7a:	bf00      	nop
 8003f7c:	3708      	adds	r7, #8
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	20000d5c 	.word	0x20000d5c
 8003f88:	20000888 	.word	0x20000888
 8003f8c:	20000d68 	.word	0x20000d68
 8003f90:	20000d78 	.word	0x20000d78
 8003f94:	20000d64 	.word	0x20000d64
 8003f98:	2000088c 	.word	0x2000088c
 8003f9c:	e000ed04 	.word	0xe000ed04

08003fa0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d018      	beq.n	8003fe4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003fb2:	4b14      	ldr	r3, [pc, #80]	@ (8004004 <vTaskDelay+0x64>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00b      	beq.n	8003fd2 <vTaskDelay+0x32>
	__asm volatile
 8003fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fbe:	f383 8811 	msr	BASEPRI, r3
 8003fc2:	f3bf 8f6f 	isb	sy
 8003fc6:	f3bf 8f4f 	dsb	sy
 8003fca:	60bb      	str	r3, [r7, #8]
}
 8003fcc:	bf00      	nop
 8003fce:	bf00      	nop
 8003fd0:	e7fd      	b.n	8003fce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003fd2:	f000 f993 	bl	80042fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 ff23 	bl	8004e24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003fde:	f000 f99b 	bl	8004318 <xTaskResumeAll>
 8003fe2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d107      	bne.n	8003ffa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003fea:	4b07      	ldr	r3, [pc, #28]	@ (8004008 <vTaskDelay+0x68>)
 8003fec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	f3bf 8f4f 	dsb	sy
 8003ff6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003ffa:	bf00      	nop
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	20000d84 	.word	0x20000d84
 8004008:	e000ed04 	.word	0xe000ed04

0800400c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8004014:	f001 fbe8 	bl	80057e8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d102      	bne.n	8004024 <vTaskSuspend+0x18>
 800401e:	4b30      	ldr	r3, [pc, #192]	@ (80040e0 <vTaskSuspend+0xd4>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	e000      	b.n	8004026 <vTaskSuspend+0x1a>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	3304      	adds	r3, #4
 800402c:	4618      	mov	r0, r3
 800402e:	f7fe fda3 	bl	8002b78 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004036:	2b00      	cmp	r3, #0
 8004038:	d004      	beq.n	8004044 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	3318      	adds	r3, #24
 800403e:	4618      	mov	r0, r3
 8004040:	f7fe fd9a 	bl	8002b78 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	3304      	adds	r3, #4
 8004048:	4619      	mov	r1, r3
 800404a:	4826      	ldr	r0, [pc, #152]	@ (80040e4 <vTaskSuspend+0xd8>)
 800404c:	f7fe fd37 	bl	8002abe <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8004056:	b2db      	uxtb	r3, r3
 8004058:	2b01      	cmp	r3, #1
 800405a:	d103      	bne.n	8004064 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8004064:	f001 fbf2 	bl	800584c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8004068:	4b1f      	ldr	r3, [pc, #124]	@ (80040e8 <vTaskSuspend+0xdc>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d005      	beq.n	800407c <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8004070:	f001 fbba 	bl	80057e8 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8004074:	f000 fd28 	bl	8004ac8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8004078:	f001 fbe8 	bl	800584c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800407c:	4b18      	ldr	r3, [pc, #96]	@ (80040e0 <vTaskSuspend+0xd4>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	429a      	cmp	r2, r3
 8004084:	d128      	bne.n	80040d8 <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 8004086:	4b18      	ldr	r3, [pc, #96]	@ (80040e8 <vTaskSuspend+0xdc>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d018      	beq.n	80040c0 <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800408e:	4b17      	ldr	r3, [pc, #92]	@ (80040ec <vTaskSuspend+0xe0>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00b      	beq.n	80040ae <vTaskSuspend+0xa2>
	__asm volatile
 8004096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800409a:	f383 8811 	msr	BASEPRI, r3
 800409e:	f3bf 8f6f 	isb	sy
 80040a2:	f3bf 8f4f 	dsb	sy
 80040a6:	60bb      	str	r3, [r7, #8]
}
 80040a8:	bf00      	nop
 80040aa:	bf00      	nop
 80040ac:	e7fd      	b.n	80040aa <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 80040ae:	4b10      	ldr	r3, [pc, #64]	@ (80040f0 <vTaskSuspend+0xe4>)
 80040b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040b4:	601a      	str	r2, [r3, #0]
 80040b6:	f3bf 8f4f 	dsb	sy
 80040ba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80040be:	e00b      	b.n	80040d8 <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80040c0:	4b08      	ldr	r3, [pc, #32]	@ (80040e4 <vTaskSuspend+0xd8>)
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	4b0b      	ldr	r3, [pc, #44]	@ (80040f4 <vTaskSuspend+0xe8>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d103      	bne.n	80040d4 <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 80040cc:	4b04      	ldr	r3, [pc, #16]	@ (80040e0 <vTaskSuspend+0xd4>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	601a      	str	r2, [r3, #0]
	}
 80040d2:	e001      	b.n	80040d8 <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 80040d4:	f000 fa9a 	bl	800460c <vTaskSwitchContext>
	}
 80040d8:	bf00      	nop
 80040da:	3710      	adds	r7, #16
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	20000888 	.word	0x20000888
 80040e4:	20000d48 	.word	0x20000d48
 80040e8:	20000d68 	.word	0x20000d68
 80040ec:	20000d84 	.word	0x20000d84
 80040f0:	e000ed04 	.word	0xe000ed04
 80040f4:	20000d5c 	.word	0x20000d5c

080040f8 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80040f8:	b480      	push	{r7}
 80040fa:	b087      	sub	sp, #28
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8004100:	2300      	movs	r3, #0
 8004102:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d10b      	bne.n	8004126 <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 800410e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004112:	f383 8811 	msr	BASEPRI, r3
 8004116:	f3bf 8f6f 	isb	sy
 800411a:	f3bf 8f4f 	dsb	sy
 800411e:	60fb      	str	r3, [r7, #12]
}
 8004120:	bf00      	nop
 8004122:	bf00      	nop
 8004124:	e7fd      	b.n	8004122 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	4a0a      	ldr	r2, [pc, #40]	@ (8004154 <prvTaskIsTaskSuspended+0x5c>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d10a      	bne.n	8004146 <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004134:	4a08      	ldr	r2, [pc, #32]	@ (8004158 <prvTaskIsTaskSuspended+0x60>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d005      	beq.n	8004146 <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800413e:	2b00      	cmp	r3, #0
 8004140:	d101      	bne.n	8004146 <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 8004142:	2301      	movs	r3, #1
 8004144:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004146:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8004148:	4618      	mov	r0, r3
 800414a:	371c      	adds	r7, #28
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr
 8004154:	20000d48 	.word	0x20000d48
 8004158:	20000d1c 	.word	0x20000d1c

0800415c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d10b      	bne.n	8004186 <vTaskResume+0x2a>
	__asm volatile
 800416e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004172:	f383 8811 	msr	BASEPRI, r3
 8004176:	f3bf 8f6f 	isb	sy
 800417a:	f3bf 8f4f 	dsb	sy
 800417e:	60bb      	str	r3, [r7, #8]
}
 8004180:	bf00      	nop
 8004182:	bf00      	nop
 8004184:	e7fd      	b.n	8004182 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8004186:	4b21      	ldr	r3, [pc, #132]	@ (800420c <vTaskResume+0xb0>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	429a      	cmp	r2, r3
 800418e:	d038      	beq.n	8004202 <vTaskResume+0xa6>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d035      	beq.n	8004202 <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 8004196:	f001 fb27 	bl	80057e8 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f7ff ffac 	bl	80040f8 <prvTaskIsTaskSuspended>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d02b      	beq.n	80041fe <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	3304      	adds	r3, #4
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7fe fce4 	bl	8002b78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041b4:	4b16      	ldr	r3, [pc, #88]	@ (8004210 <vTaskResume+0xb4>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d903      	bls.n	80041c4 <vTaskResume+0x68>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041c0:	4a13      	ldr	r2, [pc, #76]	@ (8004210 <vTaskResume+0xb4>)
 80041c2:	6013      	str	r3, [r2, #0]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041c8:	4613      	mov	r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	4413      	add	r3, r2
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	4a10      	ldr	r2, [pc, #64]	@ (8004214 <vTaskResume+0xb8>)
 80041d2:	441a      	add	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	3304      	adds	r3, #4
 80041d8:	4619      	mov	r1, r3
 80041da:	4610      	mov	r0, r2
 80041dc:	f7fe fc6f 	bl	8002abe <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041e4:	4b09      	ldr	r3, [pc, #36]	@ (800420c <vTaskResume+0xb0>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d307      	bcc.n	80041fe <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80041ee:	4b0a      	ldr	r3, [pc, #40]	@ (8004218 <vTaskResume+0xbc>)
 80041f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041f4:	601a      	str	r2, [r3, #0]
 80041f6:	f3bf 8f4f 	dsb	sy
 80041fa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80041fe:	f001 fb25 	bl	800584c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004202:	bf00      	nop
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	20000888 	.word	0x20000888
 8004210:	20000d64 	.word	0x20000d64
 8004214:	2000088c 	.word	0x2000088c
 8004218:	e000ed04 	.word	0xe000ed04

0800421c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b08a      	sub	sp, #40	@ 0x28
 8004220:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004222:	2300      	movs	r3, #0
 8004224:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004226:	2300      	movs	r3, #0
 8004228:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800422a:	463a      	mov	r2, r7
 800422c:	1d39      	adds	r1, r7, #4
 800422e:	f107 0308 	add.w	r3, r7, #8
 8004232:	4618      	mov	r0, r3
 8004234:	f7fe fbe2 	bl	80029fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004238:	6839      	ldr	r1, [r7, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68ba      	ldr	r2, [r7, #8]
 800423e:	9202      	str	r2, [sp, #8]
 8004240:	9301      	str	r3, [sp, #4]
 8004242:	2300      	movs	r3, #0
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	2300      	movs	r3, #0
 8004248:	460a      	mov	r2, r1
 800424a:	4924      	ldr	r1, [pc, #144]	@ (80042dc <vTaskStartScheduler+0xc0>)
 800424c:	4824      	ldr	r0, [pc, #144]	@ (80042e0 <vTaskStartScheduler+0xc4>)
 800424e:	f7ff fce9 	bl	8003c24 <xTaskCreateStatic>
 8004252:	4603      	mov	r3, r0
 8004254:	4a23      	ldr	r2, [pc, #140]	@ (80042e4 <vTaskStartScheduler+0xc8>)
 8004256:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004258:	4b22      	ldr	r3, [pc, #136]	@ (80042e4 <vTaskStartScheduler+0xc8>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d002      	beq.n	8004266 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004260:	2301      	movs	r3, #1
 8004262:	617b      	str	r3, [r7, #20]
 8004264:	e001      	b.n	800426a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004266:	2300      	movs	r3, #0
 8004268:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d102      	bne.n	8004276 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004270:	f000 fe2c 	bl	8004ecc <xTimerCreateTimerTask>
 8004274:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d11b      	bne.n	80042b4 <vTaskStartScheduler+0x98>
	__asm volatile
 800427c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004280:	f383 8811 	msr	BASEPRI, r3
 8004284:	f3bf 8f6f 	isb	sy
 8004288:	f3bf 8f4f 	dsb	sy
 800428c:	613b      	str	r3, [r7, #16]
}
 800428e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004290:	4b15      	ldr	r3, [pc, #84]	@ (80042e8 <vTaskStartScheduler+0xcc>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	3354      	adds	r3, #84	@ 0x54
 8004296:	4a15      	ldr	r2, [pc, #84]	@ (80042ec <vTaskStartScheduler+0xd0>)
 8004298:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800429a:	4b15      	ldr	r3, [pc, #84]	@ (80042f0 <vTaskStartScheduler+0xd4>)
 800429c:	f04f 32ff 	mov.w	r2, #4294967295
 80042a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80042a2:	4b14      	ldr	r3, [pc, #80]	@ (80042f4 <vTaskStartScheduler+0xd8>)
 80042a4:	2201      	movs	r2, #1
 80042a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80042a8:	4b13      	ldr	r3, [pc, #76]	@ (80042f8 <vTaskStartScheduler+0xdc>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80042ae:	f001 f9f7 	bl	80056a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80042b2:	e00f      	b.n	80042d4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ba:	d10b      	bne.n	80042d4 <vTaskStartScheduler+0xb8>
	__asm volatile
 80042bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042c0:	f383 8811 	msr	BASEPRI, r3
 80042c4:	f3bf 8f6f 	isb	sy
 80042c8:	f3bf 8f4f 	dsb	sy
 80042cc:	60fb      	str	r3, [r7, #12]
}
 80042ce:	bf00      	nop
 80042d0:	bf00      	nop
 80042d2:	e7fd      	b.n	80042d0 <vTaskStartScheduler+0xb4>
}
 80042d4:	bf00      	nop
 80042d6:	3718      	adds	r7, #24
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	080068d8 	.word	0x080068d8
 80042e0:	08004951 	.word	0x08004951
 80042e4:	20000d80 	.word	0x20000d80
 80042e8:	20000888 	.word	0x20000888
 80042ec:	2000001c 	.word	0x2000001c
 80042f0:	20000d7c 	.word	0x20000d7c
 80042f4:	20000d68 	.word	0x20000d68
 80042f8:	20000d60 	.word	0x20000d60

080042fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80042fc:	b480      	push	{r7}
 80042fe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004300:	4b04      	ldr	r3, [pc, #16]	@ (8004314 <vTaskSuspendAll+0x18>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	3301      	adds	r3, #1
 8004306:	4a03      	ldr	r2, [pc, #12]	@ (8004314 <vTaskSuspendAll+0x18>)
 8004308:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800430a:	bf00      	nop
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	20000d84 	.word	0x20000d84

08004318 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800431e:	2300      	movs	r3, #0
 8004320:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004322:	2300      	movs	r3, #0
 8004324:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004326:	4b42      	ldr	r3, [pc, #264]	@ (8004430 <xTaskResumeAll+0x118>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10b      	bne.n	8004346 <xTaskResumeAll+0x2e>
	__asm volatile
 800432e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004332:	f383 8811 	msr	BASEPRI, r3
 8004336:	f3bf 8f6f 	isb	sy
 800433a:	f3bf 8f4f 	dsb	sy
 800433e:	603b      	str	r3, [r7, #0]
}
 8004340:	bf00      	nop
 8004342:	bf00      	nop
 8004344:	e7fd      	b.n	8004342 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004346:	f001 fa4f 	bl	80057e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800434a:	4b39      	ldr	r3, [pc, #228]	@ (8004430 <xTaskResumeAll+0x118>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	3b01      	subs	r3, #1
 8004350:	4a37      	ldr	r2, [pc, #220]	@ (8004430 <xTaskResumeAll+0x118>)
 8004352:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004354:	4b36      	ldr	r3, [pc, #216]	@ (8004430 <xTaskResumeAll+0x118>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d162      	bne.n	8004422 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800435c:	4b35      	ldr	r3, [pc, #212]	@ (8004434 <xTaskResumeAll+0x11c>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d05e      	beq.n	8004422 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004364:	e02f      	b.n	80043c6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004366:	4b34      	ldr	r3, [pc, #208]	@ (8004438 <xTaskResumeAll+0x120>)
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	3318      	adds	r3, #24
 8004372:	4618      	mov	r0, r3
 8004374:	f7fe fc00 	bl	8002b78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	3304      	adds	r3, #4
 800437c:	4618      	mov	r0, r3
 800437e:	f7fe fbfb 	bl	8002b78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004386:	4b2d      	ldr	r3, [pc, #180]	@ (800443c <xTaskResumeAll+0x124>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	429a      	cmp	r2, r3
 800438c:	d903      	bls.n	8004396 <xTaskResumeAll+0x7e>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004392:	4a2a      	ldr	r2, [pc, #168]	@ (800443c <xTaskResumeAll+0x124>)
 8004394:	6013      	str	r3, [r2, #0]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800439a:	4613      	mov	r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	4413      	add	r3, r2
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	4a27      	ldr	r2, [pc, #156]	@ (8004440 <xTaskResumeAll+0x128>)
 80043a4:	441a      	add	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	3304      	adds	r3, #4
 80043aa:	4619      	mov	r1, r3
 80043ac:	4610      	mov	r0, r2
 80043ae:	f7fe fb86 	bl	8002abe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043b6:	4b23      	ldr	r3, [pc, #140]	@ (8004444 <xTaskResumeAll+0x12c>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043bc:	429a      	cmp	r2, r3
 80043be:	d302      	bcc.n	80043c6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80043c0:	4b21      	ldr	r3, [pc, #132]	@ (8004448 <xTaskResumeAll+0x130>)
 80043c2:	2201      	movs	r2, #1
 80043c4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043c6:	4b1c      	ldr	r3, [pc, #112]	@ (8004438 <xTaskResumeAll+0x120>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1cb      	bne.n	8004366 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d001      	beq.n	80043d8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80043d4:	f000 fb78 	bl	8004ac8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80043d8:	4b1c      	ldr	r3, [pc, #112]	@ (800444c <xTaskResumeAll+0x134>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d010      	beq.n	8004406 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80043e4:	f000 f858 	bl	8004498 <xTaskIncrementTick>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d002      	beq.n	80043f4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80043ee:	4b16      	ldr	r3, [pc, #88]	@ (8004448 <xTaskResumeAll+0x130>)
 80043f0:	2201      	movs	r2, #1
 80043f2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	3b01      	subs	r3, #1
 80043f8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1f1      	bne.n	80043e4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004400:	4b12      	ldr	r3, [pc, #72]	@ (800444c <xTaskResumeAll+0x134>)
 8004402:	2200      	movs	r2, #0
 8004404:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004406:	4b10      	ldr	r3, [pc, #64]	@ (8004448 <xTaskResumeAll+0x130>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d009      	beq.n	8004422 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800440e:	2301      	movs	r3, #1
 8004410:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004412:	4b0f      	ldr	r3, [pc, #60]	@ (8004450 <xTaskResumeAll+0x138>)
 8004414:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004418:	601a      	str	r2, [r3, #0]
 800441a:	f3bf 8f4f 	dsb	sy
 800441e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004422:	f001 fa13 	bl	800584c <vPortExitCritical>

	return xAlreadyYielded;
 8004426:	68bb      	ldr	r3, [r7, #8]
}
 8004428:	4618      	mov	r0, r3
 800442a:	3710      	adds	r7, #16
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	20000d84 	.word	0x20000d84
 8004434:	20000d5c 	.word	0x20000d5c
 8004438:	20000d1c 	.word	0x20000d1c
 800443c:	20000d64 	.word	0x20000d64
 8004440:	2000088c 	.word	0x2000088c
 8004444:	20000888 	.word	0x20000888
 8004448:	20000d70 	.word	0x20000d70
 800444c:	20000d6c 	.word	0x20000d6c
 8004450:	e000ed04 	.word	0xe000ed04

08004454 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800445a:	4b05      	ldr	r3, [pc, #20]	@ (8004470 <xTaskGetTickCount+0x1c>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004460:	687b      	ldr	r3, [r7, #4]
}
 8004462:	4618      	mov	r0, r3
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	20000d60 	.word	0x20000d60

08004474 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800447a:	f001 fa95 	bl	80059a8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800447e:	2300      	movs	r3, #0
 8004480:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8004482:	4b04      	ldr	r3, [pc, #16]	@ (8004494 <xTaskGetTickCountFromISR+0x20>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004488:	683b      	ldr	r3, [r7, #0]
}
 800448a:	4618      	mov	r0, r3
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	20000d60 	.word	0x20000d60

08004498 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b086      	sub	sp, #24
 800449c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800449e:	2300      	movs	r3, #0
 80044a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044a2:	4b4f      	ldr	r3, [pc, #316]	@ (80045e0 <xTaskIncrementTick+0x148>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	f040 8090 	bne.w	80045cc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80044ac:	4b4d      	ldr	r3, [pc, #308]	@ (80045e4 <xTaskIncrementTick+0x14c>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	3301      	adds	r3, #1
 80044b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80044b4:	4a4b      	ldr	r2, [pc, #300]	@ (80045e4 <xTaskIncrementTick+0x14c>)
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d121      	bne.n	8004504 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80044c0:	4b49      	ldr	r3, [pc, #292]	@ (80045e8 <xTaskIncrementTick+0x150>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00b      	beq.n	80044e2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80044ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ce:	f383 8811 	msr	BASEPRI, r3
 80044d2:	f3bf 8f6f 	isb	sy
 80044d6:	f3bf 8f4f 	dsb	sy
 80044da:	603b      	str	r3, [r7, #0]
}
 80044dc:	bf00      	nop
 80044de:	bf00      	nop
 80044e0:	e7fd      	b.n	80044de <xTaskIncrementTick+0x46>
 80044e2:	4b41      	ldr	r3, [pc, #260]	@ (80045e8 <xTaskIncrementTick+0x150>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	60fb      	str	r3, [r7, #12]
 80044e8:	4b40      	ldr	r3, [pc, #256]	@ (80045ec <xTaskIncrementTick+0x154>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a3e      	ldr	r2, [pc, #248]	@ (80045e8 <xTaskIncrementTick+0x150>)
 80044ee:	6013      	str	r3, [r2, #0]
 80044f0:	4a3e      	ldr	r2, [pc, #248]	@ (80045ec <xTaskIncrementTick+0x154>)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6013      	str	r3, [r2, #0]
 80044f6:	4b3e      	ldr	r3, [pc, #248]	@ (80045f0 <xTaskIncrementTick+0x158>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	3301      	adds	r3, #1
 80044fc:	4a3c      	ldr	r2, [pc, #240]	@ (80045f0 <xTaskIncrementTick+0x158>)
 80044fe:	6013      	str	r3, [r2, #0]
 8004500:	f000 fae2 	bl	8004ac8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004504:	4b3b      	ldr	r3, [pc, #236]	@ (80045f4 <xTaskIncrementTick+0x15c>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	429a      	cmp	r2, r3
 800450c:	d349      	bcc.n	80045a2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800450e:	4b36      	ldr	r3, [pc, #216]	@ (80045e8 <xTaskIncrementTick+0x150>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d104      	bne.n	8004522 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004518:	4b36      	ldr	r3, [pc, #216]	@ (80045f4 <xTaskIncrementTick+0x15c>)
 800451a:	f04f 32ff 	mov.w	r2, #4294967295
 800451e:	601a      	str	r2, [r3, #0]
					break;
 8004520:	e03f      	b.n	80045a2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004522:	4b31      	ldr	r3, [pc, #196]	@ (80045e8 <xTaskIncrementTick+0x150>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	429a      	cmp	r2, r3
 8004538:	d203      	bcs.n	8004542 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800453a:	4a2e      	ldr	r2, [pc, #184]	@ (80045f4 <xTaskIncrementTick+0x15c>)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004540:	e02f      	b.n	80045a2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	3304      	adds	r3, #4
 8004546:	4618      	mov	r0, r3
 8004548:	f7fe fb16 	bl	8002b78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004550:	2b00      	cmp	r3, #0
 8004552:	d004      	beq.n	800455e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	3318      	adds	r3, #24
 8004558:	4618      	mov	r0, r3
 800455a:	f7fe fb0d 	bl	8002b78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004562:	4b25      	ldr	r3, [pc, #148]	@ (80045f8 <xTaskIncrementTick+0x160>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	429a      	cmp	r2, r3
 8004568:	d903      	bls.n	8004572 <xTaskIncrementTick+0xda>
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800456e:	4a22      	ldr	r2, [pc, #136]	@ (80045f8 <xTaskIncrementTick+0x160>)
 8004570:	6013      	str	r3, [r2, #0]
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004576:	4613      	mov	r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	4413      	add	r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	4a1f      	ldr	r2, [pc, #124]	@ (80045fc <xTaskIncrementTick+0x164>)
 8004580:	441a      	add	r2, r3
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	3304      	adds	r3, #4
 8004586:	4619      	mov	r1, r3
 8004588:	4610      	mov	r0, r2
 800458a:	f7fe fa98 	bl	8002abe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004592:	4b1b      	ldr	r3, [pc, #108]	@ (8004600 <xTaskIncrementTick+0x168>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004598:	429a      	cmp	r2, r3
 800459a:	d3b8      	bcc.n	800450e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800459c:	2301      	movs	r3, #1
 800459e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045a0:	e7b5      	b.n	800450e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80045a2:	4b17      	ldr	r3, [pc, #92]	@ (8004600 <xTaskIncrementTick+0x168>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045a8:	4914      	ldr	r1, [pc, #80]	@ (80045fc <xTaskIncrementTick+0x164>)
 80045aa:	4613      	mov	r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	4413      	add	r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	440b      	add	r3, r1
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d901      	bls.n	80045be <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80045ba:	2301      	movs	r3, #1
 80045bc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80045be:	4b11      	ldr	r3, [pc, #68]	@ (8004604 <xTaskIncrementTick+0x16c>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d007      	beq.n	80045d6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80045c6:	2301      	movs	r3, #1
 80045c8:	617b      	str	r3, [r7, #20]
 80045ca:	e004      	b.n	80045d6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80045cc:	4b0e      	ldr	r3, [pc, #56]	@ (8004608 <xTaskIncrementTick+0x170>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	3301      	adds	r3, #1
 80045d2:	4a0d      	ldr	r2, [pc, #52]	@ (8004608 <xTaskIncrementTick+0x170>)
 80045d4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80045d6:	697b      	ldr	r3, [r7, #20]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3718      	adds	r7, #24
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	20000d84 	.word	0x20000d84
 80045e4:	20000d60 	.word	0x20000d60
 80045e8:	20000d14 	.word	0x20000d14
 80045ec:	20000d18 	.word	0x20000d18
 80045f0:	20000d74 	.word	0x20000d74
 80045f4:	20000d7c 	.word	0x20000d7c
 80045f8:	20000d64 	.word	0x20000d64
 80045fc:	2000088c 	.word	0x2000088c
 8004600:	20000888 	.word	0x20000888
 8004604:	20000d70 	.word	0x20000d70
 8004608:	20000d6c 	.word	0x20000d6c

0800460c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004612:	4b2b      	ldr	r3, [pc, #172]	@ (80046c0 <vTaskSwitchContext+0xb4>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d003      	beq.n	8004622 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800461a:	4b2a      	ldr	r3, [pc, #168]	@ (80046c4 <vTaskSwitchContext+0xb8>)
 800461c:	2201      	movs	r2, #1
 800461e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004620:	e047      	b.n	80046b2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004622:	4b28      	ldr	r3, [pc, #160]	@ (80046c4 <vTaskSwitchContext+0xb8>)
 8004624:	2200      	movs	r2, #0
 8004626:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004628:	4b27      	ldr	r3, [pc, #156]	@ (80046c8 <vTaskSwitchContext+0xbc>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	60fb      	str	r3, [r7, #12]
 800462e:	e011      	b.n	8004654 <vTaskSwitchContext+0x48>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10b      	bne.n	800464e <vTaskSwitchContext+0x42>
	__asm volatile
 8004636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800463a:	f383 8811 	msr	BASEPRI, r3
 800463e:	f3bf 8f6f 	isb	sy
 8004642:	f3bf 8f4f 	dsb	sy
 8004646:	607b      	str	r3, [r7, #4]
}
 8004648:	bf00      	nop
 800464a:	bf00      	nop
 800464c:	e7fd      	b.n	800464a <vTaskSwitchContext+0x3e>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	3b01      	subs	r3, #1
 8004652:	60fb      	str	r3, [r7, #12]
 8004654:	491d      	ldr	r1, [pc, #116]	@ (80046cc <vTaskSwitchContext+0xc0>)
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	4613      	mov	r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	4413      	add	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	440b      	add	r3, r1
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d0e3      	beq.n	8004630 <vTaskSwitchContext+0x24>
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	4613      	mov	r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4413      	add	r3, r2
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	4a16      	ldr	r2, [pc, #88]	@ (80046cc <vTaskSwitchContext+0xc0>)
 8004674:	4413      	add	r3, r2
 8004676:	60bb      	str	r3, [r7, #8]
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	685a      	ldr	r2, [r3, #4]
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	605a      	str	r2, [r3, #4]
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	3308      	adds	r3, #8
 800468a:	429a      	cmp	r2, r3
 800468c:	d104      	bne.n	8004698 <vTaskSwitchContext+0x8c>
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	685a      	ldr	r2, [r3, #4]
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	605a      	str	r2, [r3, #4]
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	4a0c      	ldr	r2, [pc, #48]	@ (80046d0 <vTaskSwitchContext+0xc4>)
 80046a0:	6013      	str	r3, [r2, #0]
 80046a2:	4a09      	ldr	r2, [pc, #36]	@ (80046c8 <vTaskSwitchContext+0xbc>)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80046a8:	4b09      	ldr	r3, [pc, #36]	@ (80046d0 <vTaskSwitchContext+0xc4>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	3354      	adds	r3, #84	@ 0x54
 80046ae:	4a09      	ldr	r2, [pc, #36]	@ (80046d4 <vTaskSwitchContext+0xc8>)
 80046b0:	6013      	str	r3, [r2, #0]
}
 80046b2:	bf00      	nop
 80046b4:	3714      	adds	r7, #20
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	20000d84 	.word	0x20000d84
 80046c4:	20000d70 	.word	0x20000d70
 80046c8:	20000d64 	.word	0x20000d64
 80046cc:	2000088c 	.word	0x2000088c
 80046d0:	20000888 	.word	0x20000888
 80046d4:	2000001c 	.word	0x2000001c

080046d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d10b      	bne.n	8004700 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80046e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ec:	f383 8811 	msr	BASEPRI, r3
 80046f0:	f3bf 8f6f 	isb	sy
 80046f4:	f3bf 8f4f 	dsb	sy
 80046f8:	60fb      	str	r3, [r7, #12]
}
 80046fa:	bf00      	nop
 80046fc:	bf00      	nop
 80046fe:	e7fd      	b.n	80046fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004700:	4b07      	ldr	r3, [pc, #28]	@ (8004720 <vTaskPlaceOnEventList+0x48>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	3318      	adds	r3, #24
 8004706:	4619      	mov	r1, r3
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f7fe f9fc 	bl	8002b06 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800470e:	2101      	movs	r1, #1
 8004710:	6838      	ldr	r0, [r7, #0]
 8004712:	f000 fb87 	bl	8004e24 <prvAddCurrentTaskToDelayedList>
}
 8004716:	bf00      	nop
 8004718:	3710      	adds	r7, #16
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	20000888 	.word	0x20000888

08004724 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004724:	b580      	push	{r7, lr}
 8004726:	b086      	sub	sp, #24
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10b      	bne.n	800474e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800473a:	f383 8811 	msr	BASEPRI, r3
 800473e:	f3bf 8f6f 	isb	sy
 8004742:	f3bf 8f4f 	dsb	sy
 8004746:	617b      	str	r3, [r7, #20]
}
 8004748:	bf00      	nop
 800474a:	bf00      	nop
 800474c:	e7fd      	b.n	800474a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800474e:	4b0a      	ldr	r3, [pc, #40]	@ (8004778 <vTaskPlaceOnEventListRestricted+0x54>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	3318      	adds	r3, #24
 8004754:	4619      	mov	r1, r3
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f7fe f9b1 	bl	8002abe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d002      	beq.n	8004768 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004762:	f04f 33ff 	mov.w	r3, #4294967295
 8004766:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004768:	6879      	ldr	r1, [r7, #4]
 800476a:	68b8      	ldr	r0, [r7, #8]
 800476c:	f000 fb5a 	bl	8004e24 <prvAddCurrentTaskToDelayedList>
	}
 8004770:	bf00      	nop
 8004772:	3718      	adds	r7, #24
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	20000888 	.word	0x20000888

0800477c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d10b      	bne.n	80047aa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004796:	f383 8811 	msr	BASEPRI, r3
 800479a:	f3bf 8f6f 	isb	sy
 800479e:	f3bf 8f4f 	dsb	sy
 80047a2:	60fb      	str	r3, [r7, #12]
}
 80047a4:	bf00      	nop
 80047a6:	bf00      	nop
 80047a8:	e7fd      	b.n	80047a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	3318      	adds	r3, #24
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7fe f9e2 	bl	8002b78 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047b4:	4b1d      	ldr	r3, [pc, #116]	@ (800482c <xTaskRemoveFromEventList+0xb0>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d11d      	bne.n	80047f8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	3304      	adds	r3, #4
 80047c0:	4618      	mov	r0, r3
 80047c2:	f7fe f9d9 	bl	8002b78 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047ca:	4b19      	ldr	r3, [pc, #100]	@ (8004830 <xTaskRemoveFromEventList+0xb4>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d903      	bls.n	80047da <xTaskRemoveFromEventList+0x5e>
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047d6:	4a16      	ldr	r2, [pc, #88]	@ (8004830 <xTaskRemoveFromEventList+0xb4>)
 80047d8:	6013      	str	r3, [r2, #0]
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047de:	4613      	mov	r3, r2
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	4413      	add	r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	4a13      	ldr	r2, [pc, #76]	@ (8004834 <xTaskRemoveFromEventList+0xb8>)
 80047e8:	441a      	add	r2, r3
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	3304      	adds	r3, #4
 80047ee:	4619      	mov	r1, r3
 80047f0:	4610      	mov	r0, r2
 80047f2:	f7fe f964 	bl	8002abe <vListInsertEnd>
 80047f6:	e005      	b.n	8004804 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	3318      	adds	r3, #24
 80047fc:	4619      	mov	r1, r3
 80047fe:	480e      	ldr	r0, [pc, #56]	@ (8004838 <xTaskRemoveFromEventList+0xbc>)
 8004800:	f7fe f95d 	bl	8002abe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004808:	4b0c      	ldr	r3, [pc, #48]	@ (800483c <xTaskRemoveFromEventList+0xc0>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800480e:	429a      	cmp	r2, r3
 8004810:	d905      	bls.n	800481e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004812:	2301      	movs	r3, #1
 8004814:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004816:	4b0a      	ldr	r3, [pc, #40]	@ (8004840 <xTaskRemoveFromEventList+0xc4>)
 8004818:	2201      	movs	r2, #1
 800481a:	601a      	str	r2, [r3, #0]
 800481c:	e001      	b.n	8004822 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800481e:	2300      	movs	r3, #0
 8004820:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004822:	697b      	ldr	r3, [r7, #20]
}
 8004824:	4618      	mov	r0, r3
 8004826:	3718      	adds	r7, #24
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	20000d84 	.word	0x20000d84
 8004830:	20000d64 	.word	0x20000d64
 8004834:	2000088c 	.word	0x2000088c
 8004838:	20000d1c 	.word	0x20000d1c
 800483c:	20000888 	.word	0x20000888
 8004840:	20000d70 	.word	0x20000d70

08004844 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800484c:	4b06      	ldr	r3, [pc, #24]	@ (8004868 <vTaskInternalSetTimeOutState+0x24>)
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004854:	4b05      	ldr	r3, [pc, #20]	@ (800486c <vTaskInternalSetTimeOutState+0x28>)
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	605a      	str	r2, [r3, #4]
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr
 8004868:	20000d74 	.word	0x20000d74
 800486c:	20000d60 	.word	0x20000d60

08004870 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b088      	sub	sp, #32
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10b      	bne.n	8004898 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004884:	f383 8811 	msr	BASEPRI, r3
 8004888:	f3bf 8f6f 	isb	sy
 800488c:	f3bf 8f4f 	dsb	sy
 8004890:	613b      	str	r3, [r7, #16]
}
 8004892:	bf00      	nop
 8004894:	bf00      	nop
 8004896:	e7fd      	b.n	8004894 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d10b      	bne.n	80048b6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800489e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048a2:	f383 8811 	msr	BASEPRI, r3
 80048a6:	f3bf 8f6f 	isb	sy
 80048aa:	f3bf 8f4f 	dsb	sy
 80048ae:	60fb      	str	r3, [r7, #12]
}
 80048b0:	bf00      	nop
 80048b2:	bf00      	nop
 80048b4:	e7fd      	b.n	80048b2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80048b6:	f000 ff97 	bl	80057e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80048ba:	4b1d      	ldr	r3, [pc, #116]	@ (8004930 <xTaskCheckForTimeOut+0xc0>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d2:	d102      	bne.n	80048da <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80048d4:	2300      	movs	r3, #0
 80048d6:	61fb      	str	r3, [r7, #28]
 80048d8:	e023      	b.n	8004922 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	4b15      	ldr	r3, [pc, #84]	@ (8004934 <xTaskCheckForTimeOut+0xc4>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d007      	beq.n	80048f6 <xTaskCheckForTimeOut+0x86>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	69ba      	ldr	r2, [r7, #24]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d302      	bcc.n	80048f6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80048f0:	2301      	movs	r3, #1
 80048f2:	61fb      	str	r3, [r7, #28]
 80048f4:	e015      	b.n	8004922 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	697a      	ldr	r2, [r7, #20]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d20b      	bcs.n	8004918 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	1ad2      	subs	r2, r2, r3
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f7ff ff99 	bl	8004844 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004912:	2300      	movs	r3, #0
 8004914:	61fb      	str	r3, [r7, #28]
 8004916:	e004      	b.n	8004922 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	2200      	movs	r2, #0
 800491c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800491e:	2301      	movs	r3, #1
 8004920:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004922:	f000 ff93 	bl	800584c <vPortExitCritical>

	return xReturn;
 8004926:	69fb      	ldr	r3, [r7, #28]
}
 8004928:	4618      	mov	r0, r3
 800492a:	3720      	adds	r7, #32
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	20000d60 	.word	0x20000d60
 8004934:	20000d74 	.word	0x20000d74

08004938 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004938:	b480      	push	{r7}
 800493a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800493c:	4b03      	ldr	r3, [pc, #12]	@ (800494c <vTaskMissedYield+0x14>)
 800493e:	2201      	movs	r2, #1
 8004940:	601a      	str	r2, [r3, #0]
}
 8004942:	bf00      	nop
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr
 800494c:	20000d70 	.word	0x20000d70

08004950 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004958:	f000 f852 	bl	8004a00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800495c:	4b06      	ldr	r3, [pc, #24]	@ (8004978 <prvIdleTask+0x28>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d9f9      	bls.n	8004958 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004964:	4b05      	ldr	r3, [pc, #20]	@ (800497c <prvIdleTask+0x2c>)
 8004966:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800496a:	601a      	str	r2, [r3, #0]
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004974:	e7f0      	b.n	8004958 <prvIdleTask+0x8>
 8004976:	bf00      	nop
 8004978:	2000088c 	.word	0x2000088c
 800497c:	e000ed04 	.word	0xe000ed04

08004980 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004986:	2300      	movs	r3, #0
 8004988:	607b      	str	r3, [r7, #4]
 800498a:	e00c      	b.n	80049a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	4613      	mov	r3, r2
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	4413      	add	r3, r2
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	4a12      	ldr	r2, [pc, #72]	@ (80049e0 <prvInitialiseTaskLists+0x60>)
 8004998:	4413      	add	r3, r2
 800499a:	4618      	mov	r0, r3
 800499c:	f7fe f862 	bl	8002a64 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	3301      	adds	r3, #1
 80049a4:	607b      	str	r3, [r7, #4]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2b37      	cmp	r3, #55	@ 0x37
 80049aa:	d9ef      	bls.n	800498c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80049ac:	480d      	ldr	r0, [pc, #52]	@ (80049e4 <prvInitialiseTaskLists+0x64>)
 80049ae:	f7fe f859 	bl	8002a64 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80049b2:	480d      	ldr	r0, [pc, #52]	@ (80049e8 <prvInitialiseTaskLists+0x68>)
 80049b4:	f7fe f856 	bl	8002a64 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80049b8:	480c      	ldr	r0, [pc, #48]	@ (80049ec <prvInitialiseTaskLists+0x6c>)
 80049ba:	f7fe f853 	bl	8002a64 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80049be:	480c      	ldr	r0, [pc, #48]	@ (80049f0 <prvInitialiseTaskLists+0x70>)
 80049c0:	f7fe f850 	bl	8002a64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80049c4:	480b      	ldr	r0, [pc, #44]	@ (80049f4 <prvInitialiseTaskLists+0x74>)
 80049c6:	f7fe f84d 	bl	8002a64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80049ca:	4b0b      	ldr	r3, [pc, #44]	@ (80049f8 <prvInitialiseTaskLists+0x78>)
 80049cc:	4a05      	ldr	r2, [pc, #20]	@ (80049e4 <prvInitialiseTaskLists+0x64>)
 80049ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80049d0:	4b0a      	ldr	r3, [pc, #40]	@ (80049fc <prvInitialiseTaskLists+0x7c>)
 80049d2:	4a05      	ldr	r2, [pc, #20]	@ (80049e8 <prvInitialiseTaskLists+0x68>)
 80049d4:	601a      	str	r2, [r3, #0]
}
 80049d6:	bf00      	nop
 80049d8:	3708      	adds	r7, #8
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	2000088c 	.word	0x2000088c
 80049e4:	20000cec 	.word	0x20000cec
 80049e8:	20000d00 	.word	0x20000d00
 80049ec:	20000d1c 	.word	0x20000d1c
 80049f0:	20000d30 	.word	0x20000d30
 80049f4:	20000d48 	.word	0x20000d48
 80049f8:	20000d14 	.word	0x20000d14
 80049fc:	20000d18 	.word	0x20000d18

08004a00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a06:	e019      	b.n	8004a3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004a08:	f000 feee 	bl	80057e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a0c:	4b10      	ldr	r3, [pc, #64]	@ (8004a50 <prvCheckTasksWaitingTermination+0x50>)
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	3304      	adds	r3, #4
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7fe f8ad 	bl	8002b78 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8004a54 <prvCheckTasksWaitingTermination+0x54>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	3b01      	subs	r3, #1
 8004a24:	4a0b      	ldr	r2, [pc, #44]	@ (8004a54 <prvCheckTasksWaitingTermination+0x54>)
 8004a26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004a28:	4b0b      	ldr	r3, [pc, #44]	@ (8004a58 <prvCheckTasksWaitingTermination+0x58>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	4a0a      	ldr	r2, [pc, #40]	@ (8004a58 <prvCheckTasksWaitingTermination+0x58>)
 8004a30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004a32:	f000 ff0b 	bl	800584c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 f810 	bl	8004a5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a3c:	4b06      	ldr	r3, [pc, #24]	@ (8004a58 <prvCheckTasksWaitingTermination+0x58>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1e1      	bne.n	8004a08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004a44:	bf00      	nop
 8004a46:	bf00      	nop
 8004a48:	3708      	adds	r7, #8
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	20000d30 	.word	0x20000d30
 8004a54:	20000d5c 	.word	0x20000d5c
 8004a58:	20000d44 	.word	0x20000d44

08004a5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	3354      	adds	r3, #84	@ 0x54
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f001 fbdd 	bl	8006228 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d108      	bne.n	8004a8a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f001 f8a3 	bl	8005bc8 <vPortFree>
				vPortFree( pxTCB );
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f001 f8a0 	bl	8005bc8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004a88:	e019      	b.n	8004abe <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d103      	bne.n	8004a9c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f001 f897 	bl	8005bc8 <vPortFree>
	}
 8004a9a:	e010      	b.n	8004abe <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d00b      	beq.n	8004abe <prvDeleteTCB+0x62>
	__asm volatile
 8004aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aaa:	f383 8811 	msr	BASEPRI, r3
 8004aae:	f3bf 8f6f 	isb	sy
 8004ab2:	f3bf 8f4f 	dsb	sy
 8004ab6:	60fb      	str	r3, [r7, #12]
}
 8004ab8:	bf00      	nop
 8004aba:	bf00      	nop
 8004abc:	e7fd      	b.n	8004aba <prvDeleteTCB+0x5e>
	}
 8004abe:	bf00      	nop
 8004ac0:	3710      	adds	r7, #16
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
	...

08004ac8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ace:	4b0c      	ldr	r3, [pc, #48]	@ (8004b00 <prvResetNextTaskUnblockTime+0x38>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d104      	bne.n	8004ae2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8004b04 <prvResetNextTaskUnblockTime+0x3c>)
 8004ada:	f04f 32ff 	mov.w	r2, #4294967295
 8004ade:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004ae0:	e008      	b.n	8004af4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ae2:	4b07      	ldr	r3, [pc, #28]	@ (8004b00 <prvResetNextTaskUnblockTime+0x38>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	4a04      	ldr	r2, [pc, #16]	@ (8004b04 <prvResetNextTaskUnblockTime+0x3c>)
 8004af2:	6013      	str	r3, [r2, #0]
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr
 8004b00:	20000d14 	.word	0x20000d14
 8004b04:	20000d7c 	.word	0x20000d7c

08004b08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8004b3c <xTaskGetSchedulerState+0x34>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d102      	bne.n	8004b1c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004b16:	2301      	movs	r3, #1
 8004b18:	607b      	str	r3, [r7, #4]
 8004b1a:	e008      	b.n	8004b2e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b1c:	4b08      	ldr	r3, [pc, #32]	@ (8004b40 <xTaskGetSchedulerState+0x38>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d102      	bne.n	8004b2a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004b24:	2302      	movs	r3, #2
 8004b26:	607b      	str	r3, [r7, #4]
 8004b28:	e001      	b.n	8004b2e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004b2e:	687b      	ldr	r3, [r7, #4]
	}
 8004b30:	4618      	mov	r0, r3
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr
 8004b3c:	20000d68 	.word	0x20000d68
 8004b40:	20000d84 	.word	0x20000d84

08004b44 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004b50:	2300      	movs	r3, #0
 8004b52:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d051      	beq.n	8004bfe <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b5e:	4b2a      	ldr	r3, [pc, #168]	@ (8004c08 <xTaskPriorityInherit+0xc4>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d241      	bcs.n	8004bec <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	db06      	blt.n	8004b7e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b70:	4b25      	ldr	r3, [pc, #148]	@ (8004c08 <xTaskPriorityInherit+0xc4>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b76:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	6959      	ldr	r1, [r3, #20]
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b86:	4613      	mov	r3, r2
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	4413      	add	r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	4a1f      	ldr	r2, [pc, #124]	@ (8004c0c <xTaskPriorityInherit+0xc8>)
 8004b90:	4413      	add	r3, r2
 8004b92:	4299      	cmp	r1, r3
 8004b94:	d122      	bne.n	8004bdc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	3304      	adds	r3, #4
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7fd ffec 	bl	8002b78 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004ba0:	4b19      	ldr	r3, [pc, #100]	@ (8004c08 <xTaskPriorityInherit+0xc4>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bae:	4b18      	ldr	r3, [pc, #96]	@ (8004c10 <xTaskPriorityInherit+0xcc>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d903      	bls.n	8004bbe <xTaskPriorityInherit+0x7a>
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bba:	4a15      	ldr	r2, [pc, #84]	@ (8004c10 <xTaskPriorityInherit+0xcc>)
 8004bbc:	6013      	str	r3, [r2, #0]
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	4413      	add	r3, r2
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	4a10      	ldr	r2, [pc, #64]	@ (8004c0c <xTaskPriorityInherit+0xc8>)
 8004bcc:	441a      	add	r2, r3
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	3304      	adds	r3, #4
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	4610      	mov	r0, r2
 8004bd6:	f7fd ff72 	bl	8002abe <vListInsertEnd>
 8004bda:	e004      	b.n	8004be6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8004c08 <xTaskPriorityInherit+0xc4>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004be6:	2301      	movs	r3, #1
 8004be8:	60fb      	str	r3, [r7, #12]
 8004bea:	e008      	b.n	8004bfe <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004bf0:	4b05      	ldr	r3, [pc, #20]	@ (8004c08 <xTaskPriorityInherit+0xc4>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d201      	bcs.n	8004bfe <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
	}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3710      	adds	r7, #16
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	20000888 	.word	0x20000888
 8004c0c:	2000088c 	.word	0x2000088c
 8004c10:	20000d64 	.word	0x20000d64

08004c14 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004c20:	2300      	movs	r3, #0
 8004c22:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d058      	beq.n	8004cdc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004c2a:	4b2f      	ldr	r3, [pc, #188]	@ (8004ce8 <xTaskPriorityDisinherit+0xd4>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	693a      	ldr	r2, [r7, #16]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d00b      	beq.n	8004c4c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c38:	f383 8811 	msr	BASEPRI, r3
 8004c3c:	f3bf 8f6f 	isb	sy
 8004c40:	f3bf 8f4f 	dsb	sy
 8004c44:	60fb      	str	r3, [r7, #12]
}
 8004c46:	bf00      	nop
 8004c48:	bf00      	nop
 8004c4a:	e7fd      	b.n	8004c48 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d10b      	bne.n	8004c6c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c58:	f383 8811 	msr	BASEPRI, r3
 8004c5c:	f3bf 8f6f 	isb	sy
 8004c60:	f3bf 8f4f 	dsb	sy
 8004c64:	60bb      	str	r3, [r7, #8]
}
 8004c66:	bf00      	nop
 8004c68:	bf00      	nop
 8004c6a:	e7fd      	b.n	8004c68 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c70:	1e5a      	subs	r2, r3, #1
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d02c      	beq.n	8004cdc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d128      	bne.n	8004cdc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	3304      	adds	r3, #4
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7fd ff72 	bl	8002b78 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cac:	4b0f      	ldr	r3, [pc, #60]	@ (8004cec <xTaskPriorityDisinherit+0xd8>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d903      	bls.n	8004cbc <xTaskPriorityDisinherit+0xa8>
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb8:	4a0c      	ldr	r2, [pc, #48]	@ (8004cec <xTaskPriorityDisinherit+0xd8>)
 8004cba:	6013      	str	r3, [r2, #0]
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	4413      	add	r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	4a09      	ldr	r2, [pc, #36]	@ (8004cf0 <xTaskPriorityDisinherit+0xdc>)
 8004cca:	441a      	add	r2, r3
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	3304      	adds	r3, #4
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	4610      	mov	r0, r2
 8004cd4:	f7fd fef3 	bl	8002abe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004cdc:	697b      	ldr	r3, [r7, #20]
	}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3718      	adds	r7, #24
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	20000888 	.word	0x20000888
 8004cec:	20000d64 	.word	0x20000d64
 8004cf0:	2000088c 	.word	0x2000088c

08004cf4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b088      	sub	sp, #32
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004d02:	2301      	movs	r3, #1
 8004d04:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d06c      	beq.n	8004de6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d10b      	bne.n	8004d2c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8004d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d18:	f383 8811 	msr	BASEPRI, r3
 8004d1c:	f3bf 8f6f 	isb	sy
 8004d20:	f3bf 8f4f 	dsb	sy
 8004d24:	60fb      	str	r3, [r7, #12]
}
 8004d26:	bf00      	nop
 8004d28:	bf00      	nop
 8004d2a:	e7fd      	b.n	8004d28 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d30:	683a      	ldr	r2, [r7, #0]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d902      	bls.n	8004d3c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	61fb      	str	r3, [r7, #28]
 8004d3a:	e002      	b.n	8004d42 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d40:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d46:	69fa      	ldr	r2, [r7, #28]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d04c      	beq.n	8004de6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d147      	bne.n	8004de6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004d56:	4b26      	ldr	r3, [pc, #152]	@ (8004df0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	69ba      	ldr	r2, [r7, #24]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d10b      	bne.n	8004d78 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8004d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d64:	f383 8811 	msr	BASEPRI, r3
 8004d68:	f3bf 8f6f 	isb	sy
 8004d6c:	f3bf 8f4f 	dsb	sy
 8004d70:	60bb      	str	r3, [r7, #8]
}
 8004d72:	bf00      	nop
 8004d74:	bf00      	nop
 8004d76:	e7fd      	b.n	8004d74 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d7c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	69fa      	ldr	r2, [r7, #28]
 8004d82:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	db04      	blt.n	8004d96 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	6959      	ldr	r1, [r3, #20]
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	4413      	add	r3, r2
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	4a13      	ldr	r2, [pc, #76]	@ (8004df4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004da6:	4413      	add	r3, r2
 8004da8:	4299      	cmp	r1, r3
 8004daa:	d11c      	bne.n	8004de6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	3304      	adds	r3, #4
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7fd fee1 	bl	8002b78 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dba:	4b0f      	ldr	r3, [pc, #60]	@ (8004df8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d903      	bls.n	8004dca <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc6:	4a0c      	ldr	r2, [pc, #48]	@ (8004df8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004dc8:	6013      	str	r3, [r2, #0]
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dce:	4613      	mov	r3, r2
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	4413      	add	r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	4a07      	ldr	r2, [pc, #28]	@ (8004df4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004dd8:	441a      	add	r2, r3
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	3304      	adds	r3, #4
 8004dde:	4619      	mov	r1, r3
 8004de0:	4610      	mov	r0, r2
 8004de2:	f7fd fe6c 	bl	8002abe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004de6:	bf00      	nop
 8004de8:	3720      	adds	r7, #32
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	20000888 	.word	0x20000888
 8004df4:	2000088c 	.word	0x2000088c
 8004df8:	20000d64 	.word	0x20000d64

08004dfc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004dfc:	b480      	push	{r7}
 8004dfe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004e00:	4b07      	ldr	r3, [pc, #28]	@ (8004e20 <pvTaskIncrementMutexHeldCount+0x24>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d004      	beq.n	8004e12 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004e08:	4b05      	ldr	r3, [pc, #20]	@ (8004e20 <pvTaskIncrementMutexHeldCount+0x24>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004e0e:	3201      	adds	r2, #1
 8004e10:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8004e12:	4b03      	ldr	r3, [pc, #12]	@ (8004e20 <pvTaskIncrementMutexHeldCount+0x24>)
 8004e14:	681b      	ldr	r3, [r3, #0]
	}
 8004e16:	4618      	mov	r0, r3
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr
 8004e20:	20000888 	.word	0x20000888

08004e24 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004e2e:	4b21      	ldr	r3, [pc, #132]	@ (8004eb4 <prvAddCurrentTaskToDelayedList+0x90>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e34:	4b20      	ldr	r3, [pc, #128]	@ (8004eb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	3304      	adds	r3, #4
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7fd fe9c 	bl	8002b78 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e46:	d10a      	bne.n	8004e5e <prvAddCurrentTaskToDelayedList+0x3a>
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d007      	beq.n	8004e5e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e4e:	4b1a      	ldr	r3, [pc, #104]	@ (8004eb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	3304      	adds	r3, #4
 8004e54:	4619      	mov	r1, r3
 8004e56:	4819      	ldr	r0, [pc, #100]	@ (8004ebc <prvAddCurrentTaskToDelayedList+0x98>)
 8004e58:	f7fd fe31 	bl	8002abe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004e5c:	e026      	b.n	8004eac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4413      	add	r3, r2
 8004e64:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004e66:	4b14      	ldr	r3, [pc, #80]	@ (8004eb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68ba      	ldr	r2, [r7, #8]
 8004e6c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004e6e:	68ba      	ldr	r2, [r7, #8]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d209      	bcs.n	8004e8a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e76:	4b12      	ldr	r3, [pc, #72]	@ (8004ec0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	4b0f      	ldr	r3, [pc, #60]	@ (8004eb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	3304      	adds	r3, #4
 8004e80:	4619      	mov	r1, r3
 8004e82:	4610      	mov	r0, r2
 8004e84:	f7fd fe3f 	bl	8002b06 <vListInsert>
}
 8004e88:	e010      	b.n	8004eac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e8a:	4b0e      	ldr	r3, [pc, #56]	@ (8004ec4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8004eb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	3304      	adds	r3, #4
 8004e94:	4619      	mov	r1, r3
 8004e96:	4610      	mov	r0, r2
 8004e98:	f7fd fe35 	bl	8002b06 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8004ec8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68ba      	ldr	r2, [r7, #8]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d202      	bcs.n	8004eac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004ea6:	4a08      	ldr	r2, [pc, #32]	@ (8004ec8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	6013      	str	r3, [r2, #0]
}
 8004eac:	bf00      	nop
 8004eae:	3710      	adds	r7, #16
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	20000d60 	.word	0x20000d60
 8004eb8:	20000888 	.word	0x20000888
 8004ebc:	20000d48 	.word	0x20000d48
 8004ec0:	20000d18 	.word	0x20000d18
 8004ec4:	20000d14 	.word	0x20000d14
 8004ec8:	20000d7c 	.word	0x20000d7c

08004ecc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b08a      	sub	sp, #40	@ 0x28
 8004ed0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004ed6:	f000 fb13 	bl	8005500 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004eda:	4b1d      	ldr	r3, [pc, #116]	@ (8004f50 <xTimerCreateTimerTask+0x84>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d021      	beq.n	8004f26 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004eea:	1d3a      	adds	r2, r7, #4
 8004eec:	f107 0108 	add.w	r1, r7, #8
 8004ef0:	f107 030c 	add.w	r3, r7, #12
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f7fd fd9b 	bl	8002a30 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004efa:	6879      	ldr	r1, [r7, #4]
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	9202      	str	r2, [sp, #8]
 8004f02:	9301      	str	r3, [sp, #4]
 8004f04:	2302      	movs	r3, #2
 8004f06:	9300      	str	r3, [sp, #0]
 8004f08:	2300      	movs	r3, #0
 8004f0a:	460a      	mov	r2, r1
 8004f0c:	4911      	ldr	r1, [pc, #68]	@ (8004f54 <xTimerCreateTimerTask+0x88>)
 8004f0e:	4812      	ldr	r0, [pc, #72]	@ (8004f58 <xTimerCreateTimerTask+0x8c>)
 8004f10:	f7fe fe88 	bl	8003c24 <xTaskCreateStatic>
 8004f14:	4603      	mov	r3, r0
 8004f16:	4a11      	ldr	r2, [pc, #68]	@ (8004f5c <xTimerCreateTimerTask+0x90>)
 8004f18:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004f1a:	4b10      	ldr	r3, [pc, #64]	@ (8004f5c <xTimerCreateTimerTask+0x90>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d001      	beq.n	8004f26 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004f22:	2301      	movs	r3, #1
 8004f24:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d10b      	bne.n	8004f44 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f30:	f383 8811 	msr	BASEPRI, r3
 8004f34:	f3bf 8f6f 	isb	sy
 8004f38:	f3bf 8f4f 	dsb	sy
 8004f3c:	613b      	str	r3, [r7, #16]
}
 8004f3e:	bf00      	nop
 8004f40:	bf00      	nop
 8004f42:	e7fd      	b.n	8004f40 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004f44:	697b      	ldr	r3, [r7, #20]
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3718      	adds	r7, #24
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	20000db8 	.word	0x20000db8
 8004f54:	080068e0 	.word	0x080068e0
 8004f58:	08005099 	.word	0x08005099
 8004f5c:	20000dbc 	.word	0x20000dbc

08004f60 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b08a      	sub	sp, #40	@ 0x28
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]
 8004f6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d10b      	bne.n	8004f90 <xTimerGenericCommand+0x30>
	__asm volatile
 8004f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f7c:	f383 8811 	msr	BASEPRI, r3
 8004f80:	f3bf 8f6f 	isb	sy
 8004f84:	f3bf 8f4f 	dsb	sy
 8004f88:	623b      	str	r3, [r7, #32]
}
 8004f8a:	bf00      	nop
 8004f8c:	bf00      	nop
 8004f8e:	e7fd      	b.n	8004f8c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004f90:	4b19      	ldr	r3, [pc, #100]	@ (8004ff8 <xTimerGenericCommand+0x98>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d02a      	beq.n	8004fee <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	2b05      	cmp	r3, #5
 8004fa8:	dc18      	bgt.n	8004fdc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004faa:	f7ff fdad 	bl	8004b08 <xTaskGetSchedulerState>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d109      	bne.n	8004fc8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004fb4:	4b10      	ldr	r3, [pc, #64]	@ (8004ff8 <xTimerGenericCommand+0x98>)
 8004fb6:	6818      	ldr	r0, [r3, #0]
 8004fb8:	f107 0110 	add.w	r1, r7, #16
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fc0:	f7fd ffb8 	bl	8002f34 <xQueueGenericSend>
 8004fc4:	6278      	str	r0, [r7, #36]	@ 0x24
 8004fc6:	e012      	b.n	8004fee <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8004ff8 <xTimerGenericCommand+0x98>)
 8004fca:	6818      	ldr	r0, [r3, #0]
 8004fcc:	f107 0110 	add.w	r1, r7, #16
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f7fd ffae 	bl	8002f34 <xQueueGenericSend>
 8004fd8:	6278      	str	r0, [r7, #36]	@ 0x24
 8004fda:	e008      	b.n	8004fee <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004fdc:	4b06      	ldr	r3, [pc, #24]	@ (8004ff8 <xTimerGenericCommand+0x98>)
 8004fde:	6818      	ldr	r0, [r3, #0]
 8004fe0:	f107 0110 	add.w	r1, r7, #16
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	683a      	ldr	r2, [r7, #0]
 8004fe8:	f7fe f8a6 	bl	8003138 <xQueueGenericSendFromISR>
 8004fec:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3728      	adds	r7, #40	@ 0x28
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	20000db8 	.word	0x20000db8

08004ffc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b088      	sub	sp, #32
 8005000:	af02      	add	r7, sp, #8
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005006:	4b23      	ldr	r3, [pc, #140]	@ (8005094 <prvProcessExpiredTimer+0x98>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	3304      	adds	r3, #4
 8005014:	4618      	mov	r0, r3
 8005016:	f7fd fdaf 	bl	8002b78 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005020:	f003 0304 	and.w	r3, r3, #4
 8005024:	2b00      	cmp	r3, #0
 8005026:	d023      	beq.n	8005070 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	699a      	ldr	r2, [r3, #24]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	18d1      	adds	r1, r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	683a      	ldr	r2, [r7, #0]
 8005034:	6978      	ldr	r0, [r7, #20]
 8005036:	f000 f8d5 	bl	80051e4 <prvInsertTimerInActiveList>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d020      	beq.n	8005082 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005040:	2300      	movs	r3, #0
 8005042:	9300      	str	r3, [sp, #0]
 8005044:	2300      	movs	r3, #0
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	2100      	movs	r1, #0
 800504a:	6978      	ldr	r0, [r7, #20]
 800504c:	f7ff ff88 	bl	8004f60 <xTimerGenericCommand>
 8005050:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d114      	bne.n	8005082 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800505c:	f383 8811 	msr	BASEPRI, r3
 8005060:	f3bf 8f6f 	isb	sy
 8005064:	f3bf 8f4f 	dsb	sy
 8005068:	60fb      	str	r3, [r7, #12]
}
 800506a:	bf00      	nop
 800506c:	bf00      	nop
 800506e:	e7fd      	b.n	800506c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005076:	f023 0301 	bic.w	r3, r3, #1
 800507a:	b2da      	uxtb	r2, r3
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	6978      	ldr	r0, [r7, #20]
 8005088:	4798      	blx	r3
}
 800508a:	bf00      	nop
 800508c:	3718      	adds	r7, #24
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	20000db0 	.word	0x20000db0

08005098 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80050a0:	f107 0308 	add.w	r3, r7, #8
 80050a4:	4618      	mov	r0, r3
 80050a6:	f000 f859 	bl	800515c <prvGetNextExpireTime>
 80050aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	4619      	mov	r1, r3
 80050b0:	68f8      	ldr	r0, [r7, #12]
 80050b2:	f000 f805 	bl	80050c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80050b6:	f000 f8d7 	bl	8005268 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80050ba:	bf00      	nop
 80050bc:	e7f0      	b.n	80050a0 <prvTimerTask+0x8>
	...

080050c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80050ca:	f7ff f917 	bl	80042fc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80050ce:	f107 0308 	add.w	r3, r7, #8
 80050d2:	4618      	mov	r0, r3
 80050d4:	f000 f866 	bl	80051a4 <prvSampleTimeNow>
 80050d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d130      	bne.n	8005142 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d10a      	bne.n	80050fc <prvProcessTimerOrBlockTask+0x3c>
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d806      	bhi.n	80050fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80050ee:	f7ff f913 	bl	8004318 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80050f2:	68f9      	ldr	r1, [r7, #12]
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f7ff ff81 	bl	8004ffc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80050fa:	e024      	b.n	8005146 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d008      	beq.n	8005114 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005102:	4b13      	ldr	r3, [pc, #76]	@ (8005150 <prvProcessTimerOrBlockTask+0x90>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d101      	bne.n	8005110 <prvProcessTimerOrBlockTask+0x50>
 800510c:	2301      	movs	r3, #1
 800510e:	e000      	b.n	8005112 <prvProcessTimerOrBlockTask+0x52>
 8005110:	2300      	movs	r3, #0
 8005112:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005114:	4b0f      	ldr	r3, [pc, #60]	@ (8005154 <prvProcessTimerOrBlockTask+0x94>)
 8005116:	6818      	ldr	r0, [r3, #0]
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	683a      	ldr	r2, [r7, #0]
 8005120:	4619      	mov	r1, r3
 8005122:	f7fe fd4b 	bl	8003bbc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005126:	f7ff f8f7 	bl	8004318 <xTaskResumeAll>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d10a      	bne.n	8005146 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005130:	4b09      	ldr	r3, [pc, #36]	@ (8005158 <prvProcessTimerOrBlockTask+0x98>)
 8005132:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005136:	601a      	str	r2, [r3, #0]
 8005138:	f3bf 8f4f 	dsb	sy
 800513c:	f3bf 8f6f 	isb	sy
}
 8005140:	e001      	b.n	8005146 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005142:	f7ff f8e9 	bl	8004318 <xTaskResumeAll>
}
 8005146:	bf00      	nop
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	20000db4 	.word	0x20000db4
 8005154:	20000db8 	.word	0x20000db8
 8005158:	e000ed04 	.word	0xe000ed04

0800515c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005164:	4b0e      	ldr	r3, [pc, #56]	@ (80051a0 <prvGetNextExpireTime+0x44>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d101      	bne.n	8005172 <prvGetNextExpireTime+0x16>
 800516e:	2201      	movs	r2, #1
 8005170:	e000      	b.n	8005174 <prvGetNextExpireTime+0x18>
 8005172:	2200      	movs	r2, #0
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d105      	bne.n	800518c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005180:	4b07      	ldr	r3, [pc, #28]	@ (80051a0 <prvGetNextExpireTime+0x44>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	60fb      	str	r3, [r7, #12]
 800518a:	e001      	b.n	8005190 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800518c:	2300      	movs	r3, #0
 800518e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005190:	68fb      	ldr	r3, [r7, #12]
}
 8005192:	4618      	mov	r0, r3
 8005194:	3714      	adds	r7, #20
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	20000db0 	.word	0x20000db0

080051a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80051ac:	f7ff f952 	bl	8004454 <xTaskGetTickCount>
 80051b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80051b2:	4b0b      	ldr	r3, [pc, #44]	@ (80051e0 <prvSampleTimeNow+0x3c>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d205      	bcs.n	80051c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80051bc:	f000 f93a 	bl	8005434 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	601a      	str	r2, [r3, #0]
 80051c6:	e002      	b.n	80051ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80051ce:	4a04      	ldr	r2, [pc, #16]	@ (80051e0 <prvSampleTimeNow+0x3c>)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80051d4:	68fb      	ldr	r3, [r7, #12]
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	20000dc0 	.word	0x20000dc0

080051e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b086      	sub	sp, #24
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
 80051f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80051f2:	2300      	movs	r3, #0
 80051f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	68ba      	ldr	r2, [r7, #8]
 80051fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005202:	68ba      	ldr	r2, [r7, #8]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	429a      	cmp	r2, r3
 8005208:	d812      	bhi.n	8005230 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	1ad2      	subs	r2, r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	429a      	cmp	r2, r3
 8005216:	d302      	bcc.n	800521e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005218:	2301      	movs	r3, #1
 800521a:	617b      	str	r3, [r7, #20]
 800521c:	e01b      	b.n	8005256 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800521e:	4b10      	ldr	r3, [pc, #64]	@ (8005260 <prvInsertTimerInActiveList+0x7c>)
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	3304      	adds	r3, #4
 8005226:	4619      	mov	r1, r3
 8005228:	4610      	mov	r0, r2
 800522a:	f7fd fc6c 	bl	8002b06 <vListInsert>
 800522e:	e012      	b.n	8005256 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	429a      	cmp	r2, r3
 8005236:	d206      	bcs.n	8005246 <prvInsertTimerInActiveList+0x62>
 8005238:	68ba      	ldr	r2, [r7, #8]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	429a      	cmp	r2, r3
 800523e:	d302      	bcc.n	8005246 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005240:	2301      	movs	r3, #1
 8005242:	617b      	str	r3, [r7, #20]
 8005244:	e007      	b.n	8005256 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005246:	4b07      	ldr	r3, [pc, #28]	@ (8005264 <prvInsertTimerInActiveList+0x80>)
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	3304      	adds	r3, #4
 800524e:	4619      	mov	r1, r3
 8005250:	4610      	mov	r0, r2
 8005252:	f7fd fc58 	bl	8002b06 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005256:	697b      	ldr	r3, [r7, #20]
}
 8005258:	4618      	mov	r0, r3
 800525a:	3718      	adds	r7, #24
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	20000db4 	.word	0x20000db4
 8005264:	20000db0 	.word	0x20000db0

08005268 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b08e      	sub	sp, #56	@ 0x38
 800526c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800526e:	e0ce      	b.n	800540e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2b00      	cmp	r3, #0
 8005274:	da19      	bge.n	80052aa <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005276:	1d3b      	adds	r3, r7, #4
 8005278:	3304      	adds	r3, #4
 800527a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800527c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10b      	bne.n	800529a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005286:	f383 8811 	msr	BASEPRI, r3
 800528a:	f3bf 8f6f 	isb	sy
 800528e:	f3bf 8f4f 	dsb	sy
 8005292:	61fb      	str	r3, [r7, #28]
}
 8005294:	bf00      	nop
 8005296:	bf00      	nop
 8005298:	e7fd      	b.n	8005296 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800529a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052a0:	6850      	ldr	r0, [r2, #4]
 80052a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052a4:	6892      	ldr	r2, [r2, #8]
 80052a6:	4611      	mov	r1, r2
 80052a8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	f2c0 80ae 	blt.w	800540e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80052b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d004      	beq.n	80052c8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80052be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052c0:	3304      	adds	r3, #4
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7fd fc58 	bl	8002b78 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80052c8:	463b      	mov	r3, r7
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7ff ff6a 	bl	80051a4 <prvSampleTimeNow>
 80052d0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2b09      	cmp	r3, #9
 80052d6:	f200 8097 	bhi.w	8005408 <prvProcessReceivedCommands+0x1a0>
 80052da:	a201      	add	r2, pc, #4	@ (adr r2, 80052e0 <prvProcessReceivedCommands+0x78>)
 80052dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e0:	08005309 	.word	0x08005309
 80052e4:	08005309 	.word	0x08005309
 80052e8:	08005309 	.word	0x08005309
 80052ec:	0800537f 	.word	0x0800537f
 80052f0:	08005393 	.word	0x08005393
 80052f4:	080053df 	.word	0x080053df
 80052f8:	08005309 	.word	0x08005309
 80052fc:	08005309 	.word	0x08005309
 8005300:	0800537f 	.word	0x0800537f
 8005304:	08005393 	.word	0x08005393
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800530a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800530e:	f043 0301 	orr.w	r3, r3, #1
 8005312:	b2da      	uxtb	r2, r3
 8005314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005316:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800531a:	68ba      	ldr	r2, [r7, #8]
 800531c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	18d1      	adds	r1, r2, r3
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005326:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005328:	f7ff ff5c 	bl	80051e4 <prvInsertTimerInActiveList>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d06c      	beq.n	800540c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005338:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800533a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800533c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005340:	f003 0304 	and.w	r3, r3, #4
 8005344:	2b00      	cmp	r3, #0
 8005346:	d061      	beq.n	800540c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005348:	68ba      	ldr	r2, [r7, #8]
 800534a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	441a      	add	r2, r3
 8005350:	2300      	movs	r3, #0
 8005352:	9300      	str	r3, [sp, #0]
 8005354:	2300      	movs	r3, #0
 8005356:	2100      	movs	r1, #0
 8005358:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800535a:	f7ff fe01 	bl	8004f60 <xTimerGenericCommand>
 800535e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005360:	6a3b      	ldr	r3, [r7, #32]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d152      	bne.n	800540c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800536a:	f383 8811 	msr	BASEPRI, r3
 800536e:	f3bf 8f6f 	isb	sy
 8005372:	f3bf 8f4f 	dsb	sy
 8005376:	61bb      	str	r3, [r7, #24]
}
 8005378:	bf00      	nop
 800537a:	bf00      	nop
 800537c:	e7fd      	b.n	800537a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800537e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005380:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005384:	f023 0301 	bic.w	r3, r3, #1
 8005388:	b2da      	uxtb	r2, r3
 800538a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800538c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005390:	e03d      	b.n	800540e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005394:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005398:	f043 0301 	orr.w	r3, r3, #1
 800539c:	b2da      	uxtb	r2, r3
 800539e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80053a4:	68ba      	ldr	r2, [r7, #8]
 80053a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80053aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d10b      	bne.n	80053ca <prvProcessReceivedCommands+0x162>
	__asm volatile
 80053b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b6:	f383 8811 	msr	BASEPRI, r3
 80053ba:	f3bf 8f6f 	isb	sy
 80053be:	f3bf 8f4f 	dsb	sy
 80053c2:	617b      	str	r3, [r7, #20]
}
 80053c4:	bf00      	nop
 80053c6:	bf00      	nop
 80053c8:	e7fd      	b.n	80053c6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80053ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053cc:	699a      	ldr	r2, [r3, #24]
 80053ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d0:	18d1      	adds	r1, r2, r3
 80053d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053d8:	f7ff ff04 	bl	80051e4 <prvInsertTimerInActiveList>
					break;
 80053dc:	e017      	b.n	800540e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80053de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80053e4:	f003 0302 	and.w	r3, r3, #2
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d103      	bne.n	80053f4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80053ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053ee:	f000 fbeb 	bl	8005bc8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80053f2:	e00c      	b.n	800540e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80053f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80053fa:	f023 0301 	bic.w	r3, r3, #1
 80053fe:	b2da      	uxtb	r2, r3
 8005400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005402:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005406:	e002      	b.n	800540e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005408:	bf00      	nop
 800540a:	e000      	b.n	800540e <prvProcessReceivedCommands+0x1a6>
					break;
 800540c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800540e:	4b08      	ldr	r3, [pc, #32]	@ (8005430 <prvProcessReceivedCommands+0x1c8>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	1d39      	adds	r1, r7, #4
 8005414:	2200      	movs	r2, #0
 8005416:	4618      	mov	r0, r3
 8005418:	f7fd ffbc 	bl	8003394 <xQueueReceive>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	f47f af26 	bne.w	8005270 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005424:	bf00      	nop
 8005426:	bf00      	nop
 8005428:	3730      	adds	r7, #48	@ 0x30
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	20000db8 	.word	0x20000db8

08005434 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b088      	sub	sp, #32
 8005438:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800543a:	e049      	b.n	80054d0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800543c:	4b2e      	ldr	r3, [pc, #184]	@ (80054f8 <prvSwitchTimerLists+0xc4>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005446:	4b2c      	ldr	r3, [pc, #176]	@ (80054f8 <prvSwitchTimerLists+0xc4>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	3304      	adds	r3, #4
 8005454:	4618      	mov	r0, r3
 8005456:	f7fd fb8f 	bl	8002b78 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	68f8      	ldr	r0, [r7, #12]
 8005460:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005468:	f003 0304 	and.w	r3, r3, #4
 800546c:	2b00      	cmp	r3, #0
 800546e:	d02f      	beq.n	80054d0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	699b      	ldr	r3, [r3, #24]
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	4413      	add	r3, r2
 8005478:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800547a:	68ba      	ldr	r2, [r7, #8]
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	429a      	cmp	r2, r3
 8005480:	d90e      	bls.n	80054a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	68ba      	ldr	r2, [r7, #8]
 8005486:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800548e:	4b1a      	ldr	r3, [pc, #104]	@ (80054f8 <prvSwitchTimerLists+0xc4>)
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	3304      	adds	r3, #4
 8005496:	4619      	mov	r1, r3
 8005498:	4610      	mov	r0, r2
 800549a:	f7fd fb34 	bl	8002b06 <vListInsert>
 800549e:	e017      	b.n	80054d0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80054a0:	2300      	movs	r3, #0
 80054a2:	9300      	str	r3, [sp, #0]
 80054a4:	2300      	movs	r3, #0
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	2100      	movs	r1, #0
 80054aa:	68f8      	ldr	r0, [r7, #12]
 80054ac:	f7ff fd58 	bl	8004f60 <xTimerGenericCommand>
 80054b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d10b      	bne.n	80054d0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80054b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054bc:	f383 8811 	msr	BASEPRI, r3
 80054c0:	f3bf 8f6f 	isb	sy
 80054c4:	f3bf 8f4f 	dsb	sy
 80054c8:	603b      	str	r3, [r7, #0]
}
 80054ca:	bf00      	nop
 80054cc:	bf00      	nop
 80054ce:	e7fd      	b.n	80054cc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80054d0:	4b09      	ldr	r3, [pc, #36]	@ (80054f8 <prvSwitchTimerLists+0xc4>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d1b0      	bne.n	800543c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80054da:	4b07      	ldr	r3, [pc, #28]	@ (80054f8 <prvSwitchTimerLists+0xc4>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80054e0:	4b06      	ldr	r3, [pc, #24]	@ (80054fc <prvSwitchTimerLists+0xc8>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a04      	ldr	r2, [pc, #16]	@ (80054f8 <prvSwitchTimerLists+0xc4>)
 80054e6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80054e8:	4a04      	ldr	r2, [pc, #16]	@ (80054fc <prvSwitchTimerLists+0xc8>)
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	6013      	str	r3, [r2, #0]
}
 80054ee:	bf00      	nop
 80054f0:	3718      	adds	r7, #24
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	20000db0 	.word	0x20000db0
 80054fc:	20000db4 	.word	0x20000db4

08005500 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005506:	f000 f96f 	bl	80057e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800550a:	4b15      	ldr	r3, [pc, #84]	@ (8005560 <prvCheckForValidListAndQueue+0x60>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d120      	bne.n	8005554 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005512:	4814      	ldr	r0, [pc, #80]	@ (8005564 <prvCheckForValidListAndQueue+0x64>)
 8005514:	f7fd faa6 	bl	8002a64 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005518:	4813      	ldr	r0, [pc, #76]	@ (8005568 <prvCheckForValidListAndQueue+0x68>)
 800551a:	f7fd faa3 	bl	8002a64 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800551e:	4b13      	ldr	r3, [pc, #76]	@ (800556c <prvCheckForValidListAndQueue+0x6c>)
 8005520:	4a10      	ldr	r2, [pc, #64]	@ (8005564 <prvCheckForValidListAndQueue+0x64>)
 8005522:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005524:	4b12      	ldr	r3, [pc, #72]	@ (8005570 <prvCheckForValidListAndQueue+0x70>)
 8005526:	4a10      	ldr	r2, [pc, #64]	@ (8005568 <prvCheckForValidListAndQueue+0x68>)
 8005528:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800552a:	2300      	movs	r3, #0
 800552c:	9300      	str	r3, [sp, #0]
 800552e:	4b11      	ldr	r3, [pc, #68]	@ (8005574 <prvCheckForValidListAndQueue+0x74>)
 8005530:	4a11      	ldr	r2, [pc, #68]	@ (8005578 <prvCheckForValidListAndQueue+0x78>)
 8005532:	2110      	movs	r1, #16
 8005534:	200a      	movs	r0, #10
 8005536:	f7fd fbb3 	bl	8002ca0 <xQueueGenericCreateStatic>
 800553a:	4603      	mov	r3, r0
 800553c:	4a08      	ldr	r2, [pc, #32]	@ (8005560 <prvCheckForValidListAndQueue+0x60>)
 800553e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005540:	4b07      	ldr	r3, [pc, #28]	@ (8005560 <prvCheckForValidListAndQueue+0x60>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d005      	beq.n	8005554 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005548:	4b05      	ldr	r3, [pc, #20]	@ (8005560 <prvCheckForValidListAndQueue+0x60>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	490b      	ldr	r1, [pc, #44]	@ (800557c <prvCheckForValidListAndQueue+0x7c>)
 800554e:	4618      	mov	r0, r3
 8005550:	f7fe fae0 	bl	8003b14 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005554:	f000 f97a 	bl	800584c <vPortExitCritical>
}
 8005558:	bf00      	nop
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop
 8005560:	20000db8 	.word	0x20000db8
 8005564:	20000d88 	.word	0x20000d88
 8005568:	20000d9c 	.word	0x20000d9c
 800556c:	20000db0 	.word	0x20000db0
 8005570:	20000db4 	.word	0x20000db4
 8005574:	20000e64 	.word	0x20000e64
 8005578:	20000dc4 	.word	0x20000dc4
 800557c:	080068e8 	.word	0x080068e8

08005580 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	3b04      	subs	r3, #4
 8005590:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005598:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	3b04      	subs	r3, #4
 800559e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	f023 0201 	bic.w	r2, r3, #1
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	3b04      	subs	r3, #4
 80055ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80055b0:	4a0c      	ldr	r2, [pc, #48]	@ (80055e4 <pxPortInitialiseStack+0x64>)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	3b14      	subs	r3, #20
 80055ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	3b04      	subs	r3, #4
 80055c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f06f 0202 	mvn.w	r2, #2
 80055ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	3b20      	subs	r3, #32
 80055d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80055d6:	68fb      	ldr	r3, [r7, #12]
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3714      	adds	r7, #20
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr
 80055e4:	080055e9 	.word	0x080055e9

080055e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80055ee:	2300      	movs	r3, #0
 80055f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80055f2:	4b13      	ldr	r3, [pc, #76]	@ (8005640 <prvTaskExitError+0x58>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055fa:	d00b      	beq.n	8005614 <prvTaskExitError+0x2c>
	__asm volatile
 80055fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005600:	f383 8811 	msr	BASEPRI, r3
 8005604:	f3bf 8f6f 	isb	sy
 8005608:	f3bf 8f4f 	dsb	sy
 800560c:	60fb      	str	r3, [r7, #12]
}
 800560e:	bf00      	nop
 8005610:	bf00      	nop
 8005612:	e7fd      	b.n	8005610 <prvTaskExitError+0x28>
	__asm volatile
 8005614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005618:	f383 8811 	msr	BASEPRI, r3
 800561c:	f3bf 8f6f 	isb	sy
 8005620:	f3bf 8f4f 	dsb	sy
 8005624:	60bb      	str	r3, [r7, #8]
}
 8005626:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005628:	bf00      	nop
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d0fc      	beq.n	800562a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005630:	bf00      	nop
 8005632:	bf00      	nop
 8005634:	3714      	adds	r7, #20
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	2000000c 	.word	0x2000000c
	...

08005650 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005650:	4b07      	ldr	r3, [pc, #28]	@ (8005670 <pxCurrentTCBConst2>)
 8005652:	6819      	ldr	r1, [r3, #0]
 8005654:	6808      	ldr	r0, [r1, #0]
 8005656:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800565a:	f380 8809 	msr	PSP, r0
 800565e:	f3bf 8f6f 	isb	sy
 8005662:	f04f 0000 	mov.w	r0, #0
 8005666:	f380 8811 	msr	BASEPRI, r0
 800566a:	4770      	bx	lr
 800566c:	f3af 8000 	nop.w

08005670 <pxCurrentTCBConst2>:
 8005670:	20000888 	.word	0x20000888
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005674:	bf00      	nop
 8005676:	bf00      	nop

08005678 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005678:	4808      	ldr	r0, [pc, #32]	@ (800569c <prvPortStartFirstTask+0x24>)
 800567a:	6800      	ldr	r0, [r0, #0]
 800567c:	6800      	ldr	r0, [r0, #0]
 800567e:	f380 8808 	msr	MSP, r0
 8005682:	f04f 0000 	mov.w	r0, #0
 8005686:	f380 8814 	msr	CONTROL, r0
 800568a:	b662      	cpsie	i
 800568c:	b661      	cpsie	f
 800568e:	f3bf 8f4f 	dsb	sy
 8005692:	f3bf 8f6f 	isb	sy
 8005696:	df00      	svc	0
 8005698:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800569a:	bf00      	nop
 800569c:	e000ed08 	.word	0xe000ed08

080056a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b086      	sub	sp, #24
 80056a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80056a6:	4b47      	ldr	r3, [pc, #284]	@ (80057c4 <xPortStartScheduler+0x124>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a47      	ldr	r2, [pc, #284]	@ (80057c8 <xPortStartScheduler+0x128>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d10b      	bne.n	80056c8 <xPortStartScheduler+0x28>
	__asm volatile
 80056b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056b4:	f383 8811 	msr	BASEPRI, r3
 80056b8:	f3bf 8f6f 	isb	sy
 80056bc:	f3bf 8f4f 	dsb	sy
 80056c0:	613b      	str	r3, [r7, #16]
}
 80056c2:	bf00      	nop
 80056c4:	bf00      	nop
 80056c6:	e7fd      	b.n	80056c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80056c8:	4b3e      	ldr	r3, [pc, #248]	@ (80057c4 <xPortStartScheduler+0x124>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a3f      	ldr	r2, [pc, #252]	@ (80057cc <xPortStartScheduler+0x12c>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d10b      	bne.n	80056ea <xPortStartScheduler+0x4a>
	__asm volatile
 80056d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056d6:	f383 8811 	msr	BASEPRI, r3
 80056da:	f3bf 8f6f 	isb	sy
 80056de:	f3bf 8f4f 	dsb	sy
 80056e2:	60fb      	str	r3, [r7, #12]
}
 80056e4:	bf00      	nop
 80056e6:	bf00      	nop
 80056e8:	e7fd      	b.n	80056e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80056ea:	4b39      	ldr	r3, [pc, #228]	@ (80057d0 <xPortStartScheduler+0x130>)
 80056ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	22ff      	movs	r2, #255	@ 0xff
 80056fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	b2db      	uxtb	r3, r3
 8005702:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005704:	78fb      	ldrb	r3, [r7, #3]
 8005706:	b2db      	uxtb	r3, r3
 8005708:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800570c:	b2da      	uxtb	r2, r3
 800570e:	4b31      	ldr	r3, [pc, #196]	@ (80057d4 <xPortStartScheduler+0x134>)
 8005710:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005712:	4b31      	ldr	r3, [pc, #196]	@ (80057d8 <xPortStartScheduler+0x138>)
 8005714:	2207      	movs	r2, #7
 8005716:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005718:	e009      	b.n	800572e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800571a:	4b2f      	ldr	r3, [pc, #188]	@ (80057d8 <xPortStartScheduler+0x138>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	3b01      	subs	r3, #1
 8005720:	4a2d      	ldr	r2, [pc, #180]	@ (80057d8 <xPortStartScheduler+0x138>)
 8005722:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005724:	78fb      	ldrb	r3, [r7, #3]
 8005726:	b2db      	uxtb	r3, r3
 8005728:	005b      	lsls	r3, r3, #1
 800572a:	b2db      	uxtb	r3, r3
 800572c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800572e:	78fb      	ldrb	r3, [r7, #3]
 8005730:	b2db      	uxtb	r3, r3
 8005732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005736:	2b80      	cmp	r3, #128	@ 0x80
 8005738:	d0ef      	beq.n	800571a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800573a:	4b27      	ldr	r3, [pc, #156]	@ (80057d8 <xPortStartScheduler+0x138>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f1c3 0307 	rsb	r3, r3, #7
 8005742:	2b04      	cmp	r3, #4
 8005744:	d00b      	beq.n	800575e <xPortStartScheduler+0xbe>
	__asm volatile
 8005746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800574a:	f383 8811 	msr	BASEPRI, r3
 800574e:	f3bf 8f6f 	isb	sy
 8005752:	f3bf 8f4f 	dsb	sy
 8005756:	60bb      	str	r3, [r7, #8]
}
 8005758:	bf00      	nop
 800575a:	bf00      	nop
 800575c:	e7fd      	b.n	800575a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800575e:	4b1e      	ldr	r3, [pc, #120]	@ (80057d8 <xPortStartScheduler+0x138>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	021b      	lsls	r3, r3, #8
 8005764:	4a1c      	ldr	r2, [pc, #112]	@ (80057d8 <xPortStartScheduler+0x138>)
 8005766:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005768:	4b1b      	ldr	r3, [pc, #108]	@ (80057d8 <xPortStartScheduler+0x138>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005770:	4a19      	ldr	r2, [pc, #100]	@ (80057d8 <xPortStartScheduler+0x138>)
 8005772:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	b2da      	uxtb	r2, r3
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800577c:	4b17      	ldr	r3, [pc, #92]	@ (80057dc <xPortStartScheduler+0x13c>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a16      	ldr	r2, [pc, #88]	@ (80057dc <xPortStartScheduler+0x13c>)
 8005782:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005786:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005788:	4b14      	ldr	r3, [pc, #80]	@ (80057dc <xPortStartScheduler+0x13c>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a13      	ldr	r2, [pc, #76]	@ (80057dc <xPortStartScheduler+0x13c>)
 800578e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005792:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005794:	f000 f8da 	bl	800594c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005798:	4b11      	ldr	r3, [pc, #68]	@ (80057e0 <xPortStartScheduler+0x140>)
 800579a:	2200      	movs	r2, #0
 800579c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800579e:	f000 f8f9 	bl	8005994 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80057a2:	4b10      	ldr	r3, [pc, #64]	@ (80057e4 <xPortStartScheduler+0x144>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a0f      	ldr	r2, [pc, #60]	@ (80057e4 <xPortStartScheduler+0x144>)
 80057a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80057ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80057ae:	f7ff ff63 	bl	8005678 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80057b2:	f7fe ff2b 	bl	800460c <vTaskSwitchContext>
	prvTaskExitError();
 80057b6:	f7ff ff17 	bl	80055e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3718      	adds	r7, #24
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	e000ed00 	.word	0xe000ed00
 80057c8:	410fc271 	.word	0x410fc271
 80057cc:	410fc270 	.word	0x410fc270
 80057d0:	e000e400 	.word	0xe000e400
 80057d4:	20000eb4 	.word	0x20000eb4
 80057d8:	20000eb8 	.word	0x20000eb8
 80057dc:	e000ed20 	.word	0xe000ed20
 80057e0:	2000000c 	.word	0x2000000c
 80057e4:	e000ef34 	.word	0xe000ef34

080057e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
	__asm volatile
 80057ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057f2:	f383 8811 	msr	BASEPRI, r3
 80057f6:	f3bf 8f6f 	isb	sy
 80057fa:	f3bf 8f4f 	dsb	sy
 80057fe:	607b      	str	r3, [r7, #4]
}
 8005800:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005802:	4b10      	ldr	r3, [pc, #64]	@ (8005844 <vPortEnterCritical+0x5c>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	3301      	adds	r3, #1
 8005808:	4a0e      	ldr	r2, [pc, #56]	@ (8005844 <vPortEnterCritical+0x5c>)
 800580a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800580c:	4b0d      	ldr	r3, [pc, #52]	@ (8005844 <vPortEnterCritical+0x5c>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d110      	bne.n	8005836 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005814:	4b0c      	ldr	r3, [pc, #48]	@ (8005848 <vPortEnterCritical+0x60>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	b2db      	uxtb	r3, r3
 800581a:	2b00      	cmp	r3, #0
 800581c:	d00b      	beq.n	8005836 <vPortEnterCritical+0x4e>
	__asm volatile
 800581e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005822:	f383 8811 	msr	BASEPRI, r3
 8005826:	f3bf 8f6f 	isb	sy
 800582a:	f3bf 8f4f 	dsb	sy
 800582e:	603b      	str	r3, [r7, #0]
}
 8005830:	bf00      	nop
 8005832:	bf00      	nop
 8005834:	e7fd      	b.n	8005832 <vPortEnterCritical+0x4a>
	}
}
 8005836:	bf00      	nop
 8005838:	370c      	adds	r7, #12
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	2000000c 	.word	0x2000000c
 8005848:	e000ed04 	.word	0xe000ed04

0800584c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005852:	4b12      	ldr	r3, [pc, #72]	@ (800589c <vPortExitCritical+0x50>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d10b      	bne.n	8005872 <vPortExitCritical+0x26>
	__asm volatile
 800585a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800585e:	f383 8811 	msr	BASEPRI, r3
 8005862:	f3bf 8f6f 	isb	sy
 8005866:	f3bf 8f4f 	dsb	sy
 800586a:	607b      	str	r3, [r7, #4]
}
 800586c:	bf00      	nop
 800586e:	bf00      	nop
 8005870:	e7fd      	b.n	800586e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005872:	4b0a      	ldr	r3, [pc, #40]	@ (800589c <vPortExitCritical+0x50>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	3b01      	subs	r3, #1
 8005878:	4a08      	ldr	r2, [pc, #32]	@ (800589c <vPortExitCritical+0x50>)
 800587a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800587c:	4b07      	ldr	r3, [pc, #28]	@ (800589c <vPortExitCritical+0x50>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d105      	bne.n	8005890 <vPortExitCritical+0x44>
 8005884:	2300      	movs	r3, #0
 8005886:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	f383 8811 	msr	BASEPRI, r3
}
 800588e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005890:	bf00      	nop
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr
 800589c:	2000000c 	.word	0x2000000c

080058a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80058a0:	f3ef 8009 	mrs	r0, PSP
 80058a4:	f3bf 8f6f 	isb	sy
 80058a8:	4b15      	ldr	r3, [pc, #84]	@ (8005900 <pxCurrentTCBConst>)
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	f01e 0f10 	tst.w	lr, #16
 80058b0:	bf08      	it	eq
 80058b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80058b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058ba:	6010      	str	r0, [r2, #0]
 80058bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80058c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80058c4:	f380 8811 	msr	BASEPRI, r0
 80058c8:	f3bf 8f4f 	dsb	sy
 80058cc:	f3bf 8f6f 	isb	sy
 80058d0:	f7fe fe9c 	bl	800460c <vTaskSwitchContext>
 80058d4:	f04f 0000 	mov.w	r0, #0
 80058d8:	f380 8811 	msr	BASEPRI, r0
 80058dc:	bc09      	pop	{r0, r3}
 80058de:	6819      	ldr	r1, [r3, #0]
 80058e0:	6808      	ldr	r0, [r1, #0]
 80058e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058e6:	f01e 0f10 	tst.w	lr, #16
 80058ea:	bf08      	it	eq
 80058ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80058f0:	f380 8809 	msr	PSP, r0
 80058f4:	f3bf 8f6f 	isb	sy
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	f3af 8000 	nop.w

08005900 <pxCurrentTCBConst>:
 8005900:	20000888 	.word	0x20000888
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005904:	bf00      	nop
 8005906:	bf00      	nop

08005908 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
	__asm volatile
 800590e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005912:	f383 8811 	msr	BASEPRI, r3
 8005916:	f3bf 8f6f 	isb	sy
 800591a:	f3bf 8f4f 	dsb	sy
 800591e:	607b      	str	r3, [r7, #4]
}
 8005920:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005922:	f7fe fdb9 	bl	8004498 <xTaskIncrementTick>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d003      	beq.n	8005934 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800592c:	4b06      	ldr	r3, [pc, #24]	@ (8005948 <xPortSysTickHandler+0x40>)
 800592e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005932:	601a      	str	r2, [r3, #0]
 8005934:	2300      	movs	r3, #0
 8005936:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	f383 8811 	msr	BASEPRI, r3
}
 800593e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005940:	bf00      	nop
 8005942:	3708      	adds	r7, #8
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	e000ed04 	.word	0xe000ed04

0800594c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800594c:	b480      	push	{r7}
 800594e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005950:	4b0b      	ldr	r3, [pc, #44]	@ (8005980 <vPortSetupTimerInterrupt+0x34>)
 8005952:	2200      	movs	r2, #0
 8005954:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005956:	4b0b      	ldr	r3, [pc, #44]	@ (8005984 <vPortSetupTimerInterrupt+0x38>)
 8005958:	2200      	movs	r2, #0
 800595a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800595c:	4b0a      	ldr	r3, [pc, #40]	@ (8005988 <vPortSetupTimerInterrupt+0x3c>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a0a      	ldr	r2, [pc, #40]	@ (800598c <vPortSetupTimerInterrupt+0x40>)
 8005962:	fba2 2303 	umull	r2, r3, r2, r3
 8005966:	099b      	lsrs	r3, r3, #6
 8005968:	4a09      	ldr	r2, [pc, #36]	@ (8005990 <vPortSetupTimerInterrupt+0x44>)
 800596a:	3b01      	subs	r3, #1
 800596c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800596e:	4b04      	ldr	r3, [pc, #16]	@ (8005980 <vPortSetupTimerInterrupt+0x34>)
 8005970:	2207      	movs	r2, #7
 8005972:	601a      	str	r2, [r3, #0]
}
 8005974:	bf00      	nop
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop
 8005980:	e000e010 	.word	0xe000e010
 8005984:	e000e018 	.word	0xe000e018
 8005988:	20000000 	.word	0x20000000
 800598c:	10624dd3 	.word	0x10624dd3
 8005990:	e000e014 	.word	0xe000e014

08005994 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005994:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80059a4 <vPortEnableVFP+0x10>
 8005998:	6801      	ldr	r1, [r0, #0]
 800599a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800599e:	6001      	str	r1, [r0, #0]
 80059a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80059a2:	bf00      	nop
 80059a4:	e000ed88 	.word	0xe000ed88

080059a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80059ae:	f3ef 8305 	mrs	r3, IPSR
 80059b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2b0f      	cmp	r3, #15
 80059b8:	d915      	bls.n	80059e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80059ba:	4a18      	ldr	r2, [pc, #96]	@ (8005a1c <vPortValidateInterruptPriority+0x74>)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	4413      	add	r3, r2
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80059c4:	4b16      	ldr	r3, [pc, #88]	@ (8005a20 <vPortValidateInterruptPriority+0x78>)
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	7afa      	ldrb	r2, [r7, #11]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d20b      	bcs.n	80059e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80059ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059d2:	f383 8811 	msr	BASEPRI, r3
 80059d6:	f3bf 8f6f 	isb	sy
 80059da:	f3bf 8f4f 	dsb	sy
 80059de:	607b      	str	r3, [r7, #4]
}
 80059e0:	bf00      	nop
 80059e2:	bf00      	nop
 80059e4:	e7fd      	b.n	80059e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80059e6:	4b0f      	ldr	r3, [pc, #60]	@ (8005a24 <vPortValidateInterruptPriority+0x7c>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80059ee:	4b0e      	ldr	r3, [pc, #56]	@ (8005a28 <vPortValidateInterruptPriority+0x80>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d90b      	bls.n	8005a0e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80059f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059fa:	f383 8811 	msr	BASEPRI, r3
 80059fe:	f3bf 8f6f 	isb	sy
 8005a02:	f3bf 8f4f 	dsb	sy
 8005a06:	603b      	str	r3, [r7, #0]
}
 8005a08:	bf00      	nop
 8005a0a:	bf00      	nop
 8005a0c:	e7fd      	b.n	8005a0a <vPortValidateInterruptPriority+0x62>
	}
 8005a0e:	bf00      	nop
 8005a10:	3714      	adds	r7, #20
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	e000e3f0 	.word	0xe000e3f0
 8005a20:	20000eb4 	.word	0x20000eb4
 8005a24:	e000ed0c 	.word	0xe000ed0c
 8005a28:	20000eb8 	.word	0x20000eb8

08005a2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b08a      	sub	sp, #40	@ 0x28
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005a34:	2300      	movs	r3, #0
 8005a36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005a38:	f7fe fc60 	bl	80042fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005a3c:	4b5c      	ldr	r3, [pc, #368]	@ (8005bb0 <pvPortMalloc+0x184>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d101      	bne.n	8005a48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005a44:	f000 f924 	bl	8005c90 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005a48:	4b5a      	ldr	r3, [pc, #360]	@ (8005bb4 <pvPortMalloc+0x188>)
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4013      	ands	r3, r2
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f040 8095 	bne.w	8005b80 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d01e      	beq.n	8005a9a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005a5c:	2208      	movs	r2, #8
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4413      	add	r3, r2
 8005a62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f003 0307 	and.w	r3, r3, #7
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d015      	beq.n	8005a9a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f023 0307 	bic.w	r3, r3, #7
 8005a74:	3308      	adds	r3, #8
 8005a76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f003 0307 	and.w	r3, r3, #7
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00b      	beq.n	8005a9a <pvPortMalloc+0x6e>
	__asm volatile
 8005a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a86:	f383 8811 	msr	BASEPRI, r3
 8005a8a:	f3bf 8f6f 	isb	sy
 8005a8e:	f3bf 8f4f 	dsb	sy
 8005a92:	617b      	str	r3, [r7, #20]
}
 8005a94:	bf00      	nop
 8005a96:	bf00      	nop
 8005a98:	e7fd      	b.n	8005a96 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d06f      	beq.n	8005b80 <pvPortMalloc+0x154>
 8005aa0:	4b45      	ldr	r3, [pc, #276]	@ (8005bb8 <pvPortMalloc+0x18c>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d86a      	bhi.n	8005b80 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005aaa:	4b44      	ldr	r3, [pc, #272]	@ (8005bbc <pvPortMalloc+0x190>)
 8005aac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005aae:	4b43      	ldr	r3, [pc, #268]	@ (8005bbc <pvPortMalloc+0x190>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ab4:	e004      	b.n	8005ac0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d903      	bls.n	8005ad2 <pvPortMalloc+0xa6>
 8005aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d1f1      	bne.n	8005ab6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005ad2:	4b37      	ldr	r3, [pc, #220]	@ (8005bb0 <pvPortMalloc+0x184>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d051      	beq.n	8005b80 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005adc:	6a3b      	ldr	r3, [r7, #32]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2208      	movs	r2, #8
 8005ae2:	4413      	add	r3, r2
 8005ae4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	6a3b      	ldr	r3, [r7, #32]
 8005aec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af0:	685a      	ldr	r2, [r3, #4]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	1ad2      	subs	r2, r2, r3
 8005af6:	2308      	movs	r3, #8
 8005af8:	005b      	lsls	r3, r3, #1
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d920      	bls.n	8005b40 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005afe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4413      	add	r3, r2
 8005b04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	f003 0307 	and.w	r3, r3, #7
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00b      	beq.n	8005b28 <pvPortMalloc+0xfc>
	__asm volatile
 8005b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b14:	f383 8811 	msr	BASEPRI, r3
 8005b18:	f3bf 8f6f 	isb	sy
 8005b1c:	f3bf 8f4f 	dsb	sy
 8005b20:	613b      	str	r3, [r7, #16]
}
 8005b22:	bf00      	nop
 8005b24:	bf00      	nop
 8005b26:	e7fd      	b.n	8005b24 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b2a:	685a      	ldr	r2, [r3, #4]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	1ad2      	subs	r2, r2, r3
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005b3a:	69b8      	ldr	r0, [r7, #24]
 8005b3c:	f000 f90a 	bl	8005d54 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005b40:	4b1d      	ldr	r3, [pc, #116]	@ (8005bb8 <pvPortMalloc+0x18c>)
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	4a1b      	ldr	r2, [pc, #108]	@ (8005bb8 <pvPortMalloc+0x18c>)
 8005b4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b4e:	4b1a      	ldr	r3, [pc, #104]	@ (8005bb8 <pvPortMalloc+0x18c>)
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	4b1b      	ldr	r3, [pc, #108]	@ (8005bc0 <pvPortMalloc+0x194>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d203      	bcs.n	8005b62 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005b5a:	4b17      	ldr	r3, [pc, #92]	@ (8005bb8 <pvPortMalloc+0x18c>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a18      	ldr	r2, [pc, #96]	@ (8005bc0 <pvPortMalloc+0x194>)
 8005b60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b64:	685a      	ldr	r2, [r3, #4]
 8005b66:	4b13      	ldr	r3, [pc, #76]	@ (8005bb4 <pvPortMalloc+0x188>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	431a      	orrs	r2, r3
 8005b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b72:	2200      	movs	r2, #0
 8005b74:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005b76:	4b13      	ldr	r3, [pc, #76]	@ (8005bc4 <pvPortMalloc+0x198>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	4a11      	ldr	r2, [pc, #68]	@ (8005bc4 <pvPortMalloc+0x198>)
 8005b7e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005b80:	f7fe fbca 	bl	8004318 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	f003 0307 	and.w	r3, r3, #7
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00b      	beq.n	8005ba6 <pvPortMalloc+0x17a>
	__asm volatile
 8005b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b92:	f383 8811 	msr	BASEPRI, r3
 8005b96:	f3bf 8f6f 	isb	sy
 8005b9a:	f3bf 8f4f 	dsb	sy
 8005b9e:	60fb      	str	r3, [r7, #12]
}
 8005ba0:	bf00      	nop
 8005ba2:	bf00      	nop
 8005ba4:	e7fd      	b.n	8005ba2 <pvPortMalloc+0x176>
	return pvReturn;
 8005ba6:	69fb      	ldr	r3, [r7, #28]
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3728      	adds	r7, #40	@ 0x28
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	20004ac4 	.word	0x20004ac4
 8005bb4:	20004ad8 	.word	0x20004ad8
 8005bb8:	20004ac8 	.word	0x20004ac8
 8005bbc:	20004abc 	.word	0x20004abc
 8005bc0:	20004acc 	.word	0x20004acc
 8005bc4:	20004ad0 	.word	0x20004ad0

08005bc8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b086      	sub	sp, #24
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d04f      	beq.n	8005c7a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005bda:	2308      	movs	r3, #8
 8005bdc:	425b      	negs	r3, r3
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	4413      	add	r3, r2
 8005be2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	685a      	ldr	r2, [r3, #4]
 8005bec:	4b25      	ldr	r3, [pc, #148]	@ (8005c84 <vPortFree+0xbc>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d10b      	bne.n	8005c0e <vPortFree+0x46>
	__asm volatile
 8005bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bfa:	f383 8811 	msr	BASEPRI, r3
 8005bfe:	f3bf 8f6f 	isb	sy
 8005c02:	f3bf 8f4f 	dsb	sy
 8005c06:	60fb      	str	r3, [r7, #12]
}
 8005c08:	bf00      	nop
 8005c0a:	bf00      	nop
 8005c0c:	e7fd      	b.n	8005c0a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00b      	beq.n	8005c2e <vPortFree+0x66>
	__asm volatile
 8005c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c1a:	f383 8811 	msr	BASEPRI, r3
 8005c1e:	f3bf 8f6f 	isb	sy
 8005c22:	f3bf 8f4f 	dsb	sy
 8005c26:	60bb      	str	r3, [r7, #8]
}
 8005c28:	bf00      	nop
 8005c2a:	bf00      	nop
 8005c2c:	e7fd      	b.n	8005c2a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	685a      	ldr	r2, [r3, #4]
 8005c32:	4b14      	ldr	r3, [pc, #80]	@ (8005c84 <vPortFree+0xbc>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4013      	ands	r3, r2
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d01e      	beq.n	8005c7a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d11a      	bne.n	8005c7a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	685a      	ldr	r2, [r3, #4]
 8005c48:	4b0e      	ldr	r3, [pc, #56]	@ (8005c84 <vPortFree+0xbc>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	43db      	mvns	r3, r3
 8005c4e:	401a      	ands	r2, r3
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005c54:	f7fe fb52 	bl	80042fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	685a      	ldr	r2, [r3, #4]
 8005c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8005c88 <vPortFree+0xc0>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4413      	add	r3, r2
 8005c62:	4a09      	ldr	r2, [pc, #36]	@ (8005c88 <vPortFree+0xc0>)
 8005c64:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005c66:	6938      	ldr	r0, [r7, #16]
 8005c68:	f000 f874 	bl	8005d54 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005c6c:	4b07      	ldr	r3, [pc, #28]	@ (8005c8c <vPortFree+0xc4>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	3301      	adds	r3, #1
 8005c72:	4a06      	ldr	r2, [pc, #24]	@ (8005c8c <vPortFree+0xc4>)
 8005c74:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005c76:	f7fe fb4f 	bl	8004318 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005c7a:	bf00      	nop
 8005c7c:	3718      	adds	r7, #24
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	20004ad8 	.word	0x20004ad8
 8005c88:	20004ac8 	.word	0x20004ac8
 8005c8c:	20004ad4 	.word	0x20004ad4

08005c90 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005c90:	b480      	push	{r7}
 8005c92:	b085      	sub	sp, #20
 8005c94:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005c96:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005c9a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005c9c:	4b27      	ldr	r3, [pc, #156]	@ (8005d3c <prvHeapInit+0xac>)
 8005c9e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f003 0307 	and.w	r3, r3, #7
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00c      	beq.n	8005cc4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	3307      	adds	r3, #7
 8005cae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f023 0307 	bic.w	r3, r3, #7
 8005cb6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005cb8:	68ba      	ldr	r2, [r7, #8]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	4a1f      	ldr	r2, [pc, #124]	@ (8005d3c <prvHeapInit+0xac>)
 8005cc0:	4413      	add	r3, r2
 8005cc2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005cc8:	4a1d      	ldr	r2, [pc, #116]	@ (8005d40 <prvHeapInit+0xb0>)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005cce:	4b1c      	ldr	r3, [pc, #112]	@ (8005d40 <prvHeapInit+0xb0>)
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	68ba      	ldr	r2, [r7, #8]
 8005cd8:	4413      	add	r3, r2
 8005cda:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005cdc:	2208      	movs	r2, #8
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	1a9b      	subs	r3, r3, r2
 8005ce2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f023 0307 	bic.w	r3, r3, #7
 8005cea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	4a15      	ldr	r2, [pc, #84]	@ (8005d44 <prvHeapInit+0xb4>)
 8005cf0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005cf2:	4b14      	ldr	r3, [pc, #80]	@ (8005d44 <prvHeapInit+0xb4>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005cfa:	4b12      	ldr	r3, [pc, #72]	@ (8005d44 <prvHeapInit+0xb4>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	1ad2      	subs	r2, r2, r3
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005d10:	4b0c      	ldr	r3, [pc, #48]	@ (8005d44 <prvHeapInit+0xb4>)
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	4a0a      	ldr	r2, [pc, #40]	@ (8005d48 <prvHeapInit+0xb8>)
 8005d1e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	4a09      	ldr	r2, [pc, #36]	@ (8005d4c <prvHeapInit+0xbc>)
 8005d26:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005d28:	4b09      	ldr	r3, [pc, #36]	@ (8005d50 <prvHeapInit+0xc0>)
 8005d2a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005d2e:	601a      	str	r2, [r3, #0]
}
 8005d30:	bf00      	nop
 8005d32:	3714      	adds	r7, #20
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr
 8005d3c:	20000ebc 	.word	0x20000ebc
 8005d40:	20004abc 	.word	0x20004abc
 8005d44:	20004ac4 	.word	0x20004ac4
 8005d48:	20004acc 	.word	0x20004acc
 8005d4c:	20004ac8 	.word	0x20004ac8
 8005d50:	20004ad8 	.word	0x20004ad8

08005d54 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005d5c:	4b28      	ldr	r3, [pc, #160]	@ (8005e00 <prvInsertBlockIntoFreeList+0xac>)
 8005d5e:	60fb      	str	r3, [r7, #12]
 8005d60:	e002      	b.n	8005d68 <prvInsertBlockIntoFreeList+0x14>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	60fb      	str	r3, [r7, #12]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d8f7      	bhi.n	8005d62 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	68ba      	ldr	r2, [r7, #8]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d108      	bne.n	8005d96 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	685a      	ldr	r2, [r3, #4]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	441a      	add	r2, r3
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	68ba      	ldr	r2, [r7, #8]
 8005da0:	441a      	add	r2, r3
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d118      	bne.n	8005ddc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	4b15      	ldr	r3, [pc, #84]	@ (8005e04 <prvInsertBlockIntoFreeList+0xb0>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d00d      	beq.n	8005dd2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685a      	ldr	r2, [r3, #4]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	441a      	add	r2, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	601a      	str	r2, [r3, #0]
 8005dd0:	e008      	b.n	8005de4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005dd2:	4b0c      	ldr	r3, [pc, #48]	@ (8005e04 <prvInsertBlockIntoFreeList+0xb0>)
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	601a      	str	r2, [r3, #0]
 8005dda:	e003      	b.n	8005de4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d002      	beq.n	8005df2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005df2:	bf00      	nop
 8005df4:	3714      	adds	r7, #20
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	20004abc 	.word	0x20004abc
 8005e04:	20004ac4 	.word	0x20004ac4

08005e08 <std>:
 8005e08:	2300      	movs	r3, #0
 8005e0a:	b510      	push	{r4, lr}
 8005e0c:	4604      	mov	r4, r0
 8005e0e:	e9c0 3300 	strd	r3, r3, [r0]
 8005e12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e16:	6083      	str	r3, [r0, #8]
 8005e18:	8181      	strh	r1, [r0, #12]
 8005e1a:	6643      	str	r3, [r0, #100]	@ 0x64
 8005e1c:	81c2      	strh	r2, [r0, #14]
 8005e1e:	6183      	str	r3, [r0, #24]
 8005e20:	4619      	mov	r1, r3
 8005e22:	2208      	movs	r2, #8
 8005e24:	305c      	adds	r0, #92	@ 0x5c
 8005e26:	f000 f9e7 	bl	80061f8 <memset>
 8005e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8005e60 <std+0x58>)
 8005e2c:	6263      	str	r3, [r4, #36]	@ 0x24
 8005e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8005e64 <std+0x5c>)
 8005e30:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005e32:	4b0d      	ldr	r3, [pc, #52]	@ (8005e68 <std+0x60>)
 8005e34:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005e36:	4b0d      	ldr	r3, [pc, #52]	@ (8005e6c <std+0x64>)
 8005e38:	6323      	str	r3, [r4, #48]	@ 0x30
 8005e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8005e70 <std+0x68>)
 8005e3c:	6224      	str	r4, [r4, #32]
 8005e3e:	429c      	cmp	r4, r3
 8005e40:	d006      	beq.n	8005e50 <std+0x48>
 8005e42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005e46:	4294      	cmp	r4, r2
 8005e48:	d002      	beq.n	8005e50 <std+0x48>
 8005e4a:	33d0      	adds	r3, #208	@ 0xd0
 8005e4c:	429c      	cmp	r4, r3
 8005e4e:	d105      	bne.n	8005e5c <std+0x54>
 8005e50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e58:	f000 ba9c 	b.w	8006394 <__retarget_lock_init_recursive>
 8005e5c:	bd10      	pop	{r4, pc}
 8005e5e:	bf00      	nop
 8005e60:	08006049 	.word	0x08006049
 8005e64:	0800606b 	.word	0x0800606b
 8005e68:	080060a3 	.word	0x080060a3
 8005e6c:	080060c7 	.word	0x080060c7
 8005e70:	20004adc 	.word	0x20004adc

08005e74 <stdio_exit_handler>:
 8005e74:	4a02      	ldr	r2, [pc, #8]	@ (8005e80 <stdio_exit_handler+0xc>)
 8005e76:	4903      	ldr	r1, [pc, #12]	@ (8005e84 <stdio_exit_handler+0x10>)
 8005e78:	4803      	ldr	r0, [pc, #12]	@ (8005e88 <stdio_exit_handler+0x14>)
 8005e7a:	f000 b869 	b.w	8005f50 <_fwalk_sglue>
 8005e7e:	bf00      	nop
 8005e80:	20000010 	.word	0x20000010
 8005e84:	080066b1 	.word	0x080066b1
 8005e88:	20000020 	.word	0x20000020

08005e8c <cleanup_stdio>:
 8005e8c:	6841      	ldr	r1, [r0, #4]
 8005e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8005ec0 <cleanup_stdio+0x34>)
 8005e90:	4299      	cmp	r1, r3
 8005e92:	b510      	push	{r4, lr}
 8005e94:	4604      	mov	r4, r0
 8005e96:	d001      	beq.n	8005e9c <cleanup_stdio+0x10>
 8005e98:	f000 fc0a 	bl	80066b0 <_fflush_r>
 8005e9c:	68a1      	ldr	r1, [r4, #8]
 8005e9e:	4b09      	ldr	r3, [pc, #36]	@ (8005ec4 <cleanup_stdio+0x38>)
 8005ea0:	4299      	cmp	r1, r3
 8005ea2:	d002      	beq.n	8005eaa <cleanup_stdio+0x1e>
 8005ea4:	4620      	mov	r0, r4
 8005ea6:	f000 fc03 	bl	80066b0 <_fflush_r>
 8005eaa:	68e1      	ldr	r1, [r4, #12]
 8005eac:	4b06      	ldr	r3, [pc, #24]	@ (8005ec8 <cleanup_stdio+0x3c>)
 8005eae:	4299      	cmp	r1, r3
 8005eb0:	d004      	beq.n	8005ebc <cleanup_stdio+0x30>
 8005eb2:	4620      	mov	r0, r4
 8005eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005eb8:	f000 bbfa 	b.w	80066b0 <_fflush_r>
 8005ebc:	bd10      	pop	{r4, pc}
 8005ebe:	bf00      	nop
 8005ec0:	20004adc 	.word	0x20004adc
 8005ec4:	20004b44 	.word	0x20004b44
 8005ec8:	20004bac 	.word	0x20004bac

08005ecc <global_stdio_init.part.0>:
 8005ecc:	b510      	push	{r4, lr}
 8005ece:	4b0b      	ldr	r3, [pc, #44]	@ (8005efc <global_stdio_init.part.0+0x30>)
 8005ed0:	4c0b      	ldr	r4, [pc, #44]	@ (8005f00 <global_stdio_init.part.0+0x34>)
 8005ed2:	4a0c      	ldr	r2, [pc, #48]	@ (8005f04 <global_stdio_init.part.0+0x38>)
 8005ed4:	601a      	str	r2, [r3, #0]
 8005ed6:	4620      	mov	r0, r4
 8005ed8:	2200      	movs	r2, #0
 8005eda:	2104      	movs	r1, #4
 8005edc:	f7ff ff94 	bl	8005e08 <std>
 8005ee0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	2109      	movs	r1, #9
 8005ee8:	f7ff ff8e 	bl	8005e08 <std>
 8005eec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005ef0:	2202      	movs	r2, #2
 8005ef2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ef6:	2112      	movs	r1, #18
 8005ef8:	f7ff bf86 	b.w	8005e08 <std>
 8005efc:	20004c14 	.word	0x20004c14
 8005f00:	20004adc 	.word	0x20004adc
 8005f04:	08005e75 	.word	0x08005e75

08005f08 <__sfp_lock_acquire>:
 8005f08:	4801      	ldr	r0, [pc, #4]	@ (8005f10 <__sfp_lock_acquire+0x8>)
 8005f0a:	f000 ba44 	b.w	8006396 <__retarget_lock_acquire_recursive>
 8005f0e:	bf00      	nop
 8005f10:	20004c1d 	.word	0x20004c1d

08005f14 <__sfp_lock_release>:
 8005f14:	4801      	ldr	r0, [pc, #4]	@ (8005f1c <__sfp_lock_release+0x8>)
 8005f16:	f000 ba3f 	b.w	8006398 <__retarget_lock_release_recursive>
 8005f1a:	bf00      	nop
 8005f1c:	20004c1d 	.word	0x20004c1d

08005f20 <__sinit>:
 8005f20:	b510      	push	{r4, lr}
 8005f22:	4604      	mov	r4, r0
 8005f24:	f7ff fff0 	bl	8005f08 <__sfp_lock_acquire>
 8005f28:	6a23      	ldr	r3, [r4, #32]
 8005f2a:	b11b      	cbz	r3, 8005f34 <__sinit+0x14>
 8005f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f30:	f7ff bff0 	b.w	8005f14 <__sfp_lock_release>
 8005f34:	4b04      	ldr	r3, [pc, #16]	@ (8005f48 <__sinit+0x28>)
 8005f36:	6223      	str	r3, [r4, #32]
 8005f38:	4b04      	ldr	r3, [pc, #16]	@ (8005f4c <__sinit+0x2c>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d1f5      	bne.n	8005f2c <__sinit+0xc>
 8005f40:	f7ff ffc4 	bl	8005ecc <global_stdio_init.part.0>
 8005f44:	e7f2      	b.n	8005f2c <__sinit+0xc>
 8005f46:	bf00      	nop
 8005f48:	08005e8d 	.word	0x08005e8d
 8005f4c:	20004c14 	.word	0x20004c14

08005f50 <_fwalk_sglue>:
 8005f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f54:	4607      	mov	r7, r0
 8005f56:	4688      	mov	r8, r1
 8005f58:	4614      	mov	r4, r2
 8005f5a:	2600      	movs	r6, #0
 8005f5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f60:	f1b9 0901 	subs.w	r9, r9, #1
 8005f64:	d505      	bpl.n	8005f72 <_fwalk_sglue+0x22>
 8005f66:	6824      	ldr	r4, [r4, #0]
 8005f68:	2c00      	cmp	r4, #0
 8005f6a:	d1f7      	bne.n	8005f5c <_fwalk_sglue+0xc>
 8005f6c:	4630      	mov	r0, r6
 8005f6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f72:	89ab      	ldrh	r3, [r5, #12]
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d907      	bls.n	8005f88 <_fwalk_sglue+0x38>
 8005f78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	d003      	beq.n	8005f88 <_fwalk_sglue+0x38>
 8005f80:	4629      	mov	r1, r5
 8005f82:	4638      	mov	r0, r7
 8005f84:	47c0      	blx	r8
 8005f86:	4306      	orrs	r6, r0
 8005f88:	3568      	adds	r5, #104	@ 0x68
 8005f8a:	e7e9      	b.n	8005f60 <_fwalk_sglue+0x10>

08005f8c <_puts_r>:
 8005f8c:	6a03      	ldr	r3, [r0, #32]
 8005f8e:	b570      	push	{r4, r5, r6, lr}
 8005f90:	6884      	ldr	r4, [r0, #8]
 8005f92:	4605      	mov	r5, r0
 8005f94:	460e      	mov	r6, r1
 8005f96:	b90b      	cbnz	r3, 8005f9c <_puts_r+0x10>
 8005f98:	f7ff ffc2 	bl	8005f20 <__sinit>
 8005f9c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005f9e:	07db      	lsls	r3, r3, #31
 8005fa0:	d405      	bmi.n	8005fae <_puts_r+0x22>
 8005fa2:	89a3      	ldrh	r3, [r4, #12]
 8005fa4:	0598      	lsls	r0, r3, #22
 8005fa6:	d402      	bmi.n	8005fae <_puts_r+0x22>
 8005fa8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005faa:	f000 f9f4 	bl	8006396 <__retarget_lock_acquire_recursive>
 8005fae:	89a3      	ldrh	r3, [r4, #12]
 8005fb0:	0719      	lsls	r1, r3, #28
 8005fb2:	d502      	bpl.n	8005fba <_puts_r+0x2e>
 8005fb4:	6923      	ldr	r3, [r4, #16]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d135      	bne.n	8006026 <_puts_r+0x9a>
 8005fba:	4621      	mov	r1, r4
 8005fbc:	4628      	mov	r0, r5
 8005fbe:	f000 f8c5 	bl	800614c <__swsetup_r>
 8005fc2:	b380      	cbz	r0, 8006026 <_puts_r+0x9a>
 8005fc4:	f04f 35ff 	mov.w	r5, #4294967295
 8005fc8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005fca:	07da      	lsls	r2, r3, #31
 8005fcc:	d405      	bmi.n	8005fda <_puts_r+0x4e>
 8005fce:	89a3      	ldrh	r3, [r4, #12]
 8005fd0:	059b      	lsls	r3, r3, #22
 8005fd2:	d402      	bmi.n	8005fda <_puts_r+0x4e>
 8005fd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005fd6:	f000 f9df 	bl	8006398 <__retarget_lock_release_recursive>
 8005fda:	4628      	mov	r0, r5
 8005fdc:	bd70      	pop	{r4, r5, r6, pc}
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	da04      	bge.n	8005fec <_puts_r+0x60>
 8005fe2:	69a2      	ldr	r2, [r4, #24]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	dc17      	bgt.n	8006018 <_puts_r+0x8c>
 8005fe8:	290a      	cmp	r1, #10
 8005fea:	d015      	beq.n	8006018 <_puts_r+0x8c>
 8005fec:	6823      	ldr	r3, [r4, #0]
 8005fee:	1c5a      	adds	r2, r3, #1
 8005ff0:	6022      	str	r2, [r4, #0]
 8005ff2:	7019      	strb	r1, [r3, #0]
 8005ff4:	68a3      	ldr	r3, [r4, #8]
 8005ff6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	60a3      	str	r3, [r4, #8]
 8005ffe:	2900      	cmp	r1, #0
 8006000:	d1ed      	bne.n	8005fde <_puts_r+0x52>
 8006002:	2b00      	cmp	r3, #0
 8006004:	da11      	bge.n	800602a <_puts_r+0x9e>
 8006006:	4622      	mov	r2, r4
 8006008:	210a      	movs	r1, #10
 800600a:	4628      	mov	r0, r5
 800600c:	f000 f85f 	bl	80060ce <__swbuf_r>
 8006010:	3001      	adds	r0, #1
 8006012:	d0d7      	beq.n	8005fc4 <_puts_r+0x38>
 8006014:	250a      	movs	r5, #10
 8006016:	e7d7      	b.n	8005fc8 <_puts_r+0x3c>
 8006018:	4622      	mov	r2, r4
 800601a:	4628      	mov	r0, r5
 800601c:	f000 f857 	bl	80060ce <__swbuf_r>
 8006020:	3001      	adds	r0, #1
 8006022:	d1e7      	bne.n	8005ff4 <_puts_r+0x68>
 8006024:	e7ce      	b.n	8005fc4 <_puts_r+0x38>
 8006026:	3e01      	subs	r6, #1
 8006028:	e7e4      	b.n	8005ff4 <_puts_r+0x68>
 800602a:	6823      	ldr	r3, [r4, #0]
 800602c:	1c5a      	adds	r2, r3, #1
 800602e:	6022      	str	r2, [r4, #0]
 8006030:	220a      	movs	r2, #10
 8006032:	701a      	strb	r2, [r3, #0]
 8006034:	e7ee      	b.n	8006014 <_puts_r+0x88>
	...

08006038 <puts>:
 8006038:	4b02      	ldr	r3, [pc, #8]	@ (8006044 <puts+0xc>)
 800603a:	4601      	mov	r1, r0
 800603c:	6818      	ldr	r0, [r3, #0]
 800603e:	f7ff bfa5 	b.w	8005f8c <_puts_r>
 8006042:	bf00      	nop
 8006044:	2000001c 	.word	0x2000001c

08006048 <__sread>:
 8006048:	b510      	push	{r4, lr}
 800604a:	460c      	mov	r4, r1
 800604c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006050:	f000 f952 	bl	80062f8 <_read_r>
 8006054:	2800      	cmp	r0, #0
 8006056:	bfab      	itete	ge
 8006058:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800605a:	89a3      	ldrhlt	r3, [r4, #12]
 800605c:	181b      	addge	r3, r3, r0
 800605e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006062:	bfac      	ite	ge
 8006064:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006066:	81a3      	strhlt	r3, [r4, #12]
 8006068:	bd10      	pop	{r4, pc}

0800606a <__swrite>:
 800606a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800606e:	461f      	mov	r7, r3
 8006070:	898b      	ldrh	r3, [r1, #12]
 8006072:	05db      	lsls	r3, r3, #23
 8006074:	4605      	mov	r5, r0
 8006076:	460c      	mov	r4, r1
 8006078:	4616      	mov	r6, r2
 800607a:	d505      	bpl.n	8006088 <__swrite+0x1e>
 800607c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006080:	2302      	movs	r3, #2
 8006082:	2200      	movs	r2, #0
 8006084:	f000 f926 	bl	80062d4 <_lseek_r>
 8006088:	89a3      	ldrh	r3, [r4, #12]
 800608a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800608e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006092:	81a3      	strh	r3, [r4, #12]
 8006094:	4632      	mov	r2, r6
 8006096:	463b      	mov	r3, r7
 8006098:	4628      	mov	r0, r5
 800609a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800609e:	f000 b93d 	b.w	800631c <_write_r>

080060a2 <__sseek>:
 80060a2:	b510      	push	{r4, lr}
 80060a4:	460c      	mov	r4, r1
 80060a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060aa:	f000 f913 	bl	80062d4 <_lseek_r>
 80060ae:	1c43      	adds	r3, r0, #1
 80060b0:	89a3      	ldrh	r3, [r4, #12]
 80060b2:	bf15      	itete	ne
 80060b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80060b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80060ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80060be:	81a3      	strheq	r3, [r4, #12]
 80060c0:	bf18      	it	ne
 80060c2:	81a3      	strhne	r3, [r4, #12]
 80060c4:	bd10      	pop	{r4, pc}

080060c6 <__sclose>:
 80060c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060ca:	f000 b89d 	b.w	8006208 <_close_r>

080060ce <__swbuf_r>:
 80060ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060d0:	460e      	mov	r6, r1
 80060d2:	4614      	mov	r4, r2
 80060d4:	4605      	mov	r5, r0
 80060d6:	b118      	cbz	r0, 80060e0 <__swbuf_r+0x12>
 80060d8:	6a03      	ldr	r3, [r0, #32]
 80060da:	b90b      	cbnz	r3, 80060e0 <__swbuf_r+0x12>
 80060dc:	f7ff ff20 	bl	8005f20 <__sinit>
 80060e0:	69a3      	ldr	r3, [r4, #24]
 80060e2:	60a3      	str	r3, [r4, #8]
 80060e4:	89a3      	ldrh	r3, [r4, #12]
 80060e6:	071a      	lsls	r2, r3, #28
 80060e8:	d501      	bpl.n	80060ee <__swbuf_r+0x20>
 80060ea:	6923      	ldr	r3, [r4, #16]
 80060ec:	b943      	cbnz	r3, 8006100 <__swbuf_r+0x32>
 80060ee:	4621      	mov	r1, r4
 80060f0:	4628      	mov	r0, r5
 80060f2:	f000 f82b 	bl	800614c <__swsetup_r>
 80060f6:	b118      	cbz	r0, 8006100 <__swbuf_r+0x32>
 80060f8:	f04f 37ff 	mov.w	r7, #4294967295
 80060fc:	4638      	mov	r0, r7
 80060fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006100:	6823      	ldr	r3, [r4, #0]
 8006102:	6922      	ldr	r2, [r4, #16]
 8006104:	1a98      	subs	r0, r3, r2
 8006106:	6963      	ldr	r3, [r4, #20]
 8006108:	b2f6      	uxtb	r6, r6
 800610a:	4283      	cmp	r3, r0
 800610c:	4637      	mov	r7, r6
 800610e:	dc05      	bgt.n	800611c <__swbuf_r+0x4e>
 8006110:	4621      	mov	r1, r4
 8006112:	4628      	mov	r0, r5
 8006114:	f000 facc 	bl	80066b0 <_fflush_r>
 8006118:	2800      	cmp	r0, #0
 800611a:	d1ed      	bne.n	80060f8 <__swbuf_r+0x2a>
 800611c:	68a3      	ldr	r3, [r4, #8]
 800611e:	3b01      	subs	r3, #1
 8006120:	60a3      	str	r3, [r4, #8]
 8006122:	6823      	ldr	r3, [r4, #0]
 8006124:	1c5a      	adds	r2, r3, #1
 8006126:	6022      	str	r2, [r4, #0]
 8006128:	701e      	strb	r6, [r3, #0]
 800612a:	6962      	ldr	r2, [r4, #20]
 800612c:	1c43      	adds	r3, r0, #1
 800612e:	429a      	cmp	r2, r3
 8006130:	d004      	beq.n	800613c <__swbuf_r+0x6e>
 8006132:	89a3      	ldrh	r3, [r4, #12]
 8006134:	07db      	lsls	r3, r3, #31
 8006136:	d5e1      	bpl.n	80060fc <__swbuf_r+0x2e>
 8006138:	2e0a      	cmp	r6, #10
 800613a:	d1df      	bne.n	80060fc <__swbuf_r+0x2e>
 800613c:	4621      	mov	r1, r4
 800613e:	4628      	mov	r0, r5
 8006140:	f000 fab6 	bl	80066b0 <_fflush_r>
 8006144:	2800      	cmp	r0, #0
 8006146:	d0d9      	beq.n	80060fc <__swbuf_r+0x2e>
 8006148:	e7d6      	b.n	80060f8 <__swbuf_r+0x2a>
	...

0800614c <__swsetup_r>:
 800614c:	b538      	push	{r3, r4, r5, lr}
 800614e:	4b29      	ldr	r3, [pc, #164]	@ (80061f4 <__swsetup_r+0xa8>)
 8006150:	4605      	mov	r5, r0
 8006152:	6818      	ldr	r0, [r3, #0]
 8006154:	460c      	mov	r4, r1
 8006156:	b118      	cbz	r0, 8006160 <__swsetup_r+0x14>
 8006158:	6a03      	ldr	r3, [r0, #32]
 800615a:	b90b      	cbnz	r3, 8006160 <__swsetup_r+0x14>
 800615c:	f7ff fee0 	bl	8005f20 <__sinit>
 8006160:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006164:	0719      	lsls	r1, r3, #28
 8006166:	d422      	bmi.n	80061ae <__swsetup_r+0x62>
 8006168:	06da      	lsls	r2, r3, #27
 800616a:	d407      	bmi.n	800617c <__swsetup_r+0x30>
 800616c:	2209      	movs	r2, #9
 800616e:	602a      	str	r2, [r5, #0]
 8006170:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006174:	81a3      	strh	r3, [r4, #12]
 8006176:	f04f 30ff 	mov.w	r0, #4294967295
 800617a:	e033      	b.n	80061e4 <__swsetup_r+0x98>
 800617c:	0758      	lsls	r0, r3, #29
 800617e:	d512      	bpl.n	80061a6 <__swsetup_r+0x5a>
 8006180:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006182:	b141      	cbz	r1, 8006196 <__swsetup_r+0x4a>
 8006184:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006188:	4299      	cmp	r1, r3
 800618a:	d002      	beq.n	8006192 <__swsetup_r+0x46>
 800618c:	4628      	mov	r0, r5
 800618e:	f000 f913 	bl	80063b8 <_free_r>
 8006192:	2300      	movs	r3, #0
 8006194:	6363      	str	r3, [r4, #52]	@ 0x34
 8006196:	89a3      	ldrh	r3, [r4, #12]
 8006198:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800619c:	81a3      	strh	r3, [r4, #12]
 800619e:	2300      	movs	r3, #0
 80061a0:	6063      	str	r3, [r4, #4]
 80061a2:	6923      	ldr	r3, [r4, #16]
 80061a4:	6023      	str	r3, [r4, #0]
 80061a6:	89a3      	ldrh	r3, [r4, #12]
 80061a8:	f043 0308 	orr.w	r3, r3, #8
 80061ac:	81a3      	strh	r3, [r4, #12]
 80061ae:	6923      	ldr	r3, [r4, #16]
 80061b0:	b94b      	cbnz	r3, 80061c6 <__swsetup_r+0x7a>
 80061b2:	89a3      	ldrh	r3, [r4, #12]
 80061b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80061b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061bc:	d003      	beq.n	80061c6 <__swsetup_r+0x7a>
 80061be:	4621      	mov	r1, r4
 80061c0:	4628      	mov	r0, r5
 80061c2:	f000 fac3 	bl	800674c <__smakebuf_r>
 80061c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061ca:	f013 0201 	ands.w	r2, r3, #1
 80061ce:	d00a      	beq.n	80061e6 <__swsetup_r+0x9a>
 80061d0:	2200      	movs	r2, #0
 80061d2:	60a2      	str	r2, [r4, #8]
 80061d4:	6962      	ldr	r2, [r4, #20]
 80061d6:	4252      	negs	r2, r2
 80061d8:	61a2      	str	r2, [r4, #24]
 80061da:	6922      	ldr	r2, [r4, #16]
 80061dc:	b942      	cbnz	r2, 80061f0 <__swsetup_r+0xa4>
 80061de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80061e2:	d1c5      	bne.n	8006170 <__swsetup_r+0x24>
 80061e4:	bd38      	pop	{r3, r4, r5, pc}
 80061e6:	0799      	lsls	r1, r3, #30
 80061e8:	bf58      	it	pl
 80061ea:	6962      	ldrpl	r2, [r4, #20]
 80061ec:	60a2      	str	r2, [r4, #8]
 80061ee:	e7f4      	b.n	80061da <__swsetup_r+0x8e>
 80061f0:	2000      	movs	r0, #0
 80061f2:	e7f7      	b.n	80061e4 <__swsetup_r+0x98>
 80061f4:	2000001c 	.word	0x2000001c

080061f8 <memset>:
 80061f8:	4402      	add	r2, r0
 80061fa:	4603      	mov	r3, r0
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d100      	bne.n	8006202 <memset+0xa>
 8006200:	4770      	bx	lr
 8006202:	f803 1b01 	strb.w	r1, [r3], #1
 8006206:	e7f9      	b.n	80061fc <memset+0x4>

08006208 <_close_r>:
 8006208:	b538      	push	{r3, r4, r5, lr}
 800620a:	4d06      	ldr	r5, [pc, #24]	@ (8006224 <_close_r+0x1c>)
 800620c:	2300      	movs	r3, #0
 800620e:	4604      	mov	r4, r0
 8006210:	4608      	mov	r0, r1
 8006212:	602b      	str	r3, [r5, #0]
 8006214:	f7fa fda3 	bl	8000d5e <_close>
 8006218:	1c43      	adds	r3, r0, #1
 800621a:	d102      	bne.n	8006222 <_close_r+0x1a>
 800621c:	682b      	ldr	r3, [r5, #0]
 800621e:	b103      	cbz	r3, 8006222 <_close_r+0x1a>
 8006220:	6023      	str	r3, [r4, #0]
 8006222:	bd38      	pop	{r3, r4, r5, pc}
 8006224:	20004c18 	.word	0x20004c18

08006228 <_reclaim_reent>:
 8006228:	4b29      	ldr	r3, [pc, #164]	@ (80062d0 <_reclaim_reent+0xa8>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4283      	cmp	r3, r0
 800622e:	b570      	push	{r4, r5, r6, lr}
 8006230:	4604      	mov	r4, r0
 8006232:	d04b      	beq.n	80062cc <_reclaim_reent+0xa4>
 8006234:	69c3      	ldr	r3, [r0, #28]
 8006236:	b1ab      	cbz	r3, 8006264 <_reclaim_reent+0x3c>
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	b16b      	cbz	r3, 8006258 <_reclaim_reent+0x30>
 800623c:	2500      	movs	r5, #0
 800623e:	69e3      	ldr	r3, [r4, #28]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	5959      	ldr	r1, [r3, r5]
 8006244:	2900      	cmp	r1, #0
 8006246:	d13b      	bne.n	80062c0 <_reclaim_reent+0x98>
 8006248:	3504      	adds	r5, #4
 800624a:	2d80      	cmp	r5, #128	@ 0x80
 800624c:	d1f7      	bne.n	800623e <_reclaim_reent+0x16>
 800624e:	69e3      	ldr	r3, [r4, #28]
 8006250:	4620      	mov	r0, r4
 8006252:	68d9      	ldr	r1, [r3, #12]
 8006254:	f000 f8b0 	bl	80063b8 <_free_r>
 8006258:	69e3      	ldr	r3, [r4, #28]
 800625a:	6819      	ldr	r1, [r3, #0]
 800625c:	b111      	cbz	r1, 8006264 <_reclaim_reent+0x3c>
 800625e:	4620      	mov	r0, r4
 8006260:	f000 f8aa 	bl	80063b8 <_free_r>
 8006264:	6961      	ldr	r1, [r4, #20]
 8006266:	b111      	cbz	r1, 800626e <_reclaim_reent+0x46>
 8006268:	4620      	mov	r0, r4
 800626a:	f000 f8a5 	bl	80063b8 <_free_r>
 800626e:	69e1      	ldr	r1, [r4, #28]
 8006270:	b111      	cbz	r1, 8006278 <_reclaim_reent+0x50>
 8006272:	4620      	mov	r0, r4
 8006274:	f000 f8a0 	bl	80063b8 <_free_r>
 8006278:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800627a:	b111      	cbz	r1, 8006282 <_reclaim_reent+0x5a>
 800627c:	4620      	mov	r0, r4
 800627e:	f000 f89b 	bl	80063b8 <_free_r>
 8006282:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006284:	b111      	cbz	r1, 800628c <_reclaim_reent+0x64>
 8006286:	4620      	mov	r0, r4
 8006288:	f000 f896 	bl	80063b8 <_free_r>
 800628c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800628e:	b111      	cbz	r1, 8006296 <_reclaim_reent+0x6e>
 8006290:	4620      	mov	r0, r4
 8006292:	f000 f891 	bl	80063b8 <_free_r>
 8006296:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006298:	b111      	cbz	r1, 80062a0 <_reclaim_reent+0x78>
 800629a:	4620      	mov	r0, r4
 800629c:	f000 f88c 	bl	80063b8 <_free_r>
 80062a0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80062a2:	b111      	cbz	r1, 80062aa <_reclaim_reent+0x82>
 80062a4:	4620      	mov	r0, r4
 80062a6:	f000 f887 	bl	80063b8 <_free_r>
 80062aa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80062ac:	b111      	cbz	r1, 80062b4 <_reclaim_reent+0x8c>
 80062ae:	4620      	mov	r0, r4
 80062b0:	f000 f882 	bl	80063b8 <_free_r>
 80062b4:	6a23      	ldr	r3, [r4, #32]
 80062b6:	b14b      	cbz	r3, 80062cc <_reclaim_reent+0xa4>
 80062b8:	4620      	mov	r0, r4
 80062ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80062be:	4718      	bx	r3
 80062c0:	680e      	ldr	r6, [r1, #0]
 80062c2:	4620      	mov	r0, r4
 80062c4:	f000 f878 	bl	80063b8 <_free_r>
 80062c8:	4631      	mov	r1, r6
 80062ca:	e7bb      	b.n	8006244 <_reclaim_reent+0x1c>
 80062cc:	bd70      	pop	{r4, r5, r6, pc}
 80062ce:	bf00      	nop
 80062d0:	2000001c 	.word	0x2000001c

080062d4 <_lseek_r>:
 80062d4:	b538      	push	{r3, r4, r5, lr}
 80062d6:	4d07      	ldr	r5, [pc, #28]	@ (80062f4 <_lseek_r+0x20>)
 80062d8:	4604      	mov	r4, r0
 80062da:	4608      	mov	r0, r1
 80062dc:	4611      	mov	r1, r2
 80062de:	2200      	movs	r2, #0
 80062e0:	602a      	str	r2, [r5, #0]
 80062e2:	461a      	mov	r2, r3
 80062e4:	f7fa fd62 	bl	8000dac <_lseek>
 80062e8:	1c43      	adds	r3, r0, #1
 80062ea:	d102      	bne.n	80062f2 <_lseek_r+0x1e>
 80062ec:	682b      	ldr	r3, [r5, #0]
 80062ee:	b103      	cbz	r3, 80062f2 <_lseek_r+0x1e>
 80062f0:	6023      	str	r3, [r4, #0]
 80062f2:	bd38      	pop	{r3, r4, r5, pc}
 80062f4:	20004c18 	.word	0x20004c18

080062f8 <_read_r>:
 80062f8:	b538      	push	{r3, r4, r5, lr}
 80062fa:	4d07      	ldr	r5, [pc, #28]	@ (8006318 <_read_r+0x20>)
 80062fc:	4604      	mov	r4, r0
 80062fe:	4608      	mov	r0, r1
 8006300:	4611      	mov	r1, r2
 8006302:	2200      	movs	r2, #0
 8006304:	602a      	str	r2, [r5, #0]
 8006306:	461a      	mov	r2, r3
 8006308:	f7fa fcf0 	bl	8000cec <_read>
 800630c:	1c43      	adds	r3, r0, #1
 800630e:	d102      	bne.n	8006316 <_read_r+0x1e>
 8006310:	682b      	ldr	r3, [r5, #0]
 8006312:	b103      	cbz	r3, 8006316 <_read_r+0x1e>
 8006314:	6023      	str	r3, [r4, #0]
 8006316:	bd38      	pop	{r3, r4, r5, pc}
 8006318:	20004c18 	.word	0x20004c18

0800631c <_write_r>:
 800631c:	b538      	push	{r3, r4, r5, lr}
 800631e:	4d07      	ldr	r5, [pc, #28]	@ (800633c <_write_r+0x20>)
 8006320:	4604      	mov	r4, r0
 8006322:	4608      	mov	r0, r1
 8006324:	4611      	mov	r1, r2
 8006326:	2200      	movs	r2, #0
 8006328:	602a      	str	r2, [r5, #0]
 800632a:	461a      	mov	r2, r3
 800632c:	f7fa fcfb 	bl	8000d26 <_write>
 8006330:	1c43      	adds	r3, r0, #1
 8006332:	d102      	bne.n	800633a <_write_r+0x1e>
 8006334:	682b      	ldr	r3, [r5, #0]
 8006336:	b103      	cbz	r3, 800633a <_write_r+0x1e>
 8006338:	6023      	str	r3, [r4, #0]
 800633a:	bd38      	pop	{r3, r4, r5, pc}
 800633c:	20004c18 	.word	0x20004c18

08006340 <__errno>:
 8006340:	4b01      	ldr	r3, [pc, #4]	@ (8006348 <__errno+0x8>)
 8006342:	6818      	ldr	r0, [r3, #0]
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	2000001c 	.word	0x2000001c

0800634c <__libc_init_array>:
 800634c:	b570      	push	{r4, r5, r6, lr}
 800634e:	4d0d      	ldr	r5, [pc, #52]	@ (8006384 <__libc_init_array+0x38>)
 8006350:	4c0d      	ldr	r4, [pc, #52]	@ (8006388 <__libc_init_array+0x3c>)
 8006352:	1b64      	subs	r4, r4, r5
 8006354:	10a4      	asrs	r4, r4, #2
 8006356:	2600      	movs	r6, #0
 8006358:	42a6      	cmp	r6, r4
 800635a:	d109      	bne.n	8006370 <__libc_init_array+0x24>
 800635c:	4d0b      	ldr	r5, [pc, #44]	@ (800638c <__libc_init_array+0x40>)
 800635e:	4c0c      	ldr	r4, [pc, #48]	@ (8006390 <__libc_init_array+0x44>)
 8006360:	f000 fa62 	bl	8006828 <_init>
 8006364:	1b64      	subs	r4, r4, r5
 8006366:	10a4      	asrs	r4, r4, #2
 8006368:	2600      	movs	r6, #0
 800636a:	42a6      	cmp	r6, r4
 800636c:	d105      	bne.n	800637a <__libc_init_array+0x2e>
 800636e:	bd70      	pop	{r4, r5, r6, pc}
 8006370:	f855 3b04 	ldr.w	r3, [r5], #4
 8006374:	4798      	blx	r3
 8006376:	3601      	adds	r6, #1
 8006378:	e7ee      	b.n	8006358 <__libc_init_array+0xc>
 800637a:	f855 3b04 	ldr.w	r3, [r5], #4
 800637e:	4798      	blx	r3
 8006380:	3601      	adds	r6, #1
 8006382:	e7f2      	b.n	800636a <__libc_init_array+0x1e>
 8006384:	080069e0 	.word	0x080069e0
 8006388:	080069e0 	.word	0x080069e0
 800638c:	080069e0 	.word	0x080069e0
 8006390:	080069e4 	.word	0x080069e4

08006394 <__retarget_lock_init_recursive>:
 8006394:	4770      	bx	lr

08006396 <__retarget_lock_acquire_recursive>:
 8006396:	4770      	bx	lr

08006398 <__retarget_lock_release_recursive>:
 8006398:	4770      	bx	lr

0800639a <memcpy>:
 800639a:	440a      	add	r2, r1
 800639c:	4291      	cmp	r1, r2
 800639e:	f100 33ff 	add.w	r3, r0, #4294967295
 80063a2:	d100      	bne.n	80063a6 <memcpy+0xc>
 80063a4:	4770      	bx	lr
 80063a6:	b510      	push	{r4, lr}
 80063a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063b0:	4291      	cmp	r1, r2
 80063b2:	d1f9      	bne.n	80063a8 <memcpy+0xe>
 80063b4:	bd10      	pop	{r4, pc}
	...

080063b8 <_free_r>:
 80063b8:	b538      	push	{r3, r4, r5, lr}
 80063ba:	4605      	mov	r5, r0
 80063bc:	2900      	cmp	r1, #0
 80063be:	d041      	beq.n	8006444 <_free_r+0x8c>
 80063c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063c4:	1f0c      	subs	r4, r1, #4
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	bfb8      	it	lt
 80063ca:	18e4      	addlt	r4, r4, r3
 80063cc:	f000 f8e0 	bl	8006590 <__malloc_lock>
 80063d0:	4a1d      	ldr	r2, [pc, #116]	@ (8006448 <_free_r+0x90>)
 80063d2:	6813      	ldr	r3, [r2, #0]
 80063d4:	b933      	cbnz	r3, 80063e4 <_free_r+0x2c>
 80063d6:	6063      	str	r3, [r4, #4]
 80063d8:	6014      	str	r4, [r2, #0]
 80063da:	4628      	mov	r0, r5
 80063dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063e0:	f000 b8dc 	b.w	800659c <__malloc_unlock>
 80063e4:	42a3      	cmp	r3, r4
 80063e6:	d908      	bls.n	80063fa <_free_r+0x42>
 80063e8:	6820      	ldr	r0, [r4, #0]
 80063ea:	1821      	adds	r1, r4, r0
 80063ec:	428b      	cmp	r3, r1
 80063ee:	bf01      	itttt	eq
 80063f0:	6819      	ldreq	r1, [r3, #0]
 80063f2:	685b      	ldreq	r3, [r3, #4]
 80063f4:	1809      	addeq	r1, r1, r0
 80063f6:	6021      	streq	r1, [r4, #0]
 80063f8:	e7ed      	b.n	80063d6 <_free_r+0x1e>
 80063fa:	461a      	mov	r2, r3
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	b10b      	cbz	r3, 8006404 <_free_r+0x4c>
 8006400:	42a3      	cmp	r3, r4
 8006402:	d9fa      	bls.n	80063fa <_free_r+0x42>
 8006404:	6811      	ldr	r1, [r2, #0]
 8006406:	1850      	adds	r0, r2, r1
 8006408:	42a0      	cmp	r0, r4
 800640a:	d10b      	bne.n	8006424 <_free_r+0x6c>
 800640c:	6820      	ldr	r0, [r4, #0]
 800640e:	4401      	add	r1, r0
 8006410:	1850      	adds	r0, r2, r1
 8006412:	4283      	cmp	r3, r0
 8006414:	6011      	str	r1, [r2, #0]
 8006416:	d1e0      	bne.n	80063da <_free_r+0x22>
 8006418:	6818      	ldr	r0, [r3, #0]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	6053      	str	r3, [r2, #4]
 800641e:	4408      	add	r0, r1
 8006420:	6010      	str	r0, [r2, #0]
 8006422:	e7da      	b.n	80063da <_free_r+0x22>
 8006424:	d902      	bls.n	800642c <_free_r+0x74>
 8006426:	230c      	movs	r3, #12
 8006428:	602b      	str	r3, [r5, #0]
 800642a:	e7d6      	b.n	80063da <_free_r+0x22>
 800642c:	6820      	ldr	r0, [r4, #0]
 800642e:	1821      	adds	r1, r4, r0
 8006430:	428b      	cmp	r3, r1
 8006432:	bf04      	itt	eq
 8006434:	6819      	ldreq	r1, [r3, #0]
 8006436:	685b      	ldreq	r3, [r3, #4]
 8006438:	6063      	str	r3, [r4, #4]
 800643a:	bf04      	itt	eq
 800643c:	1809      	addeq	r1, r1, r0
 800643e:	6021      	streq	r1, [r4, #0]
 8006440:	6054      	str	r4, [r2, #4]
 8006442:	e7ca      	b.n	80063da <_free_r+0x22>
 8006444:	bd38      	pop	{r3, r4, r5, pc}
 8006446:	bf00      	nop
 8006448:	20004c24 	.word	0x20004c24

0800644c <sbrk_aligned>:
 800644c:	b570      	push	{r4, r5, r6, lr}
 800644e:	4e0f      	ldr	r6, [pc, #60]	@ (800648c <sbrk_aligned+0x40>)
 8006450:	460c      	mov	r4, r1
 8006452:	6831      	ldr	r1, [r6, #0]
 8006454:	4605      	mov	r5, r0
 8006456:	b911      	cbnz	r1, 800645e <sbrk_aligned+0x12>
 8006458:	f000 f9d6 	bl	8006808 <_sbrk_r>
 800645c:	6030      	str	r0, [r6, #0]
 800645e:	4621      	mov	r1, r4
 8006460:	4628      	mov	r0, r5
 8006462:	f000 f9d1 	bl	8006808 <_sbrk_r>
 8006466:	1c43      	adds	r3, r0, #1
 8006468:	d103      	bne.n	8006472 <sbrk_aligned+0x26>
 800646a:	f04f 34ff 	mov.w	r4, #4294967295
 800646e:	4620      	mov	r0, r4
 8006470:	bd70      	pop	{r4, r5, r6, pc}
 8006472:	1cc4      	adds	r4, r0, #3
 8006474:	f024 0403 	bic.w	r4, r4, #3
 8006478:	42a0      	cmp	r0, r4
 800647a:	d0f8      	beq.n	800646e <sbrk_aligned+0x22>
 800647c:	1a21      	subs	r1, r4, r0
 800647e:	4628      	mov	r0, r5
 8006480:	f000 f9c2 	bl	8006808 <_sbrk_r>
 8006484:	3001      	adds	r0, #1
 8006486:	d1f2      	bne.n	800646e <sbrk_aligned+0x22>
 8006488:	e7ef      	b.n	800646a <sbrk_aligned+0x1e>
 800648a:	bf00      	nop
 800648c:	20004c20 	.word	0x20004c20

08006490 <_malloc_r>:
 8006490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006494:	1ccd      	adds	r5, r1, #3
 8006496:	f025 0503 	bic.w	r5, r5, #3
 800649a:	3508      	adds	r5, #8
 800649c:	2d0c      	cmp	r5, #12
 800649e:	bf38      	it	cc
 80064a0:	250c      	movcc	r5, #12
 80064a2:	2d00      	cmp	r5, #0
 80064a4:	4606      	mov	r6, r0
 80064a6:	db01      	blt.n	80064ac <_malloc_r+0x1c>
 80064a8:	42a9      	cmp	r1, r5
 80064aa:	d904      	bls.n	80064b6 <_malloc_r+0x26>
 80064ac:	230c      	movs	r3, #12
 80064ae:	6033      	str	r3, [r6, #0]
 80064b0:	2000      	movs	r0, #0
 80064b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800658c <_malloc_r+0xfc>
 80064ba:	f000 f869 	bl	8006590 <__malloc_lock>
 80064be:	f8d8 3000 	ldr.w	r3, [r8]
 80064c2:	461c      	mov	r4, r3
 80064c4:	bb44      	cbnz	r4, 8006518 <_malloc_r+0x88>
 80064c6:	4629      	mov	r1, r5
 80064c8:	4630      	mov	r0, r6
 80064ca:	f7ff ffbf 	bl	800644c <sbrk_aligned>
 80064ce:	1c43      	adds	r3, r0, #1
 80064d0:	4604      	mov	r4, r0
 80064d2:	d158      	bne.n	8006586 <_malloc_r+0xf6>
 80064d4:	f8d8 4000 	ldr.w	r4, [r8]
 80064d8:	4627      	mov	r7, r4
 80064da:	2f00      	cmp	r7, #0
 80064dc:	d143      	bne.n	8006566 <_malloc_r+0xd6>
 80064de:	2c00      	cmp	r4, #0
 80064e0:	d04b      	beq.n	800657a <_malloc_r+0xea>
 80064e2:	6823      	ldr	r3, [r4, #0]
 80064e4:	4639      	mov	r1, r7
 80064e6:	4630      	mov	r0, r6
 80064e8:	eb04 0903 	add.w	r9, r4, r3
 80064ec:	f000 f98c 	bl	8006808 <_sbrk_r>
 80064f0:	4581      	cmp	r9, r0
 80064f2:	d142      	bne.n	800657a <_malloc_r+0xea>
 80064f4:	6821      	ldr	r1, [r4, #0]
 80064f6:	1a6d      	subs	r5, r5, r1
 80064f8:	4629      	mov	r1, r5
 80064fa:	4630      	mov	r0, r6
 80064fc:	f7ff ffa6 	bl	800644c <sbrk_aligned>
 8006500:	3001      	adds	r0, #1
 8006502:	d03a      	beq.n	800657a <_malloc_r+0xea>
 8006504:	6823      	ldr	r3, [r4, #0]
 8006506:	442b      	add	r3, r5
 8006508:	6023      	str	r3, [r4, #0]
 800650a:	f8d8 3000 	ldr.w	r3, [r8]
 800650e:	685a      	ldr	r2, [r3, #4]
 8006510:	bb62      	cbnz	r2, 800656c <_malloc_r+0xdc>
 8006512:	f8c8 7000 	str.w	r7, [r8]
 8006516:	e00f      	b.n	8006538 <_malloc_r+0xa8>
 8006518:	6822      	ldr	r2, [r4, #0]
 800651a:	1b52      	subs	r2, r2, r5
 800651c:	d420      	bmi.n	8006560 <_malloc_r+0xd0>
 800651e:	2a0b      	cmp	r2, #11
 8006520:	d917      	bls.n	8006552 <_malloc_r+0xc2>
 8006522:	1961      	adds	r1, r4, r5
 8006524:	42a3      	cmp	r3, r4
 8006526:	6025      	str	r5, [r4, #0]
 8006528:	bf18      	it	ne
 800652a:	6059      	strne	r1, [r3, #4]
 800652c:	6863      	ldr	r3, [r4, #4]
 800652e:	bf08      	it	eq
 8006530:	f8c8 1000 	streq.w	r1, [r8]
 8006534:	5162      	str	r2, [r4, r5]
 8006536:	604b      	str	r3, [r1, #4]
 8006538:	4630      	mov	r0, r6
 800653a:	f000 f82f 	bl	800659c <__malloc_unlock>
 800653e:	f104 000b 	add.w	r0, r4, #11
 8006542:	1d23      	adds	r3, r4, #4
 8006544:	f020 0007 	bic.w	r0, r0, #7
 8006548:	1ac2      	subs	r2, r0, r3
 800654a:	bf1c      	itt	ne
 800654c:	1a1b      	subne	r3, r3, r0
 800654e:	50a3      	strne	r3, [r4, r2]
 8006550:	e7af      	b.n	80064b2 <_malloc_r+0x22>
 8006552:	6862      	ldr	r2, [r4, #4]
 8006554:	42a3      	cmp	r3, r4
 8006556:	bf0c      	ite	eq
 8006558:	f8c8 2000 	streq.w	r2, [r8]
 800655c:	605a      	strne	r2, [r3, #4]
 800655e:	e7eb      	b.n	8006538 <_malloc_r+0xa8>
 8006560:	4623      	mov	r3, r4
 8006562:	6864      	ldr	r4, [r4, #4]
 8006564:	e7ae      	b.n	80064c4 <_malloc_r+0x34>
 8006566:	463c      	mov	r4, r7
 8006568:	687f      	ldr	r7, [r7, #4]
 800656a:	e7b6      	b.n	80064da <_malloc_r+0x4a>
 800656c:	461a      	mov	r2, r3
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	42a3      	cmp	r3, r4
 8006572:	d1fb      	bne.n	800656c <_malloc_r+0xdc>
 8006574:	2300      	movs	r3, #0
 8006576:	6053      	str	r3, [r2, #4]
 8006578:	e7de      	b.n	8006538 <_malloc_r+0xa8>
 800657a:	230c      	movs	r3, #12
 800657c:	6033      	str	r3, [r6, #0]
 800657e:	4630      	mov	r0, r6
 8006580:	f000 f80c 	bl	800659c <__malloc_unlock>
 8006584:	e794      	b.n	80064b0 <_malloc_r+0x20>
 8006586:	6005      	str	r5, [r0, #0]
 8006588:	e7d6      	b.n	8006538 <_malloc_r+0xa8>
 800658a:	bf00      	nop
 800658c:	20004c24 	.word	0x20004c24

08006590 <__malloc_lock>:
 8006590:	4801      	ldr	r0, [pc, #4]	@ (8006598 <__malloc_lock+0x8>)
 8006592:	f7ff bf00 	b.w	8006396 <__retarget_lock_acquire_recursive>
 8006596:	bf00      	nop
 8006598:	20004c1c 	.word	0x20004c1c

0800659c <__malloc_unlock>:
 800659c:	4801      	ldr	r0, [pc, #4]	@ (80065a4 <__malloc_unlock+0x8>)
 800659e:	f7ff befb 	b.w	8006398 <__retarget_lock_release_recursive>
 80065a2:	bf00      	nop
 80065a4:	20004c1c 	.word	0x20004c1c

080065a8 <__sflush_r>:
 80065a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80065ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065b0:	0716      	lsls	r6, r2, #28
 80065b2:	4605      	mov	r5, r0
 80065b4:	460c      	mov	r4, r1
 80065b6:	d454      	bmi.n	8006662 <__sflush_r+0xba>
 80065b8:	684b      	ldr	r3, [r1, #4]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	dc02      	bgt.n	80065c4 <__sflush_r+0x1c>
 80065be:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	dd48      	ble.n	8006656 <__sflush_r+0xae>
 80065c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80065c6:	2e00      	cmp	r6, #0
 80065c8:	d045      	beq.n	8006656 <__sflush_r+0xae>
 80065ca:	2300      	movs	r3, #0
 80065cc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80065d0:	682f      	ldr	r7, [r5, #0]
 80065d2:	6a21      	ldr	r1, [r4, #32]
 80065d4:	602b      	str	r3, [r5, #0]
 80065d6:	d030      	beq.n	800663a <__sflush_r+0x92>
 80065d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80065da:	89a3      	ldrh	r3, [r4, #12]
 80065dc:	0759      	lsls	r1, r3, #29
 80065de:	d505      	bpl.n	80065ec <__sflush_r+0x44>
 80065e0:	6863      	ldr	r3, [r4, #4]
 80065e2:	1ad2      	subs	r2, r2, r3
 80065e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80065e6:	b10b      	cbz	r3, 80065ec <__sflush_r+0x44>
 80065e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80065ea:	1ad2      	subs	r2, r2, r3
 80065ec:	2300      	movs	r3, #0
 80065ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80065f0:	6a21      	ldr	r1, [r4, #32]
 80065f2:	4628      	mov	r0, r5
 80065f4:	47b0      	blx	r6
 80065f6:	1c43      	adds	r3, r0, #1
 80065f8:	89a3      	ldrh	r3, [r4, #12]
 80065fa:	d106      	bne.n	800660a <__sflush_r+0x62>
 80065fc:	6829      	ldr	r1, [r5, #0]
 80065fe:	291d      	cmp	r1, #29
 8006600:	d82b      	bhi.n	800665a <__sflush_r+0xb2>
 8006602:	4a2a      	ldr	r2, [pc, #168]	@ (80066ac <__sflush_r+0x104>)
 8006604:	410a      	asrs	r2, r1
 8006606:	07d6      	lsls	r6, r2, #31
 8006608:	d427      	bmi.n	800665a <__sflush_r+0xb2>
 800660a:	2200      	movs	r2, #0
 800660c:	6062      	str	r2, [r4, #4]
 800660e:	04d9      	lsls	r1, r3, #19
 8006610:	6922      	ldr	r2, [r4, #16]
 8006612:	6022      	str	r2, [r4, #0]
 8006614:	d504      	bpl.n	8006620 <__sflush_r+0x78>
 8006616:	1c42      	adds	r2, r0, #1
 8006618:	d101      	bne.n	800661e <__sflush_r+0x76>
 800661a:	682b      	ldr	r3, [r5, #0]
 800661c:	b903      	cbnz	r3, 8006620 <__sflush_r+0x78>
 800661e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006620:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006622:	602f      	str	r7, [r5, #0]
 8006624:	b1b9      	cbz	r1, 8006656 <__sflush_r+0xae>
 8006626:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800662a:	4299      	cmp	r1, r3
 800662c:	d002      	beq.n	8006634 <__sflush_r+0x8c>
 800662e:	4628      	mov	r0, r5
 8006630:	f7ff fec2 	bl	80063b8 <_free_r>
 8006634:	2300      	movs	r3, #0
 8006636:	6363      	str	r3, [r4, #52]	@ 0x34
 8006638:	e00d      	b.n	8006656 <__sflush_r+0xae>
 800663a:	2301      	movs	r3, #1
 800663c:	4628      	mov	r0, r5
 800663e:	47b0      	blx	r6
 8006640:	4602      	mov	r2, r0
 8006642:	1c50      	adds	r0, r2, #1
 8006644:	d1c9      	bne.n	80065da <__sflush_r+0x32>
 8006646:	682b      	ldr	r3, [r5, #0]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d0c6      	beq.n	80065da <__sflush_r+0x32>
 800664c:	2b1d      	cmp	r3, #29
 800664e:	d001      	beq.n	8006654 <__sflush_r+0xac>
 8006650:	2b16      	cmp	r3, #22
 8006652:	d11e      	bne.n	8006692 <__sflush_r+0xea>
 8006654:	602f      	str	r7, [r5, #0]
 8006656:	2000      	movs	r0, #0
 8006658:	e022      	b.n	80066a0 <__sflush_r+0xf8>
 800665a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800665e:	b21b      	sxth	r3, r3
 8006660:	e01b      	b.n	800669a <__sflush_r+0xf2>
 8006662:	690f      	ldr	r7, [r1, #16]
 8006664:	2f00      	cmp	r7, #0
 8006666:	d0f6      	beq.n	8006656 <__sflush_r+0xae>
 8006668:	0793      	lsls	r3, r2, #30
 800666a:	680e      	ldr	r6, [r1, #0]
 800666c:	bf08      	it	eq
 800666e:	694b      	ldreq	r3, [r1, #20]
 8006670:	600f      	str	r7, [r1, #0]
 8006672:	bf18      	it	ne
 8006674:	2300      	movne	r3, #0
 8006676:	eba6 0807 	sub.w	r8, r6, r7
 800667a:	608b      	str	r3, [r1, #8]
 800667c:	f1b8 0f00 	cmp.w	r8, #0
 8006680:	dde9      	ble.n	8006656 <__sflush_r+0xae>
 8006682:	6a21      	ldr	r1, [r4, #32]
 8006684:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006686:	4643      	mov	r3, r8
 8006688:	463a      	mov	r2, r7
 800668a:	4628      	mov	r0, r5
 800668c:	47b0      	blx	r6
 800668e:	2800      	cmp	r0, #0
 8006690:	dc08      	bgt.n	80066a4 <__sflush_r+0xfc>
 8006692:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006696:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800669a:	81a3      	strh	r3, [r4, #12]
 800669c:	f04f 30ff 	mov.w	r0, #4294967295
 80066a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066a4:	4407      	add	r7, r0
 80066a6:	eba8 0800 	sub.w	r8, r8, r0
 80066aa:	e7e7      	b.n	800667c <__sflush_r+0xd4>
 80066ac:	dfbffffe 	.word	0xdfbffffe

080066b0 <_fflush_r>:
 80066b0:	b538      	push	{r3, r4, r5, lr}
 80066b2:	690b      	ldr	r3, [r1, #16]
 80066b4:	4605      	mov	r5, r0
 80066b6:	460c      	mov	r4, r1
 80066b8:	b913      	cbnz	r3, 80066c0 <_fflush_r+0x10>
 80066ba:	2500      	movs	r5, #0
 80066bc:	4628      	mov	r0, r5
 80066be:	bd38      	pop	{r3, r4, r5, pc}
 80066c0:	b118      	cbz	r0, 80066ca <_fflush_r+0x1a>
 80066c2:	6a03      	ldr	r3, [r0, #32]
 80066c4:	b90b      	cbnz	r3, 80066ca <_fflush_r+0x1a>
 80066c6:	f7ff fc2b 	bl	8005f20 <__sinit>
 80066ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d0f3      	beq.n	80066ba <_fflush_r+0xa>
 80066d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80066d4:	07d0      	lsls	r0, r2, #31
 80066d6:	d404      	bmi.n	80066e2 <_fflush_r+0x32>
 80066d8:	0599      	lsls	r1, r3, #22
 80066da:	d402      	bmi.n	80066e2 <_fflush_r+0x32>
 80066dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80066de:	f7ff fe5a 	bl	8006396 <__retarget_lock_acquire_recursive>
 80066e2:	4628      	mov	r0, r5
 80066e4:	4621      	mov	r1, r4
 80066e6:	f7ff ff5f 	bl	80065a8 <__sflush_r>
 80066ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80066ec:	07da      	lsls	r2, r3, #31
 80066ee:	4605      	mov	r5, r0
 80066f0:	d4e4      	bmi.n	80066bc <_fflush_r+0xc>
 80066f2:	89a3      	ldrh	r3, [r4, #12]
 80066f4:	059b      	lsls	r3, r3, #22
 80066f6:	d4e1      	bmi.n	80066bc <_fflush_r+0xc>
 80066f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80066fa:	f7ff fe4d 	bl	8006398 <__retarget_lock_release_recursive>
 80066fe:	e7dd      	b.n	80066bc <_fflush_r+0xc>

08006700 <__swhatbuf_r>:
 8006700:	b570      	push	{r4, r5, r6, lr}
 8006702:	460c      	mov	r4, r1
 8006704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006708:	2900      	cmp	r1, #0
 800670a:	b096      	sub	sp, #88	@ 0x58
 800670c:	4615      	mov	r5, r2
 800670e:	461e      	mov	r6, r3
 8006710:	da0d      	bge.n	800672e <__swhatbuf_r+0x2e>
 8006712:	89a3      	ldrh	r3, [r4, #12]
 8006714:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006718:	f04f 0100 	mov.w	r1, #0
 800671c:	bf14      	ite	ne
 800671e:	2340      	movne	r3, #64	@ 0x40
 8006720:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006724:	2000      	movs	r0, #0
 8006726:	6031      	str	r1, [r6, #0]
 8006728:	602b      	str	r3, [r5, #0]
 800672a:	b016      	add	sp, #88	@ 0x58
 800672c:	bd70      	pop	{r4, r5, r6, pc}
 800672e:	466a      	mov	r2, sp
 8006730:	f000 f848 	bl	80067c4 <_fstat_r>
 8006734:	2800      	cmp	r0, #0
 8006736:	dbec      	blt.n	8006712 <__swhatbuf_r+0x12>
 8006738:	9901      	ldr	r1, [sp, #4]
 800673a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800673e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006742:	4259      	negs	r1, r3
 8006744:	4159      	adcs	r1, r3
 8006746:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800674a:	e7eb      	b.n	8006724 <__swhatbuf_r+0x24>

0800674c <__smakebuf_r>:
 800674c:	898b      	ldrh	r3, [r1, #12]
 800674e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006750:	079d      	lsls	r5, r3, #30
 8006752:	4606      	mov	r6, r0
 8006754:	460c      	mov	r4, r1
 8006756:	d507      	bpl.n	8006768 <__smakebuf_r+0x1c>
 8006758:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800675c:	6023      	str	r3, [r4, #0]
 800675e:	6123      	str	r3, [r4, #16]
 8006760:	2301      	movs	r3, #1
 8006762:	6163      	str	r3, [r4, #20]
 8006764:	b003      	add	sp, #12
 8006766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006768:	ab01      	add	r3, sp, #4
 800676a:	466a      	mov	r2, sp
 800676c:	f7ff ffc8 	bl	8006700 <__swhatbuf_r>
 8006770:	9f00      	ldr	r7, [sp, #0]
 8006772:	4605      	mov	r5, r0
 8006774:	4639      	mov	r1, r7
 8006776:	4630      	mov	r0, r6
 8006778:	f7ff fe8a 	bl	8006490 <_malloc_r>
 800677c:	b948      	cbnz	r0, 8006792 <__smakebuf_r+0x46>
 800677e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006782:	059a      	lsls	r2, r3, #22
 8006784:	d4ee      	bmi.n	8006764 <__smakebuf_r+0x18>
 8006786:	f023 0303 	bic.w	r3, r3, #3
 800678a:	f043 0302 	orr.w	r3, r3, #2
 800678e:	81a3      	strh	r3, [r4, #12]
 8006790:	e7e2      	b.n	8006758 <__smakebuf_r+0xc>
 8006792:	89a3      	ldrh	r3, [r4, #12]
 8006794:	6020      	str	r0, [r4, #0]
 8006796:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800679a:	81a3      	strh	r3, [r4, #12]
 800679c:	9b01      	ldr	r3, [sp, #4]
 800679e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80067a2:	b15b      	cbz	r3, 80067bc <__smakebuf_r+0x70>
 80067a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067a8:	4630      	mov	r0, r6
 80067aa:	f000 f81d 	bl	80067e8 <_isatty_r>
 80067ae:	b128      	cbz	r0, 80067bc <__smakebuf_r+0x70>
 80067b0:	89a3      	ldrh	r3, [r4, #12]
 80067b2:	f023 0303 	bic.w	r3, r3, #3
 80067b6:	f043 0301 	orr.w	r3, r3, #1
 80067ba:	81a3      	strh	r3, [r4, #12]
 80067bc:	89a3      	ldrh	r3, [r4, #12]
 80067be:	431d      	orrs	r5, r3
 80067c0:	81a5      	strh	r5, [r4, #12]
 80067c2:	e7cf      	b.n	8006764 <__smakebuf_r+0x18>

080067c4 <_fstat_r>:
 80067c4:	b538      	push	{r3, r4, r5, lr}
 80067c6:	4d07      	ldr	r5, [pc, #28]	@ (80067e4 <_fstat_r+0x20>)
 80067c8:	2300      	movs	r3, #0
 80067ca:	4604      	mov	r4, r0
 80067cc:	4608      	mov	r0, r1
 80067ce:	4611      	mov	r1, r2
 80067d0:	602b      	str	r3, [r5, #0]
 80067d2:	f7fa fad0 	bl	8000d76 <_fstat>
 80067d6:	1c43      	adds	r3, r0, #1
 80067d8:	d102      	bne.n	80067e0 <_fstat_r+0x1c>
 80067da:	682b      	ldr	r3, [r5, #0]
 80067dc:	b103      	cbz	r3, 80067e0 <_fstat_r+0x1c>
 80067de:	6023      	str	r3, [r4, #0]
 80067e0:	bd38      	pop	{r3, r4, r5, pc}
 80067e2:	bf00      	nop
 80067e4:	20004c18 	.word	0x20004c18

080067e8 <_isatty_r>:
 80067e8:	b538      	push	{r3, r4, r5, lr}
 80067ea:	4d06      	ldr	r5, [pc, #24]	@ (8006804 <_isatty_r+0x1c>)
 80067ec:	2300      	movs	r3, #0
 80067ee:	4604      	mov	r4, r0
 80067f0:	4608      	mov	r0, r1
 80067f2:	602b      	str	r3, [r5, #0]
 80067f4:	f7fa facf 	bl	8000d96 <_isatty>
 80067f8:	1c43      	adds	r3, r0, #1
 80067fa:	d102      	bne.n	8006802 <_isatty_r+0x1a>
 80067fc:	682b      	ldr	r3, [r5, #0]
 80067fe:	b103      	cbz	r3, 8006802 <_isatty_r+0x1a>
 8006800:	6023      	str	r3, [r4, #0]
 8006802:	bd38      	pop	{r3, r4, r5, pc}
 8006804:	20004c18 	.word	0x20004c18

08006808 <_sbrk_r>:
 8006808:	b538      	push	{r3, r4, r5, lr}
 800680a:	4d06      	ldr	r5, [pc, #24]	@ (8006824 <_sbrk_r+0x1c>)
 800680c:	2300      	movs	r3, #0
 800680e:	4604      	mov	r4, r0
 8006810:	4608      	mov	r0, r1
 8006812:	602b      	str	r3, [r5, #0]
 8006814:	f7fa fad8 	bl	8000dc8 <_sbrk>
 8006818:	1c43      	adds	r3, r0, #1
 800681a:	d102      	bne.n	8006822 <_sbrk_r+0x1a>
 800681c:	682b      	ldr	r3, [r5, #0]
 800681e:	b103      	cbz	r3, 8006822 <_sbrk_r+0x1a>
 8006820:	6023      	str	r3, [r4, #0]
 8006822:	bd38      	pop	{r3, r4, r5, pc}
 8006824:	20004c18 	.word	0x20004c18

08006828 <_init>:
 8006828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800682a:	bf00      	nop
 800682c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800682e:	bc08      	pop	{r3}
 8006830:	469e      	mov	lr, r3
 8006832:	4770      	bx	lr

08006834 <_fini>:
 8006834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006836:	bf00      	nop
 8006838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800683a:	bc08      	pop	{r3}
 800683c:	469e      	mov	lr, r3
 800683e:	4770      	bx	lr
