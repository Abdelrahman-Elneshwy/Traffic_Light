
Traffic_Light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064d0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08006670  08006670  00007670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006808  08006808  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  08006808  08006808  00007808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006810  08006810  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006810  08006810  00007810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006814  08006814  00007814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006818  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bc0  2000006c  08006884  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c2c  08006884  00008c2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014a71  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003033  00000000  00000000  0001cb0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  0001fb40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e3e  00000000  00000000  00020dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004219  00000000  00000000  00021c06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013d31  00000000  00000000  00025e1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097e1a  00000000  00000000  00039b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d196a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053a0  00000000  00000000  000d19b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000d6d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006658 	.word	0x08006658

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08006658 	.word	0x08006658

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fcc4 	bl	8000e60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f864 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f8c2 	bl	8000664 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004e0:	f001 fec6 	bl	8002270 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of PedestrainStatet */
  PedestrainStatetHandle = osSemaphoreNew(1, 1, &PedestrainStatet_attributes);
 80004e4:	4a1d      	ldr	r2, [pc, #116]	@ (800055c <main+0x8c>)
 80004e6:	2101      	movs	r1, #1
 80004e8:	2001      	movs	r0, #1
 80004ea:	f002 f80f 	bl	800250c <osSemaphoreNew>
 80004ee:	4603      	mov	r3, r0
 80004f0:	4a1b      	ldr	r2, [pc, #108]	@ (8000560 <main+0x90>)
 80004f2:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of SN_STATE */
  SN_STATEHandle = osMessageQueueNew (16, sizeof(uint16_t), &SN_STATE_attributes);
 80004f4:	4a1b      	ldr	r2, [pc, #108]	@ (8000564 <main+0x94>)
 80004f6:	2102      	movs	r1, #2
 80004f8:	2010      	movs	r0, #16
 80004fa:	f002 f927 	bl	800274c <osMessageQueueNew>
 80004fe:	4603      	mov	r3, r0
 8000500:	4a19      	ldr	r2, [pc, #100]	@ (8000568 <main+0x98>)
 8000502:	6013      	str	r3, [r2, #0]

  /* creation of WE_STATE */
  WE_STATEHandle = osMessageQueueNew (16, sizeof(uint16_t), &WE_STATE_attributes);
 8000504:	4a19      	ldr	r2, [pc, #100]	@ (800056c <main+0x9c>)
 8000506:	2102      	movs	r1, #2
 8000508:	2010      	movs	r0, #16
 800050a:	f002 f91f 	bl	800274c <osMessageQueueNew>
 800050e:	4603      	mov	r3, r0
 8000510:	4a17      	ldr	r2, [pc, #92]	@ (8000570 <main+0xa0>)
 8000512:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Traffic_control */
  Traffic_controlHandle = osThreadNew(Traffic_Light_Control, NULL, &Traffic_control_attributes);
 8000514:	4a17      	ldr	r2, [pc, #92]	@ (8000574 <main+0xa4>)
 8000516:	2100      	movs	r1, #0
 8000518:	4817      	ldr	r0, [pc, #92]	@ (8000578 <main+0xa8>)
 800051a:	f001 ff08 	bl	800232e <osThreadNew>
 800051e:	4603      	mov	r3, r0
 8000520:	4a16      	ldr	r2, [pc, #88]	@ (800057c <main+0xac>)
 8000522:	6013      	str	r3, [r2, #0]

  /* creation of SN_Crossing */
  SN_CrossingHandle = osThreadNew(SN_Crossing_Task, NULL, &SN_Crossing_attributes);
 8000524:	4a16      	ldr	r2, [pc, #88]	@ (8000580 <main+0xb0>)
 8000526:	2100      	movs	r1, #0
 8000528:	4816      	ldr	r0, [pc, #88]	@ (8000584 <main+0xb4>)
 800052a:	f001 ff00 	bl	800232e <osThreadNew>
 800052e:	4603      	mov	r3, r0
 8000530:	4a15      	ldr	r2, [pc, #84]	@ (8000588 <main+0xb8>)
 8000532:	6013      	str	r3, [r2, #0]

  /* creation of interrupt */
  interruptHandle = osThreadNew(Button_Interrupt, NULL, &interrupt_attributes);
 8000534:	4a15      	ldr	r2, [pc, #84]	@ (800058c <main+0xbc>)
 8000536:	2100      	movs	r1, #0
 8000538:	4815      	ldr	r0, [pc, #84]	@ (8000590 <main+0xc0>)
 800053a:	f001 fef8 	bl	800232e <osThreadNew>
 800053e:	4603      	mov	r3, r0
 8000540:	4a14      	ldr	r2, [pc, #80]	@ (8000594 <main+0xc4>)
 8000542:	6013      	str	r3, [r2, #0]

  /* creation of WE_Crossing */
  WE_CrossingHandle = osThreadNew(WE_Crossing_Task, NULL, &WE_Crossing_attributes);
 8000544:	4a14      	ldr	r2, [pc, #80]	@ (8000598 <main+0xc8>)
 8000546:	2100      	movs	r1, #0
 8000548:	4814      	ldr	r0, [pc, #80]	@ (800059c <main+0xcc>)
 800054a:	f001 fef0 	bl	800232e <osThreadNew>
 800054e:	4603      	mov	r3, r0
 8000550:	4a13      	ldr	r2, [pc, #76]	@ (80005a0 <main+0xd0>)
 8000552:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000554:	f001 feb0 	bl	80022b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000558:	bf00      	nop
 800055a:	e7fd      	b.n	8000558 <main+0x88>
 800055c:	080067e0 	.word	0x080067e0
 8000560:	200000a4 	.word	0x200000a4
 8000564:	080067b0 	.word	0x080067b0
 8000568:	2000009c 	.word	0x2000009c
 800056c:	080067c8 	.word	0x080067c8
 8000570:	200000a0 	.word	0x200000a0
 8000574:	08006720 	.word	0x08006720
 8000578:	08000761 	.word	0x08000761
 800057c:	2000008c 	.word	0x2000008c
 8000580:	08006744 	.word	0x08006744
 8000584:	0800087d 	.word	0x0800087d
 8000588:	20000090 	.word	0x20000090
 800058c:	08006768 	.word	0x08006768
 8000590:	08000965 	.word	0x08000965
 8000594:	20000094 	.word	0x20000094
 8000598:	0800678c 	.word	0x0800678c
 800059c:	08000a01 	.word	0x08000a01
 80005a0:	20000098 	.word	0x20000098

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b094      	sub	sp, #80	@ 0x50
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 0320 	add.w	r3, r7, #32
 80005ae:	2230      	movs	r2, #48	@ 0x30
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f005 fd38 	bl	8006028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c8:	2300      	movs	r3, #0
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	4b23      	ldr	r3, [pc, #140]	@ (800065c <SystemClock_Config+0xb8>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d0:	4a22      	ldr	r2, [pc, #136]	@ (800065c <SystemClock_Config+0xb8>)
 80005d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005d8:	4b20      	ldr	r3, [pc, #128]	@ (800065c <SystemClock_Config+0xb8>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005e4:	2300      	movs	r3, #0
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000660 <SystemClock_Config+0xbc>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005f0:	4a1b      	ldr	r2, [pc, #108]	@ (8000660 <SystemClock_Config+0xbc>)
 80005f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80005f6:	6013      	str	r3, [r2, #0]
 80005f8:	4b19      	ldr	r3, [pc, #100]	@ (8000660 <SystemClock_Config+0xbc>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000604:	2302      	movs	r3, #2
 8000606:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000608:	2301      	movs	r3, #1
 800060a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800060c:	2310      	movs	r3, #16
 800060e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000610:	2300      	movs	r3, #0
 8000612:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000614:	f107 0320 	add.w	r3, r7, #32
 8000618:	4618      	mov	r0, r3
 800061a:	f000 fefb 	bl	8001414 <HAL_RCC_OscConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000624:	f000 fa72 	bl	8000b0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000628:	230f      	movs	r3, #15
 800062a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800062c:	2300      	movs	r3, #0
 800062e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f001 f95e 	bl	8001904 <HAL_RCC_ClockConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800064e:	f000 fa5d 	bl	8000b0c <Error_Handler>
  }
}
 8000652:	bf00      	nop
 8000654:	3750      	adds	r7, #80	@ 0x50
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40023800 	.word	0x40023800
 8000660:	40007000 	.word	0x40007000

08000664 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b088      	sub	sp, #32
 8000668:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066a:	f107 030c 	add.w	r3, r7, #12
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
 8000678:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	4b35      	ldr	r3, [pc, #212]	@ (8000754 <MX_GPIO_Init+0xf0>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	4a34      	ldr	r2, [pc, #208]	@ (8000754 <MX_GPIO_Init+0xf0>)
 8000684:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000688:	6313      	str	r3, [r2, #48]	@ 0x30
 800068a:	4b32      	ldr	r3, [pc, #200]	@ (8000754 <MX_GPIO_Init+0xf0>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	4b2e      	ldr	r3, [pc, #184]	@ (8000754 <MX_GPIO_Init+0xf0>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069e:	4a2d      	ldr	r2, [pc, #180]	@ (8000754 <MX_GPIO_Init+0xf0>)
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006a6:	4b2b      	ldr	r3, [pc, #172]	@ (8000754 <MX_GPIO_Init+0xf0>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	603b      	str	r3, [r7, #0]
 80006b6:	4b27      	ldr	r3, [pc, #156]	@ (8000754 <MX_GPIO_Init+0xf0>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	4a26      	ldr	r2, [pc, #152]	@ (8000754 <MX_GPIO_Init+0xf0>)
 80006bc:	f043 0302 	orr.w	r3, r3, #2
 80006c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c2:	4b24      	ldr	r3, [pc, #144]	@ (8000754 <MX_GPIO_Init+0xf0>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	f003 0302 	and.w	r3, r3, #2
 80006ca:	603b      	str	r3, [r7, #0]
 80006cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, G_SN_Pin|Y_SN_Pin|R_SN_Pin|PedestrainMove_SN_Pin
 80006ce:	2200      	movs	r2, #0
 80006d0:	2137      	movs	r1, #55	@ 0x37
 80006d2:	4821      	ldr	r0, [pc, #132]	@ (8000758 <MX_GPIO_Init+0xf4>)
 80006d4:	f000 fe84 	bl	80013e0 <HAL_GPIO_WritePin>
                          |PedestrainStop_SN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, G_WE_Pin|Y_WE_Pin|R_WE_Pin|PedestrainMove_WE_Pin
 80006d8:	2200      	movs	r2, #0
 80006da:	2137      	movs	r1, #55	@ 0x37
 80006dc:	481f      	ldr	r0, [pc, #124]	@ (800075c <MX_GPIO_Init+0xf8>)
 80006de:	f000 fe7f 	bl	80013e0 <HAL_GPIO_WritePin>
                          |PedestrainStop_WE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : G_SN_Pin Y_SN_Pin R_SN_Pin PedestrainMove_SN_Pin
                           PedestrainStop_SN_Pin */
  GPIO_InitStruct.Pin = G_SN_Pin|Y_SN_Pin|R_SN_Pin|PedestrainMove_SN_Pin
 80006e2:	2337      	movs	r3, #55	@ 0x37
 80006e4:	60fb      	str	r3, [r7, #12]
                          |PedestrainStop_SN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e6:	2301      	movs	r3, #1
 80006e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f2:	f107 030c 	add.w	r3, r7, #12
 80006f6:	4619      	mov	r1, r3
 80006f8:	4817      	ldr	r0, [pc, #92]	@ (8000758 <MX_GPIO_Init+0xf4>)
 80006fa:	f000 fcd5 	bl	80010a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PS_NS_Pin */
  GPIO_InitStruct.Pin = PS_NS_Pin;
 80006fe:	2308      	movs	r3, #8
 8000700:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000702:	2300      	movs	r3, #0
 8000704:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000706:	2301      	movs	r3, #1
 8000708:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PS_NS_GPIO_Port, &GPIO_InitStruct);
 800070a:	f107 030c 	add.w	r3, r7, #12
 800070e:	4619      	mov	r1, r3
 8000710:	4811      	ldr	r0, [pc, #68]	@ (8000758 <MX_GPIO_Init+0xf4>)
 8000712:	f000 fcc9 	bl	80010a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : G_WE_Pin Y_WE_Pin R_WE_Pin PedestrainMove_WE_Pin
                           PedestrainStop_WE_Pin */
  GPIO_InitStruct.Pin = G_WE_Pin|Y_WE_Pin|R_WE_Pin|PedestrainMove_WE_Pin
 8000716:	2337      	movs	r3, #55	@ 0x37
 8000718:	60fb      	str	r3, [r7, #12]
                          |PedestrainStop_WE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071a:	2301      	movs	r3, #1
 800071c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000722:	2300      	movs	r3, #0
 8000724:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000726:	f107 030c 	add.w	r3, r7, #12
 800072a:	4619      	mov	r1, r3
 800072c:	480b      	ldr	r0, [pc, #44]	@ (800075c <MX_GPIO_Init+0xf8>)
 800072e:	f000 fcbb 	bl	80010a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PS_WE_Pin */
  GPIO_InitStruct.Pin = PS_WE_Pin;
 8000732:	2308      	movs	r3, #8
 8000734:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800073a:	2301      	movs	r3, #1
 800073c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PS_WE_GPIO_Port, &GPIO_InitStruct);
 800073e:	f107 030c 	add.w	r3, r7, #12
 8000742:	4619      	mov	r1, r3
 8000744:	4805      	ldr	r0, [pc, #20]	@ (800075c <MX_GPIO_Init+0xf8>)
 8000746:	f000 fcaf 	bl	80010a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800074a:	bf00      	nop
 800074c:	3720      	adds	r7, #32
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40023800 	.word	0x40023800
 8000758:	40020000 	.word	0x40020000
 800075c:	40020400 	.word	0x40020400

08000760 <Traffic_Light_Control>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Traffic_Light_Control */
void Traffic_Light_Control(void *argument)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if (osSemaphoreAcquire(PedestrainStatetHandle, osWaitForever) == osOK)
 8000768:	4b41      	ldr	r3, [pc, #260]	@ (8000870 <Traffic_Light_Control+0x110>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f04f 31ff 	mov.w	r1, #4294967295
 8000770:	4618      	mov	r0, r3
 8000772:	f001 ff55 	bl	8002620 <osSemaphoreAcquire>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d1f5      	bne.n	8000768 <Traffic_Light_Control+0x8>
	     {
	       /* North-South Green, West-East Red */
	       HAL_GPIO_WritePin(PedestrainStop_SN_GPIO_Port, PedestrainStop_SN_Pin, GPIO_PIN_SET);
 800077c:	2201      	movs	r2, #1
 800077e:	2120      	movs	r1, #32
 8000780:	483c      	ldr	r0, [pc, #240]	@ (8000874 <Traffic_Light_Control+0x114>)
 8000782:	f000 fe2d 	bl	80013e0 <HAL_GPIO_WritePin>
	 	   HAL_GPIO_WritePin(PedestrainStop_WE_GPIO_Port, PedestrainStop_SN_Pin, GPIO_PIN_SET);
 8000786:	2201      	movs	r2, #1
 8000788:	2120      	movs	r1, #32
 800078a:	483b      	ldr	r0, [pc, #236]	@ (8000878 <Traffic_Light_Control+0x118>)
 800078c:	f000 fe28 	bl	80013e0 <HAL_GPIO_WritePin>

	       HAL_GPIO_WritePin(GPIOA, G_SN_Pin, GPIO_PIN_SET);
 8000790:	2201      	movs	r2, #1
 8000792:	2101      	movs	r1, #1
 8000794:	4837      	ldr	r0, [pc, #220]	@ (8000874 <Traffic_Light_Control+0x114>)
 8000796:	f000 fe23 	bl	80013e0 <HAL_GPIO_WritePin>
	       HAL_GPIO_WritePin(GPIOA, Y_SN_Pin, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	2102      	movs	r1, #2
 800079e:	4835      	ldr	r0, [pc, #212]	@ (8000874 <Traffic_Light_Control+0x114>)
 80007a0:	f000 fe1e 	bl	80013e0 <HAL_GPIO_WritePin>
	       HAL_GPIO_WritePin(GPIOA, R_SN_Pin, GPIO_PIN_RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2104      	movs	r1, #4
 80007a8:	4832      	ldr	r0, [pc, #200]	@ (8000874 <Traffic_Light_Control+0x114>)
 80007aa:	f000 fe19 	bl	80013e0 <HAL_GPIO_WritePin>
	       HAL_GPIO_WritePin(GPIOB, R_WE_Pin, GPIO_PIN_SET);
 80007ae:	2201      	movs	r2, #1
 80007b0:	2104      	movs	r1, #4
 80007b2:	4831      	ldr	r0, [pc, #196]	@ (8000878 <Traffic_Light_Control+0x118>)
 80007b4:	f000 fe14 	bl	80013e0 <HAL_GPIO_WritePin>
	       HAL_GPIO_WritePin(GPIOB, G_WE_Pin, GPIO_PIN_RESET);
 80007b8:	2200      	movs	r2, #0
 80007ba:	2101      	movs	r1, #1
 80007bc:	482e      	ldr	r0, [pc, #184]	@ (8000878 <Traffic_Light_Control+0x118>)
 80007be:	f000 fe0f 	bl	80013e0 <HAL_GPIO_WritePin>
	       HAL_GPIO_WritePin(GPIOB, Y_WE_Pin, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2102      	movs	r1, #2
 80007c6:	482c      	ldr	r0, [pc, #176]	@ (8000878 <Traffic_Light_Control+0x118>)
 80007c8:	f000 fe0a 	bl	80013e0 <HAL_GPIO_WritePin>
	       osDelay(8000);
 80007cc:	f44f 50fa 	mov.w	r0, #8000	@ 0x1f40
 80007d0:	f001 fe81 	bl	80024d6 <osDelay>

	       /* North-South Yellow, West-East Red */
	       HAL_GPIO_WritePin(GPIOA, G_SN_Pin, GPIO_PIN_RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2101      	movs	r1, #1
 80007d8:	4826      	ldr	r0, [pc, #152]	@ (8000874 <Traffic_Light_Control+0x114>)
 80007da:	f000 fe01 	bl	80013e0 <HAL_GPIO_WritePin>
	       HAL_GPIO_WritePin(GPIOA, Y_SN_Pin, GPIO_PIN_SET);
 80007de:	2201      	movs	r2, #1
 80007e0:	2102      	movs	r1, #2
 80007e2:	4824      	ldr	r0, [pc, #144]	@ (8000874 <Traffic_Light_Control+0x114>)
 80007e4:	f000 fdfc 	bl	80013e0 <HAL_GPIO_WritePin>
	       HAL_GPIO_WritePin(GPIOA, R_SN_Pin, GPIO_PIN_RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	2104      	movs	r1, #4
 80007ec:	4821      	ldr	r0, [pc, #132]	@ (8000874 <Traffic_Light_Control+0x114>)
 80007ee:	f000 fdf7 	bl	80013e0 <HAL_GPIO_WritePin>
	       osDelay(2000);
 80007f2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80007f6:	f001 fe6e 	bl	80024d6 <osDelay>

	       /* North-South Red, West-East Green */
	       HAL_GPIO_WritePin(GPIOA, R_SN_Pin, GPIO_PIN_SET);
 80007fa:	2201      	movs	r2, #1
 80007fc:	2104      	movs	r1, #4
 80007fe:	481d      	ldr	r0, [pc, #116]	@ (8000874 <Traffic_Light_Control+0x114>)
 8000800:	f000 fdee 	bl	80013e0 <HAL_GPIO_WritePin>
	       HAL_GPIO_WritePin(GPIOA, G_SN_Pin, GPIO_PIN_RESET);
 8000804:	2200      	movs	r2, #0
 8000806:	2101      	movs	r1, #1
 8000808:	481a      	ldr	r0, [pc, #104]	@ (8000874 <Traffic_Light_Control+0x114>)
 800080a:	f000 fde9 	bl	80013e0 <HAL_GPIO_WritePin>
	       HAL_GPIO_WritePin(GPIOA, Y_SN_Pin, GPIO_PIN_RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	2102      	movs	r1, #2
 8000812:	4818      	ldr	r0, [pc, #96]	@ (8000874 <Traffic_Light_Control+0x114>)
 8000814:	f000 fde4 	bl	80013e0 <HAL_GPIO_WritePin>
	       HAL_GPIO_WritePin(GPIOB, G_WE_Pin, GPIO_PIN_SET);
 8000818:	2201      	movs	r2, #1
 800081a:	2101      	movs	r1, #1
 800081c:	4816      	ldr	r0, [pc, #88]	@ (8000878 <Traffic_Light_Control+0x118>)
 800081e:	f000 fddf 	bl	80013e0 <HAL_GPIO_WritePin>
	       HAL_GPIO_WritePin(GPIOB, Y_WE_Pin, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	2102      	movs	r1, #2
 8000826:	4814      	ldr	r0, [pc, #80]	@ (8000878 <Traffic_Light_Control+0x118>)
 8000828:	f000 fdda 	bl	80013e0 <HAL_GPIO_WritePin>
	       HAL_GPIO_WritePin(GPIOB, R_WE_Pin, GPIO_PIN_RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	2104      	movs	r1, #4
 8000830:	4811      	ldr	r0, [pc, #68]	@ (8000878 <Traffic_Light_Control+0x118>)
 8000832:	f000 fdd5 	bl	80013e0 <HAL_GPIO_WritePin>
	       osDelay(8000);
 8000836:	f44f 50fa 	mov.w	r0, #8000	@ 0x1f40
 800083a:	f001 fe4c 	bl	80024d6 <osDelay>

	       /* North-South Red, West-East Yellow */
	       HAL_GPIO_WritePin(GPIOB, G_WE_Pin, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	2101      	movs	r1, #1
 8000842:	480d      	ldr	r0, [pc, #52]	@ (8000878 <Traffic_Light_Control+0x118>)
 8000844:	f000 fdcc 	bl	80013e0 <HAL_GPIO_WritePin>
	       HAL_GPIO_WritePin(GPIOB, Y_WE_Pin, GPIO_PIN_SET);
 8000848:	2201      	movs	r2, #1
 800084a:	2102      	movs	r1, #2
 800084c:	480a      	ldr	r0, [pc, #40]	@ (8000878 <Traffic_Light_Control+0x118>)
 800084e:	f000 fdc7 	bl	80013e0 <HAL_GPIO_WritePin>
	       HAL_GPIO_WritePin(GPIOB, R_WE_Pin, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	2104      	movs	r1, #4
 8000856:	4808      	ldr	r0, [pc, #32]	@ (8000878 <Traffic_Light_Control+0x118>)
 8000858:	f000 fdc2 	bl	80013e0 <HAL_GPIO_WritePin>
	       osDelay(2000);
 800085c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000860:	f001 fe39 	bl	80024d6 <osDelay>

	       osSemaphoreRelease(PedestrainStatetHandle);
 8000864:	4b02      	ldr	r3, [pc, #8]	@ (8000870 <Traffic_Light_Control+0x110>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4618      	mov	r0, r3
 800086a:	f001 ff2b 	bl	80026c4 <osSemaphoreRelease>
	  if (osSemaphoreAcquire(PedestrainStatetHandle, osWaitForever) == osOK)
 800086e:	e77b      	b.n	8000768 <Traffic_Light_Control+0x8>
 8000870:	200000a4 	.word	0x200000a4
 8000874:	40020000 	.word	0x40020000
 8000878:	40020400 	.word	0x40020400

0800087c <SN_Crossing_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SN_Crossing_Task */
void SN_Crossing_Task(void *argument)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SN_Crossing_Task */
  /* Infinite loop */
  for(;;)
  {
	  if (TEST == S_N)
 8000884:	4b34      	ldr	r3, [pc, #208]	@ (8000958 <SN_Crossing_Task+0xdc>)
 8000886:	881b      	ldrh	r3, [r3, #0]
 8000888:	2b0a      	cmp	r3, #10
 800088a:	d160      	bne.n	800094e <SN_Crossing_Task+0xd2>
	  {
		/* North-South pedestrian crossing */
		osThreadSuspend(Traffic_controlHandle);
 800088c:	4b33      	ldr	r3, [pc, #204]	@ (800095c <SN_Crossing_Task+0xe0>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4618      	mov	r0, r3
 8000892:	f001 fdde 	bl	8002452 <osThreadSuspend>

		HAL_GPIO_WritePin(GPIOA, R_SN_Pin, GPIO_PIN_SET);
 8000896:	2201      	movs	r2, #1
 8000898:	2104      	movs	r1, #4
 800089a:	4831      	ldr	r0, [pc, #196]	@ (8000960 <SN_Crossing_Task+0xe4>)
 800089c:	f000 fda0 	bl	80013e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, G_SN_Pin, GPIO_PIN_RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2101      	movs	r1, #1
 80008a4:	482e      	ldr	r0, [pc, #184]	@ (8000960 <SN_Crossing_Task+0xe4>)
 80008a6:	f000 fd9b 	bl	80013e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Y_SN_Pin, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2102      	movs	r1, #2
 80008ae:	482c      	ldr	r0, [pc, #176]	@ (8000960 <SN_Crossing_Task+0xe4>)
 80008b0:	f000 fd96 	bl	80013e0 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(PedestrainStop_SN_GPIO_Port, PedestrainStop_SN_Pin, GPIO_PIN_RESET);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2120      	movs	r1, #32
 80008b8:	4829      	ldr	r0, [pc, #164]	@ (8000960 <SN_Crossing_Task+0xe4>)
 80008ba:	f000 fd91 	bl	80013e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PedestrainMove_SN_GPIO_Port, PedestrainMove_SN_Pin, GPIO_PIN_SET);
 80008be:	2201      	movs	r2, #1
 80008c0:	2110      	movs	r1, #16
 80008c2:	4827      	ldr	r0, [pc, #156]	@ (8000960 <SN_Crossing_Task+0xe4>)
 80008c4:	f000 fd8c 	bl	80013e0 <HAL_GPIO_WritePin>
		osDelay(5000);
 80008c8:	f241 3088 	movw	r0, #5000	@ 0x1388
 80008cc:	f001 fe03 	bl	80024d6 <osDelay>
		HAL_GPIO_WritePin(PedestrainMove_SN_GPIO_Port, PedestrainMove_SN_Pin, GPIO_PIN_RESET);
 80008d0:	2200      	movs	r2, #0
 80008d2:	2110      	movs	r1, #16
 80008d4:	4822      	ldr	r0, [pc, #136]	@ (8000960 <SN_Crossing_Task+0xe4>)
 80008d6:	f000 fd83 	bl	80013e0 <HAL_GPIO_WritePin>
		osDelay(1000);
 80008da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008de:	f001 fdfa 	bl	80024d6 <osDelay>
		HAL_GPIO_WritePin(PedestrainMove_SN_GPIO_Port, PedestrainMove_SN_Pin, GPIO_PIN_SET);
 80008e2:	2201      	movs	r2, #1
 80008e4:	2110      	movs	r1, #16
 80008e6:	481e      	ldr	r0, [pc, #120]	@ (8000960 <SN_Crossing_Task+0xe4>)
 80008e8:	f000 fd7a 	bl	80013e0 <HAL_GPIO_WritePin>
		osDelay(1000);
 80008ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008f0:	f001 fdf1 	bl	80024d6 <osDelay>
		HAL_GPIO_WritePin(PedestrainMove_SN_GPIO_Port, PedestrainMove_SN_Pin, GPIO_PIN_RESET);
 80008f4:	2200      	movs	r2, #0
 80008f6:	2110      	movs	r1, #16
 80008f8:	4819      	ldr	r0, [pc, #100]	@ (8000960 <SN_Crossing_Task+0xe4>)
 80008fa:	f000 fd71 	bl	80013e0 <HAL_GPIO_WritePin>
		osDelay(1000);
 80008fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000902:	f001 fde8 	bl	80024d6 <osDelay>
		HAL_GPIO_WritePin(PedestrainMove_SN_GPIO_Port, PedestrainMove_SN_Pin, GPIO_PIN_SET);
 8000906:	2201      	movs	r2, #1
 8000908:	2110      	movs	r1, #16
 800090a:	4815      	ldr	r0, [pc, #84]	@ (8000960 <SN_Crossing_Task+0xe4>)
 800090c:	f000 fd68 	bl	80013e0 <HAL_GPIO_WritePin>
		osDelay(1000);
 8000910:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000914:	f001 fddf 	bl	80024d6 <osDelay>
		HAL_GPIO_WritePin(PedestrainMove_SN_GPIO_Port, PedestrainMove_SN_Pin, GPIO_PIN_RESET);
 8000918:	2200      	movs	r2, #0
 800091a:	2110      	movs	r1, #16
 800091c:	4810      	ldr	r0, [pc, #64]	@ (8000960 <SN_Crossing_Task+0xe4>)
 800091e:	f000 fd5f 	bl	80013e0 <HAL_GPIO_WritePin>
		osDelay(1000);
 8000922:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000926:	f001 fdd6 	bl	80024d6 <osDelay>


		HAL_GPIO_WritePin(PedestrainMove_SN_GPIO_Port, PedestrainMove_SN_Pin, GPIO_PIN_RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	2110      	movs	r1, #16
 800092e:	480c      	ldr	r0, [pc, #48]	@ (8000960 <SN_Crossing_Task+0xe4>)
 8000930:	f000 fd56 	bl	80013e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PedestrainStop_SN_GPIO_Port, PedestrainStop_SN_Pin, GPIO_PIN_SET);
 8000934:	2201      	movs	r2, #1
 8000936:	2120      	movs	r1, #32
 8000938:	4809      	ldr	r0, [pc, #36]	@ (8000960 <SN_Crossing_Task+0xe4>)
 800093a:	f000 fd51 	bl	80013e0 <HAL_GPIO_WritePin>
		TEST = 0;
 800093e:	4b06      	ldr	r3, [pc, #24]	@ (8000958 <SN_Crossing_Task+0xdc>)
 8000940:	2200      	movs	r2, #0
 8000942:	801a      	strh	r2, [r3, #0]
		osThreadResume(Traffic_controlHandle);
 8000944:	4b05      	ldr	r3, [pc, #20]	@ (800095c <SN_Crossing_Task+0xe0>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4618      	mov	r0, r3
 800094a:	f001 fda3 	bl	8002494 <osThreadResume>
	  }

	  osDelay(100);
 800094e:	2064      	movs	r0, #100	@ 0x64
 8000950:	f001 fdc1 	bl	80024d6 <osDelay>
	  if (TEST == S_N)
 8000954:	e796      	b.n	8000884 <SN_Crossing_Task+0x8>
 8000956:	bf00      	nop
 8000958:	20000088 	.word	0x20000088
 800095c:	2000008c 	.word	0x2000008c
 8000960:	40020000 	.word	0x40020000

08000964 <Button_Interrupt>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Button_Interrupt */
void Button_Interrupt(void *argument)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	uint32_t last_tick = osKernelGetTickCount();
 800096c:	f001 fcca 	bl	8002304 <osKernelGetTickCount>
 8000970:	60f8      	str	r0, [r7, #12]
	    const uint32_t debounce_time = 50; // Debounce time in milliseconds
 8000972:	2332      	movs	r3, #50	@ 0x32
 8000974:	60bb      	str	r3, [r7, #8]

	    for (;;)
	    {
	        // Check North-South button
	        if (HAL_GPIO_ReadPin(PS_NS_GPIO_Port, PS_NS_Pin) == GPIO_PIN_RESET)
 8000976:	2108      	movs	r1, #8
 8000978:	481c      	ldr	r0, [pc, #112]	@ (80009ec <Button_Interrupt+0x88>)
 800097a:	f000 fd19 	bl	80013b0 <HAL_GPIO_ReadPin>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d113      	bne.n	80009ac <Button_Interrupt+0x48>
	        {
	            // Debounce check
	        	osDelay(debounce_time);
 8000984:	68b8      	ldr	r0, [r7, #8]
 8000986:	f001 fda6 	bl	80024d6 <osDelay>
	            if ((osKernelGetTickCount() - last_tick) >= debounce_time)
 800098a:	f001 fcbb 	bl	8002304 <osKernelGetTickCount>
 800098e:	4602      	mov	r2, r0
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	1ad3      	subs	r3, r2, r3
 8000994:	68ba      	ldr	r2, [r7, #8]
 8000996:	429a      	cmp	r2, r3
 8000998:	d808      	bhi.n	80009ac <Button_Interrupt+0x48>
	            {
	                printf("North-South button pressed!\n");
 800099a:	4815      	ldr	r0, [pc, #84]	@ (80009f0 <Button_Interrupt+0x8c>)
 800099c:	f005 fa64 	bl	8005e68 <puts>

	                // Create and send a message for North-South pedestrian crossing
	                TEST = 10;
 80009a0:	4b14      	ldr	r3, [pc, #80]	@ (80009f4 <Button_Interrupt+0x90>)
 80009a2:	220a      	movs	r2, #10
 80009a4:	801a      	strh	r2, [r3, #0]

	                last_tick = osKernelGetTickCount(); // Update last tick for debouncing
 80009a6:	f001 fcad 	bl	8002304 <osKernelGetTickCount>
 80009aa:	60f8      	str	r0, [r7, #12]
	            }
	        }
	        // Check West-East button
	        if (HAL_GPIO_ReadPin(PS_WE_GPIO_Port, PS_WE_Pin) == GPIO_PIN_RESET)
 80009ac:	2108      	movs	r1, #8
 80009ae:	4812      	ldr	r0, [pc, #72]	@ (80009f8 <Button_Interrupt+0x94>)
 80009b0:	f000 fcfe 	bl	80013b0 <HAL_GPIO_ReadPin>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d113      	bne.n	80009e2 <Button_Interrupt+0x7e>
	        {
	            // Debounce check
	        	osDelay(debounce_time);
 80009ba:	68b8      	ldr	r0, [r7, #8]
 80009bc:	f001 fd8b 	bl	80024d6 <osDelay>
	            if ((osKernelGetTickCount() - last_tick) >= debounce_time)
 80009c0:	f001 fca0 	bl	8002304 <osKernelGetTickCount>
 80009c4:	4602      	mov	r2, r0
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	1ad3      	subs	r3, r2, r3
 80009ca:	68ba      	ldr	r2, [r7, #8]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d808      	bhi.n	80009e2 <Button_Interrupt+0x7e>
	            {
	                printf("West-East button pressed!\n");
 80009d0:	480a      	ldr	r0, [pc, #40]	@ (80009fc <Button_Interrupt+0x98>)
 80009d2:	f005 fa49 	bl	8005e68 <puts>

	                // Create and send a message for West-East pedestrian crossing
	                TEST =20;
 80009d6:	4b07      	ldr	r3, [pc, #28]	@ (80009f4 <Button_Interrupt+0x90>)
 80009d8:	2214      	movs	r2, #20
 80009da:	801a      	strh	r2, [r3, #0]

	                last_tick = osKernelGetTickCount(); // Update last tick for debouncing
 80009dc:	f001 fc92 	bl	8002304 <osKernelGetTickCount>
 80009e0:	60f8      	str	r0, [r7, #12]
	            }
	        }

	        // Delay to reduce CPU usage
	        osDelay(10);
 80009e2:	200a      	movs	r0, #10
 80009e4:	f001 fd77 	bl	80024d6 <osDelay>
	        if (HAL_GPIO_ReadPin(PS_NS_GPIO_Port, PS_NS_Pin) == GPIO_PIN_RESET)
 80009e8:	e7c5      	b.n	8000976 <Button_Interrupt+0x12>
 80009ea:	bf00      	nop
 80009ec:	40020000 	.word	0x40020000
 80009f0:	080066d0 	.word	0x080066d0
 80009f4:	20000088 	.word	0x20000088
 80009f8:	40020400 	.word	0x40020400
 80009fc:	080066ec 	.word	0x080066ec

08000a00 <WE_Crossing_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_WE_Crossing_Task */
void WE_Crossing_Task(void *argument)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN WE_Crossing_Task */
  /* Infinite loop */
  for(;;)
  {
	  if (TEST == W_E)
 8000a08:	4b34      	ldr	r3, [pc, #208]	@ (8000adc <WE_Crossing_Task+0xdc>)
 8000a0a:	881b      	ldrh	r3, [r3, #0]
 8000a0c:	2b14      	cmp	r3, #20
 8000a0e:	d160      	bne.n	8000ad2 <WE_Crossing_Task+0xd2>
	  {
		/* North-South pedestrian crossing */
		osThreadSuspend(Traffic_controlHandle);
 8000a10:	4b33      	ldr	r3, [pc, #204]	@ (8000ae0 <WE_Crossing_Task+0xe0>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4618      	mov	r0, r3
 8000a16:	f001 fd1c 	bl	8002452 <osThreadSuspend>

		HAL_GPIO_WritePin(GPIOB, R_WE_Pin, GPIO_PIN_SET);
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	2104      	movs	r1, #4
 8000a1e:	4831      	ldr	r0, [pc, #196]	@ (8000ae4 <WE_Crossing_Task+0xe4>)
 8000a20:	f000 fcde 	bl	80013e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, G_WE_Pin, GPIO_PIN_RESET);
 8000a24:	2200      	movs	r2, #0
 8000a26:	2101      	movs	r1, #1
 8000a28:	482e      	ldr	r0, [pc, #184]	@ (8000ae4 <WE_Crossing_Task+0xe4>)
 8000a2a:	f000 fcd9 	bl	80013e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Y_WE_Pin, GPIO_PIN_RESET);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2102      	movs	r1, #2
 8000a32:	482c      	ldr	r0, [pc, #176]	@ (8000ae4 <WE_Crossing_Task+0xe4>)
 8000a34:	f000 fcd4 	bl	80013e0 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(PedestrainStop_WE_GPIO_Port, PedestrainStop_WE_Pin, GPIO_PIN_RESET);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2120      	movs	r1, #32
 8000a3c:	4829      	ldr	r0, [pc, #164]	@ (8000ae4 <WE_Crossing_Task+0xe4>)
 8000a3e:	f000 fccf 	bl	80013e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PedestrainMove_WE_GPIO_Port, PedestrainMove_WE_Pin, GPIO_PIN_SET);
 8000a42:	2201      	movs	r2, #1
 8000a44:	2110      	movs	r1, #16
 8000a46:	4827      	ldr	r0, [pc, #156]	@ (8000ae4 <WE_Crossing_Task+0xe4>)
 8000a48:	f000 fcca 	bl	80013e0 <HAL_GPIO_WritePin>
		osDelay(5000);
 8000a4c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000a50:	f001 fd41 	bl	80024d6 <osDelay>

		HAL_GPIO_WritePin(PedestrainMove_WE_GPIO_Port, PedestrainMove_WE_Pin, GPIO_PIN_RESET);
 8000a54:	2200      	movs	r2, #0
 8000a56:	2110      	movs	r1, #16
 8000a58:	4822      	ldr	r0, [pc, #136]	@ (8000ae4 <WE_Crossing_Task+0xe4>)
 8000a5a:	f000 fcc1 	bl	80013e0 <HAL_GPIO_WritePin>
		osDelay(1000);
 8000a5e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a62:	f001 fd38 	bl	80024d6 <osDelay>
		HAL_GPIO_WritePin(PedestrainMove_WE_GPIO_Port, PedestrainMove_WE_Pin, GPIO_PIN_SET);
 8000a66:	2201      	movs	r2, #1
 8000a68:	2110      	movs	r1, #16
 8000a6a:	481e      	ldr	r0, [pc, #120]	@ (8000ae4 <WE_Crossing_Task+0xe4>)
 8000a6c:	f000 fcb8 	bl	80013e0 <HAL_GPIO_WritePin>
		osDelay(1000);
 8000a70:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a74:	f001 fd2f 	bl	80024d6 <osDelay>
		HAL_GPIO_WritePin(PedestrainMove_WE_GPIO_Port, PedestrainMove_WE_Pin, GPIO_PIN_RESET);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2110      	movs	r1, #16
 8000a7c:	4819      	ldr	r0, [pc, #100]	@ (8000ae4 <WE_Crossing_Task+0xe4>)
 8000a7e:	f000 fcaf 	bl	80013e0 <HAL_GPIO_WritePin>
		osDelay(1000);
 8000a82:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a86:	f001 fd26 	bl	80024d6 <osDelay>
		HAL_GPIO_WritePin(PedestrainMove_WE_GPIO_Port, PedestrainMove_WE_Pin, GPIO_PIN_SET);
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	2110      	movs	r1, #16
 8000a8e:	4815      	ldr	r0, [pc, #84]	@ (8000ae4 <WE_Crossing_Task+0xe4>)
 8000a90:	f000 fca6 	bl	80013e0 <HAL_GPIO_WritePin>
		osDelay(1000);
 8000a94:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a98:	f001 fd1d 	bl	80024d6 <osDelay>
		HAL_GPIO_WritePin(PedestrainMove_WE_GPIO_Port, PedestrainMove_WE_Pin, GPIO_PIN_RESET);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2110      	movs	r1, #16
 8000aa0:	4810      	ldr	r0, [pc, #64]	@ (8000ae4 <WE_Crossing_Task+0xe4>)
 8000aa2:	f000 fc9d 	bl	80013e0 <HAL_GPIO_WritePin>
		osDelay(1000);
 8000aa6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000aaa:	f001 fd14 	bl	80024d6 <osDelay>

		HAL_GPIO_WritePin(PedestrainMove_WE_GPIO_Port, PedestrainMove_WE_Pin, GPIO_PIN_RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2110      	movs	r1, #16
 8000ab2:	480c      	ldr	r0, [pc, #48]	@ (8000ae4 <WE_Crossing_Task+0xe4>)
 8000ab4:	f000 fc94 	bl	80013e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PedestrainStop_WE_GPIO_Port, PedestrainStop_WE_Pin, GPIO_PIN_SET);
 8000ab8:	2201      	movs	r2, #1
 8000aba:	2120      	movs	r1, #32
 8000abc:	4809      	ldr	r0, [pc, #36]	@ (8000ae4 <WE_Crossing_Task+0xe4>)
 8000abe:	f000 fc8f 	bl	80013e0 <HAL_GPIO_WritePin>
		TEST = 0;
 8000ac2:	4b06      	ldr	r3, [pc, #24]	@ (8000adc <WE_Crossing_Task+0xdc>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	801a      	strh	r2, [r3, #0]
		osThreadResume(Traffic_controlHandle);
 8000ac8:	4b05      	ldr	r3, [pc, #20]	@ (8000ae0 <WE_Crossing_Task+0xe0>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f001 fce1 	bl	8002494 <osThreadResume>
	  }

	  osDelay(100);
 8000ad2:	2064      	movs	r0, #100	@ 0x64
 8000ad4:	f001 fcff 	bl	80024d6 <osDelay>
	  if (TEST == W_E)
 8000ad8:	e796      	b.n	8000a08 <WE_Crossing_Task+0x8>
 8000ada:	bf00      	nop
 8000adc:	20000088 	.word	0x20000088
 8000ae0:	2000008c 	.word	0x2000008c
 8000ae4:	40020400 	.word	0x40020400

08000ae8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a04      	ldr	r2, [pc, #16]	@ (8000b08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d101      	bne.n	8000afe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000afa:	f000 f9d3 	bl	8000ea4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40010000 	.word	0x40010000

08000b0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b10:	b672      	cpsid	i
}
 8000b12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <Error_Handler+0x8>

08000b18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	607b      	str	r3, [r7, #4]
 8000b22:	4b12      	ldr	r3, [pc, #72]	@ (8000b6c <HAL_MspInit+0x54>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b26:	4a11      	ldr	r2, [pc, #68]	@ (8000b6c <HAL_MspInit+0x54>)
 8000b28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b6c <HAL_MspInit+0x54>)
 8000b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	603b      	str	r3, [r7, #0]
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b6c <HAL_MspInit+0x54>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b42:	4a0a      	ldr	r2, [pc, #40]	@ (8000b6c <HAL_MspInit+0x54>)
 8000b44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b48:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b4a:	4b08      	ldr	r3, [pc, #32]	@ (8000b6c <HAL_MspInit+0x54>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b52:	603b      	str	r3, [r7, #0]
 8000b54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b56:	2200      	movs	r2, #0
 8000b58:	210f      	movs	r1, #15
 8000b5a:	f06f 0001 	mvn.w	r0, #1
 8000b5e:	f000 fa79 	bl	8001054 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40023800 	.word	0x40023800

08000b70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08c      	sub	sp, #48	@ 0x30
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b80:	2300      	movs	r3, #0
 8000b82:	60bb      	str	r3, [r7, #8]
 8000b84:	4b2e      	ldr	r3, [pc, #184]	@ (8000c40 <HAL_InitTick+0xd0>)
 8000b86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b88:	4a2d      	ldr	r2, [pc, #180]	@ (8000c40 <HAL_InitTick+0xd0>)
 8000b8a:	f043 0301 	orr.w	r3, r3, #1
 8000b8e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b90:	4b2b      	ldr	r3, [pc, #172]	@ (8000c40 <HAL_InitTick+0xd0>)
 8000b92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b94:	f003 0301 	and.w	r3, r3, #1
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b9c:	f107 020c 	add.w	r2, r7, #12
 8000ba0:	f107 0310 	add.w	r3, r7, #16
 8000ba4:	4611      	mov	r1, r2
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f001 f878 	bl	8001c9c <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000bac:	f001 f862 	bl	8001c74 <HAL_RCC_GetPCLK2Freq>
 8000bb0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bb4:	4a23      	ldr	r2, [pc, #140]	@ (8000c44 <HAL_InitTick+0xd4>)
 8000bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bba:	0c9b      	lsrs	r3, r3, #18
 8000bbc:	3b01      	subs	r3, #1
 8000bbe:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000bc0:	4b21      	ldr	r3, [pc, #132]	@ (8000c48 <HAL_InitTick+0xd8>)
 8000bc2:	4a22      	ldr	r2, [pc, #136]	@ (8000c4c <HAL_InitTick+0xdc>)
 8000bc4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000bc6:	4b20      	ldr	r3, [pc, #128]	@ (8000c48 <HAL_InitTick+0xd8>)
 8000bc8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000bcc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000bce:	4a1e      	ldr	r2, [pc, #120]	@ (8000c48 <HAL_InitTick+0xd8>)
 8000bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bd2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000bd4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c48 <HAL_InitTick+0xd8>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bda:	4b1b      	ldr	r3, [pc, #108]	@ (8000c48 <HAL_InitTick+0xd8>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be0:	4b19      	ldr	r3, [pc, #100]	@ (8000c48 <HAL_InitTick+0xd8>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000be6:	4818      	ldr	r0, [pc, #96]	@ (8000c48 <HAL_InitTick+0xd8>)
 8000be8:	f001 f88a 	bl	8001d00 <HAL_TIM_Base_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000bf2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d11b      	bne.n	8000c32 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000bfa:	4813      	ldr	r0, [pc, #76]	@ (8000c48 <HAL_InitTick+0xd8>)
 8000bfc:	f001 f8da 	bl	8001db4 <HAL_TIM_Base_Start_IT>
 8000c00:	4603      	mov	r3, r0
 8000c02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000c06:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d111      	bne.n	8000c32 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000c0e:	2019      	movs	r0, #25
 8000c10:	f000 fa3c 	bl	800108c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2b0f      	cmp	r3, #15
 8000c18:	d808      	bhi.n	8000c2c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	6879      	ldr	r1, [r7, #4]
 8000c1e:	2019      	movs	r0, #25
 8000c20:	f000 fa18 	bl	8001054 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c24:	4a0a      	ldr	r2, [pc, #40]	@ (8000c50 <HAL_InitTick+0xe0>)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6013      	str	r3, [r2, #0]
 8000c2a:	e002      	b.n	8000c32 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c32:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3730      	adds	r7, #48	@ 0x30
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40023800 	.word	0x40023800
 8000c44:	431bde83 	.word	0x431bde83
 8000c48:	200000a8 	.word	0x200000a8
 8000c4c:	40010000 	.word	0x40010000
 8000c50:	20000004 	.word	0x20000004

08000c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c58:	bf00      	nop
 8000c5a:	e7fd      	b.n	8000c58 <NMI_Handler+0x4>

08000c5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <HardFault_Handler+0x4>

08000c64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <MemManage_Handler+0x4>

08000c6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <BusFault_Handler+0x4>

08000c74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c78:	bf00      	nop
 8000c7a:	e7fd      	b.n	8000c78 <UsageFault_Handler+0x4>

08000c7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
	...

08000c8c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c90:	4802      	ldr	r0, [pc, #8]	@ (8000c9c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c92:	f001 f8f1 	bl	8001e78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	200000a8 	.word	0x200000a8

08000ca0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]
 8000cb0:	e00a      	b.n	8000cc8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cb2:	f3af 8000 	nop.w
 8000cb6:	4601      	mov	r1, r0
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	1c5a      	adds	r2, r3, #1
 8000cbc:	60ba      	str	r2, [r7, #8]
 8000cbe:	b2ca      	uxtb	r2, r1
 8000cc0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	617b      	str	r3, [r7, #20]
 8000cc8:	697a      	ldr	r2, [r7, #20]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	dbf0      	blt.n	8000cb2 <_read+0x12>
  }

  return len;
 8000cd0:	687b      	ldr	r3, [r7, #4]
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3718      	adds	r7, #24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b086      	sub	sp, #24
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	60f8      	str	r0, [r7, #12]
 8000ce2:	60b9      	str	r1, [r7, #8]
 8000ce4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	617b      	str	r3, [r7, #20]
 8000cea:	e009      	b.n	8000d00 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	1c5a      	adds	r2, r3, #1
 8000cf0:	60ba      	str	r2, [r7, #8]
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	617b      	str	r3, [r7, #20]
 8000d00:	697a      	ldr	r2, [r7, #20]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	dbf1      	blt.n	8000cec <_write+0x12>
  }
  return len;
 8000d08:	687b      	ldr	r3, [r7, #4]
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3718      	adds	r7, #24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <_close>:

int _close(int file)
{
 8000d12:	b480      	push	{r7}
 8000d14:	b083      	sub	sp, #12
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	b083      	sub	sp, #12
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
 8000d32:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d3a:	605a      	str	r2, [r3, #4]
  return 0;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr

08000d4a <_isatty>:

int _isatty(int file)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	b083      	sub	sp, #12
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d52:	2301      	movs	r3, #1
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3714      	adds	r7, #20
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
	...

08000d7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d84:	4a14      	ldr	r2, [pc, #80]	@ (8000dd8 <_sbrk+0x5c>)
 8000d86:	4b15      	ldr	r3, [pc, #84]	@ (8000ddc <_sbrk+0x60>)
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d90:	4b13      	ldr	r3, [pc, #76]	@ (8000de0 <_sbrk+0x64>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d102      	bne.n	8000d9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d98:	4b11      	ldr	r3, [pc, #68]	@ (8000de0 <_sbrk+0x64>)
 8000d9a:	4a12      	ldr	r2, [pc, #72]	@ (8000de4 <_sbrk+0x68>)
 8000d9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d9e:	4b10      	ldr	r3, [pc, #64]	@ (8000de0 <_sbrk+0x64>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4413      	add	r3, r2
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d207      	bcs.n	8000dbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dac:	f005 f9e0 	bl	8006170 <__errno>
 8000db0:	4603      	mov	r3, r0
 8000db2:	220c      	movs	r2, #12
 8000db4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000db6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dba:	e009      	b.n	8000dd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dbc:	4b08      	ldr	r3, [pc, #32]	@ (8000de0 <_sbrk+0x64>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dc2:	4b07      	ldr	r3, [pc, #28]	@ (8000de0 <_sbrk+0x64>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4413      	add	r3, r2
 8000dca:	4a05      	ldr	r2, [pc, #20]	@ (8000de0 <_sbrk+0x64>)
 8000dcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dce:	68fb      	ldr	r3, [r7, #12]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3718      	adds	r7, #24
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20010000 	.word	0x20010000
 8000ddc:	00000400 	.word	0x00000400
 8000de0:	200000f0 	.word	0x200000f0
 8000de4:	20004c30 	.word	0x20004c30

08000de8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dec:	4b06      	ldr	r3, [pc, #24]	@ (8000e08 <SystemInit+0x20>)
 8000dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000df2:	4a05      	ldr	r2, [pc, #20]	@ (8000e08 <SystemInit+0x20>)
 8000df4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000df8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e44 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e10:	f7ff ffea 	bl	8000de8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e14:	480c      	ldr	r0, [pc, #48]	@ (8000e48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e16:	490d      	ldr	r1, [pc, #52]	@ (8000e4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e18:	4a0d      	ldr	r2, [pc, #52]	@ (8000e50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e1c:	e002      	b.n	8000e24 <LoopCopyDataInit>

08000e1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e22:	3304      	adds	r3, #4

08000e24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e28:	d3f9      	bcc.n	8000e1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e2c:	4c0a      	ldr	r4, [pc, #40]	@ (8000e58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e30:	e001      	b.n	8000e36 <LoopFillZerobss>

08000e32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e34:	3204      	adds	r2, #4

08000e36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e38:	d3fb      	bcc.n	8000e32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e3a:	f005 f99f 	bl	800617c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e3e:	f7ff fb47 	bl	80004d0 <main>
  bx  lr    
 8000e42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e44:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000e48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e4c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000e50:	08006818 	.word	0x08006818
  ldr r2, =_sbss
 8000e54:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000e58:	20004c2c 	.word	0x20004c2c

08000e5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e5c:	e7fe      	b.n	8000e5c <ADC_IRQHandler>
	...

08000e60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e64:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea0 <HAL_Init+0x40>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a0d      	ldr	r2, [pc, #52]	@ (8000ea0 <HAL_Init+0x40>)
 8000e6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e70:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea0 <HAL_Init+0x40>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea0 <HAL_Init+0x40>)
 8000e76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ea0 <HAL_Init+0x40>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a07      	ldr	r2, [pc, #28]	@ (8000ea0 <HAL_Init+0x40>)
 8000e82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e88:	2003      	movs	r0, #3
 8000e8a:	f000 f8d8 	bl	800103e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e8e:	200f      	movs	r0, #15
 8000e90:	f7ff fe6e 	bl	8000b70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e94:	f7ff fe40 	bl	8000b18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40023c00 	.word	0x40023c00

08000ea4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea8:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <HAL_IncTick+0x20>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	461a      	mov	r2, r3
 8000eae:	4b06      	ldr	r3, [pc, #24]	@ (8000ec8 <HAL_IncTick+0x24>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	4a04      	ldr	r2, [pc, #16]	@ (8000ec8 <HAL_IncTick+0x24>)
 8000eb6:	6013      	str	r3, [r2, #0]
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	20000008 	.word	0x20000008
 8000ec8:	200000f4 	.word	0x200000f4

08000ecc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed0:	4b03      	ldr	r3, [pc, #12]	@ (8000ee0 <HAL_GetTick+0x14>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	200000f4 	.word	0x200000f4

08000ee4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f28 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000efa:	68ba      	ldr	r2, [r7, #8]
 8000efc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f00:	4013      	ands	r3, r2
 8000f02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f16:	4a04      	ldr	r2, [pc, #16]	@ (8000f28 <__NVIC_SetPriorityGrouping+0x44>)
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	60d3      	str	r3, [r2, #12]
}
 8000f1c:	bf00      	nop
 8000f1e:	3714      	adds	r7, #20
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f30:	4b04      	ldr	r3, [pc, #16]	@ (8000f44 <__NVIC_GetPriorityGrouping+0x18>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	0a1b      	lsrs	r3, r3, #8
 8000f36:	f003 0307 	and.w	r3, r3, #7
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	db0b      	blt.n	8000f72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	f003 021f 	and.w	r2, r3, #31
 8000f60:	4907      	ldr	r1, [pc, #28]	@ (8000f80 <__NVIC_EnableIRQ+0x38>)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	095b      	lsrs	r3, r3, #5
 8000f68:	2001      	movs	r0, #1
 8000f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f72:	bf00      	nop
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	e000e100 	.word	0xe000e100

08000f84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	6039      	str	r1, [r7, #0]
 8000f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	db0a      	blt.n	8000fae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	490c      	ldr	r1, [pc, #48]	@ (8000fd0 <__NVIC_SetPriority+0x4c>)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	0112      	lsls	r2, r2, #4
 8000fa4:	b2d2      	uxtb	r2, r2
 8000fa6:	440b      	add	r3, r1
 8000fa8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fac:	e00a      	b.n	8000fc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	4908      	ldr	r1, [pc, #32]	@ (8000fd4 <__NVIC_SetPriority+0x50>)
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	f003 030f 	and.w	r3, r3, #15
 8000fba:	3b04      	subs	r3, #4
 8000fbc:	0112      	lsls	r2, r2, #4
 8000fbe:	b2d2      	uxtb	r2, r2
 8000fc0:	440b      	add	r3, r1
 8000fc2:	761a      	strb	r2, [r3, #24]
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000e100 	.word	0xe000e100
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b089      	sub	sp, #36	@ 0x24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	f1c3 0307 	rsb	r3, r3, #7
 8000ff2:	2b04      	cmp	r3, #4
 8000ff4:	bf28      	it	cs
 8000ff6:	2304      	movcs	r3, #4
 8000ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	3304      	adds	r3, #4
 8000ffe:	2b06      	cmp	r3, #6
 8001000:	d902      	bls.n	8001008 <NVIC_EncodePriority+0x30>
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3b03      	subs	r3, #3
 8001006:	e000      	b.n	800100a <NVIC_EncodePriority+0x32>
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800100c:	f04f 32ff 	mov.w	r2, #4294967295
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43da      	mvns	r2, r3
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	401a      	ands	r2, r3
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001020:	f04f 31ff 	mov.w	r1, #4294967295
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	fa01 f303 	lsl.w	r3, r1, r3
 800102a:	43d9      	mvns	r1, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001030:	4313      	orrs	r3, r2
         );
}
 8001032:	4618      	mov	r0, r3
 8001034:	3724      	adds	r7, #36	@ 0x24
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f7ff ff4c 	bl	8000ee4 <__NVIC_SetPriorityGrouping>
}
 800104c:	bf00      	nop
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
 8001060:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001066:	f7ff ff61 	bl	8000f2c <__NVIC_GetPriorityGrouping>
 800106a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	68b9      	ldr	r1, [r7, #8]
 8001070:	6978      	ldr	r0, [r7, #20]
 8001072:	f7ff ffb1 	bl	8000fd8 <NVIC_EncodePriority>
 8001076:	4602      	mov	r2, r0
 8001078:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800107c:	4611      	mov	r1, r2
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff ff80 	bl	8000f84 <__NVIC_SetPriority>
}
 8001084:	bf00      	nop
 8001086:	3718      	adds	r7, #24
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff ff54 	bl	8000f48 <__NVIC_EnableIRQ>
}
 80010a0:	bf00      	nop
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b089      	sub	sp, #36	@ 0x24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010b6:	2300      	movs	r3, #0
 80010b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010be:	2300      	movs	r3, #0
 80010c0:	61fb      	str	r3, [r7, #28]
 80010c2:	e159      	b.n	8001378 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010c4:	2201      	movs	r2, #1
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	697a      	ldr	r2, [r7, #20]
 80010d4:	4013      	ands	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	429a      	cmp	r2, r3
 80010de:	f040 8148 	bne.w	8001372 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f003 0303 	and.w	r3, r3, #3
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d005      	beq.n	80010fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d130      	bne.n	800115c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	2203      	movs	r2, #3
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43db      	mvns	r3, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4013      	ands	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	68da      	ldr	r2, [r3, #12]
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4313      	orrs	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001130:	2201      	movs	r2, #1
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	091b      	lsrs	r3, r3, #4
 8001146:	f003 0201 	and.w	r2, r3, #1
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f003 0303 	and.w	r3, r3, #3
 8001164:	2b03      	cmp	r3, #3
 8001166:	d017      	beq.n	8001198 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	2203      	movs	r2, #3
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	689a      	ldr	r2, [r3, #8]
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4313      	orrs	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 0303 	and.w	r3, r3, #3
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d123      	bne.n	80011ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	08da      	lsrs	r2, r3, #3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3208      	adds	r2, #8
 80011ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	f003 0307 	and.w	r3, r3, #7
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	220f      	movs	r2, #15
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4013      	ands	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	691a      	ldr	r2, [r3, #16]
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4313      	orrs	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	08da      	lsrs	r2, r3, #3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	3208      	adds	r2, #8
 80011e6:	69b9      	ldr	r1, [r7, #24]
 80011e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	2203      	movs	r2, #3
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f003 0203 	and.w	r2, r3, #3
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001228:	2b00      	cmp	r3, #0
 800122a:	f000 80a2 	beq.w	8001372 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	4b57      	ldr	r3, [pc, #348]	@ (8001390 <HAL_GPIO_Init+0x2e8>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001236:	4a56      	ldr	r2, [pc, #344]	@ (8001390 <HAL_GPIO_Init+0x2e8>)
 8001238:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800123c:	6453      	str	r3, [r2, #68]	@ 0x44
 800123e:	4b54      	ldr	r3, [pc, #336]	@ (8001390 <HAL_GPIO_Init+0x2e8>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001242:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800124a:	4a52      	ldr	r2, [pc, #328]	@ (8001394 <HAL_GPIO_Init+0x2ec>)
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	089b      	lsrs	r3, r3, #2
 8001250:	3302      	adds	r3, #2
 8001252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001256:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	f003 0303 	and.w	r3, r3, #3
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	220f      	movs	r2, #15
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43db      	mvns	r3, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4013      	ands	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a49      	ldr	r2, [pc, #292]	@ (8001398 <HAL_GPIO_Init+0x2f0>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d019      	beq.n	80012aa <HAL_GPIO_Init+0x202>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a48      	ldr	r2, [pc, #288]	@ (800139c <HAL_GPIO_Init+0x2f4>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d013      	beq.n	80012a6 <HAL_GPIO_Init+0x1fe>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a47      	ldr	r2, [pc, #284]	@ (80013a0 <HAL_GPIO_Init+0x2f8>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d00d      	beq.n	80012a2 <HAL_GPIO_Init+0x1fa>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a46      	ldr	r2, [pc, #280]	@ (80013a4 <HAL_GPIO_Init+0x2fc>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d007      	beq.n	800129e <HAL_GPIO_Init+0x1f6>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a45      	ldr	r2, [pc, #276]	@ (80013a8 <HAL_GPIO_Init+0x300>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d101      	bne.n	800129a <HAL_GPIO_Init+0x1f2>
 8001296:	2304      	movs	r3, #4
 8001298:	e008      	b.n	80012ac <HAL_GPIO_Init+0x204>
 800129a:	2307      	movs	r3, #7
 800129c:	e006      	b.n	80012ac <HAL_GPIO_Init+0x204>
 800129e:	2303      	movs	r3, #3
 80012a0:	e004      	b.n	80012ac <HAL_GPIO_Init+0x204>
 80012a2:	2302      	movs	r3, #2
 80012a4:	e002      	b.n	80012ac <HAL_GPIO_Init+0x204>
 80012a6:	2301      	movs	r3, #1
 80012a8:	e000      	b.n	80012ac <HAL_GPIO_Init+0x204>
 80012aa:	2300      	movs	r3, #0
 80012ac:	69fa      	ldr	r2, [r7, #28]
 80012ae:	f002 0203 	and.w	r2, r2, #3
 80012b2:	0092      	lsls	r2, r2, #2
 80012b4:	4093      	lsls	r3, r2
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012bc:	4935      	ldr	r1, [pc, #212]	@ (8001394 <HAL_GPIO_Init+0x2ec>)
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	089b      	lsrs	r3, r3, #2
 80012c2:	3302      	adds	r3, #2
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ca:	4b38      	ldr	r3, [pc, #224]	@ (80013ac <HAL_GPIO_Init+0x304>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	43db      	mvns	r3, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4013      	ands	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ee:	4a2f      	ldr	r2, [pc, #188]	@ (80013ac <HAL_GPIO_Init+0x304>)
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012f4:	4b2d      	ldr	r3, [pc, #180]	@ (80013ac <HAL_GPIO_Init+0x304>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d003      	beq.n	8001318 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	4313      	orrs	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001318:	4a24      	ldr	r2, [pc, #144]	@ (80013ac <HAL_GPIO_Init+0x304>)
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800131e:	4b23      	ldr	r3, [pc, #140]	@ (80013ac <HAL_GPIO_Init+0x304>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	43db      	mvns	r3, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4013      	ands	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d003      	beq.n	8001342 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	4313      	orrs	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001342:	4a1a      	ldr	r2, [pc, #104]	@ (80013ac <HAL_GPIO_Init+0x304>)
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001348:	4b18      	ldr	r3, [pc, #96]	@ (80013ac <HAL_GPIO_Init+0x304>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	43db      	mvns	r3, r3
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4013      	ands	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d003      	beq.n	800136c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	4313      	orrs	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800136c:	4a0f      	ldr	r2, [pc, #60]	@ (80013ac <HAL_GPIO_Init+0x304>)
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	3301      	adds	r3, #1
 8001376:	61fb      	str	r3, [r7, #28]
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	2b0f      	cmp	r3, #15
 800137c:	f67f aea2 	bls.w	80010c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001380:	bf00      	nop
 8001382:	bf00      	nop
 8001384:	3724      	adds	r7, #36	@ 0x24
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	40023800 	.word	0x40023800
 8001394:	40013800 	.word	0x40013800
 8001398:	40020000 	.word	0x40020000
 800139c:	40020400 	.word	0x40020400
 80013a0:	40020800 	.word	0x40020800
 80013a4:	40020c00 	.word	0x40020c00
 80013a8:	40021000 	.word	0x40021000
 80013ac:	40013c00 	.word	0x40013c00

080013b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	691a      	ldr	r2, [r3, #16]
 80013c0:	887b      	ldrh	r3, [r7, #2]
 80013c2:	4013      	ands	r3, r2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d002      	beq.n	80013ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013c8:	2301      	movs	r3, #1
 80013ca:	73fb      	strb	r3, [r7, #15]
 80013cc:	e001      	b.n	80013d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013ce:	2300      	movs	r3, #0
 80013d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	460b      	mov	r3, r1
 80013ea:	807b      	strh	r3, [r7, #2]
 80013ec:	4613      	mov	r3, r2
 80013ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013f0:	787b      	ldrb	r3, [r7, #1]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013f6:	887a      	ldrh	r2, [r7, #2]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013fc:	e003      	b.n	8001406 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013fe:	887b      	ldrh	r3, [r7, #2]
 8001400:	041a      	lsls	r2, r3, #16
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	619a      	str	r2, [r3, #24]
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
	...

08001414 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d101      	bne.n	8001426 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e267      	b.n	80018f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	2b00      	cmp	r3, #0
 8001430:	d075      	beq.n	800151e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001432:	4b88      	ldr	r3, [pc, #544]	@ (8001654 <HAL_RCC_OscConfig+0x240>)
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	f003 030c 	and.w	r3, r3, #12
 800143a:	2b04      	cmp	r3, #4
 800143c:	d00c      	beq.n	8001458 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800143e:	4b85      	ldr	r3, [pc, #532]	@ (8001654 <HAL_RCC_OscConfig+0x240>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001446:	2b08      	cmp	r3, #8
 8001448:	d112      	bne.n	8001470 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800144a:	4b82      	ldr	r3, [pc, #520]	@ (8001654 <HAL_RCC_OscConfig+0x240>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001452:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001456:	d10b      	bne.n	8001470 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001458:	4b7e      	ldr	r3, [pc, #504]	@ (8001654 <HAL_RCC_OscConfig+0x240>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d05b      	beq.n	800151c <HAL_RCC_OscConfig+0x108>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d157      	bne.n	800151c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e242      	b.n	80018f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001478:	d106      	bne.n	8001488 <HAL_RCC_OscConfig+0x74>
 800147a:	4b76      	ldr	r3, [pc, #472]	@ (8001654 <HAL_RCC_OscConfig+0x240>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a75      	ldr	r2, [pc, #468]	@ (8001654 <HAL_RCC_OscConfig+0x240>)
 8001480:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	e01d      	b.n	80014c4 <HAL_RCC_OscConfig+0xb0>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001490:	d10c      	bne.n	80014ac <HAL_RCC_OscConfig+0x98>
 8001492:	4b70      	ldr	r3, [pc, #448]	@ (8001654 <HAL_RCC_OscConfig+0x240>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a6f      	ldr	r2, [pc, #444]	@ (8001654 <HAL_RCC_OscConfig+0x240>)
 8001498:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800149c:	6013      	str	r3, [r2, #0]
 800149e:	4b6d      	ldr	r3, [pc, #436]	@ (8001654 <HAL_RCC_OscConfig+0x240>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a6c      	ldr	r2, [pc, #432]	@ (8001654 <HAL_RCC_OscConfig+0x240>)
 80014a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	e00b      	b.n	80014c4 <HAL_RCC_OscConfig+0xb0>
 80014ac:	4b69      	ldr	r3, [pc, #420]	@ (8001654 <HAL_RCC_OscConfig+0x240>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a68      	ldr	r2, [pc, #416]	@ (8001654 <HAL_RCC_OscConfig+0x240>)
 80014b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014b6:	6013      	str	r3, [r2, #0]
 80014b8:	4b66      	ldr	r3, [pc, #408]	@ (8001654 <HAL_RCC_OscConfig+0x240>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a65      	ldr	r2, [pc, #404]	@ (8001654 <HAL_RCC_OscConfig+0x240>)
 80014be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d013      	beq.n	80014f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014cc:	f7ff fcfe 	bl	8000ecc <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014d4:	f7ff fcfa 	bl	8000ecc <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b64      	cmp	r3, #100	@ 0x64
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e207      	b.n	80018f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014e6:	4b5b      	ldr	r3, [pc, #364]	@ (8001654 <HAL_RCC_OscConfig+0x240>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d0f0      	beq.n	80014d4 <HAL_RCC_OscConfig+0xc0>
 80014f2:	e014      	b.n	800151e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f4:	f7ff fcea 	bl	8000ecc <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014fc:	f7ff fce6 	bl	8000ecc <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b64      	cmp	r3, #100	@ 0x64
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e1f3      	b.n	80018f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800150e:	4b51      	ldr	r3, [pc, #324]	@ (8001654 <HAL_RCC_OscConfig+0x240>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1f0      	bne.n	80014fc <HAL_RCC_OscConfig+0xe8>
 800151a:	e000      	b.n	800151e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800151c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d063      	beq.n	80015f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800152a:	4b4a      	ldr	r3, [pc, #296]	@ (8001654 <HAL_RCC_OscConfig+0x240>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f003 030c 	and.w	r3, r3, #12
 8001532:	2b00      	cmp	r3, #0
 8001534:	d00b      	beq.n	800154e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001536:	4b47      	ldr	r3, [pc, #284]	@ (8001654 <HAL_RCC_OscConfig+0x240>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800153e:	2b08      	cmp	r3, #8
 8001540:	d11c      	bne.n	800157c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001542:	4b44      	ldr	r3, [pc, #272]	@ (8001654 <HAL_RCC_OscConfig+0x240>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d116      	bne.n	800157c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800154e:	4b41      	ldr	r3, [pc, #260]	@ (8001654 <HAL_RCC_OscConfig+0x240>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d005      	beq.n	8001566 <HAL_RCC_OscConfig+0x152>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d001      	beq.n	8001566 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e1c7      	b.n	80018f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001566:	4b3b      	ldr	r3, [pc, #236]	@ (8001654 <HAL_RCC_OscConfig+0x240>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	691b      	ldr	r3, [r3, #16]
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	4937      	ldr	r1, [pc, #220]	@ (8001654 <HAL_RCC_OscConfig+0x240>)
 8001576:	4313      	orrs	r3, r2
 8001578:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800157a:	e03a      	b.n	80015f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d020      	beq.n	80015c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001584:	4b34      	ldr	r3, [pc, #208]	@ (8001658 <HAL_RCC_OscConfig+0x244>)
 8001586:	2201      	movs	r2, #1
 8001588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158a:	f7ff fc9f 	bl	8000ecc <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001590:	e008      	b.n	80015a4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001592:	f7ff fc9b 	bl	8000ecc <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e1a8      	b.n	80018f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a4:	4b2b      	ldr	r3, [pc, #172]	@ (8001654 <HAL_RCC_OscConfig+0x240>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d0f0      	beq.n	8001592 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b0:	4b28      	ldr	r3, [pc, #160]	@ (8001654 <HAL_RCC_OscConfig+0x240>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	691b      	ldr	r3, [r3, #16]
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	4925      	ldr	r1, [pc, #148]	@ (8001654 <HAL_RCC_OscConfig+0x240>)
 80015c0:	4313      	orrs	r3, r2
 80015c2:	600b      	str	r3, [r1, #0]
 80015c4:	e015      	b.n	80015f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015c6:	4b24      	ldr	r3, [pc, #144]	@ (8001658 <HAL_RCC_OscConfig+0x244>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015cc:	f7ff fc7e 	bl	8000ecc <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015d4:	f7ff fc7a 	bl	8000ecc <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e187      	b.n	80018f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001654 <HAL_RCC_OscConfig+0x240>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1f0      	bne.n	80015d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0308 	and.w	r3, r3, #8
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d036      	beq.n	800166c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d016      	beq.n	8001634 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001606:	4b15      	ldr	r3, [pc, #84]	@ (800165c <HAL_RCC_OscConfig+0x248>)
 8001608:	2201      	movs	r2, #1
 800160a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800160c:	f7ff fc5e 	bl	8000ecc <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001614:	f7ff fc5a 	bl	8000ecc <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e167      	b.n	80018f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001626:	4b0b      	ldr	r3, [pc, #44]	@ (8001654 <HAL_RCC_OscConfig+0x240>)
 8001628:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d0f0      	beq.n	8001614 <HAL_RCC_OscConfig+0x200>
 8001632:	e01b      	b.n	800166c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001634:	4b09      	ldr	r3, [pc, #36]	@ (800165c <HAL_RCC_OscConfig+0x248>)
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800163a:	f7ff fc47 	bl	8000ecc <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001640:	e00e      	b.n	8001660 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001642:	f7ff fc43 	bl	8000ecc <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d907      	bls.n	8001660 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e150      	b.n	80018f6 <HAL_RCC_OscConfig+0x4e2>
 8001654:	40023800 	.word	0x40023800
 8001658:	42470000 	.word	0x42470000
 800165c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001660:	4b88      	ldr	r3, [pc, #544]	@ (8001884 <HAL_RCC_OscConfig+0x470>)
 8001662:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d1ea      	bne.n	8001642 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0304 	and.w	r3, r3, #4
 8001674:	2b00      	cmp	r3, #0
 8001676:	f000 8097 	beq.w	80017a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800167a:	2300      	movs	r3, #0
 800167c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800167e:	4b81      	ldr	r3, [pc, #516]	@ (8001884 <HAL_RCC_OscConfig+0x470>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001682:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d10f      	bne.n	80016aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	60bb      	str	r3, [r7, #8]
 800168e:	4b7d      	ldr	r3, [pc, #500]	@ (8001884 <HAL_RCC_OscConfig+0x470>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001692:	4a7c      	ldr	r2, [pc, #496]	@ (8001884 <HAL_RCC_OscConfig+0x470>)
 8001694:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001698:	6413      	str	r3, [r2, #64]	@ 0x40
 800169a:	4b7a      	ldr	r3, [pc, #488]	@ (8001884 <HAL_RCC_OscConfig+0x470>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016a2:	60bb      	str	r3, [r7, #8]
 80016a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016a6:	2301      	movs	r3, #1
 80016a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016aa:	4b77      	ldr	r3, [pc, #476]	@ (8001888 <HAL_RCC_OscConfig+0x474>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d118      	bne.n	80016e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016b6:	4b74      	ldr	r3, [pc, #464]	@ (8001888 <HAL_RCC_OscConfig+0x474>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a73      	ldr	r2, [pc, #460]	@ (8001888 <HAL_RCC_OscConfig+0x474>)
 80016bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016c2:	f7ff fc03 	bl	8000ecc <HAL_GetTick>
 80016c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c8:	e008      	b.n	80016dc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ca:	f7ff fbff 	bl	8000ecc <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e10c      	b.n	80018f6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016dc:	4b6a      	ldr	r3, [pc, #424]	@ (8001888 <HAL_RCC_OscConfig+0x474>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d0f0      	beq.n	80016ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d106      	bne.n	80016fe <HAL_RCC_OscConfig+0x2ea>
 80016f0:	4b64      	ldr	r3, [pc, #400]	@ (8001884 <HAL_RCC_OscConfig+0x470>)
 80016f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016f4:	4a63      	ldr	r2, [pc, #396]	@ (8001884 <HAL_RCC_OscConfig+0x470>)
 80016f6:	f043 0301 	orr.w	r3, r3, #1
 80016fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80016fc:	e01c      	b.n	8001738 <HAL_RCC_OscConfig+0x324>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	2b05      	cmp	r3, #5
 8001704:	d10c      	bne.n	8001720 <HAL_RCC_OscConfig+0x30c>
 8001706:	4b5f      	ldr	r3, [pc, #380]	@ (8001884 <HAL_RCC_OscConfig+0x470>)
 8001708:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800170a:	4a5e      	ldr	r2, [pc, #376]	@ (8001884 <HAL_RCC_OscConfig+0x470>)
 800170c:	f043 0304 	orr.w	r3, r3, #4
 8001710:	6713      	str	r3, [r2, #112]	@ 0x70
 8001712:	4b5c      	ldr	r3, [pc, #368]	@ (8001884 <HAL_RCC_OscConfig+0x470>)
 8001714:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001716:	4a5b      	ldr	r2, [pc, #364]	@ (8001884 <HAL_RCC_OscConfig+0x470>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	6713      	str	r3, [r2, #112]	@ 0x70
 800171e:	e00b      	b.n	8001738 <HAL_RCC_OscConfig+0x324>
 8001720:	4b58      	ldr	r3, [pc, #352]	@ (8001884 <HAL_RCC_OscConfig+0x470>)
 8001722:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001724:	4a57      	ldr	r2, [pc, #348]	@ (8001884 <HAL_RCC_OscConfig+0x470>)
 8001726:	f023 0301 	bic.w	r3, r3, #1
 800172a:	6713      	str	r3, [r2, #112]	@ 0x70
 800172c:	4b55      	ldr	r3, [pc, #340]	@ (8001884 <HAL_RCC_OscConfig+0x470>)
 800172e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001730:	4a54      	ldr	r2, [pc, #336]	@ (8001884 <HAL_RCC_OscConfig+0x470>)
 8001732:	f023 0304 	bic.w	r3, r3, #4
 8001736:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d015      	beq.n	800176c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001740:	f7ff fbc4 	bl	8000ecc <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001746:	e00a      	b.n	800175e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001748:	f7ff fbc0 	bl	8000ecc <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001756:	4293      	cmp	r3, r2
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e0cb      	b.n	80018f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800175e:	4b49      	ldr	r3, [pc, #292]	@ (8001884 <HAL_RCC_OscConfig+0x470>)
 8001760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d0ee      	beq.n	8001748 <HAL_RCC_OscConfig+0x334>
 800176a:	e014      	b.n	8001796 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800176c:	f7ff fbae 	bl	8000ecc <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001772:	e00a      	b.n	800178a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001774:	f7ff fbaa 	bl	8000ecc <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001782:	4293      	cmp	r3, r2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e0b5      	b.n	80018f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800178a:	4b3e      	ldr	r3, [pc, #248]	@ (8001884 <HAL_RCC_OscConfig+0x470>)
 800178c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1ee      	bne.n	8001774 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001796:	7dfb      	ldrb	r3, [r7, #23]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d105      	bne.n	80017a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800179c:	4b39      	ldr	r3, [pc, #228]	@ (8001884 <HAL_RCC_OscConfig+0x470>)
 800179e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a0:	4a38      	ldr	r2, [pc, #224]	@ (8001884 <HAL_RCC_OscConfig+0x470>)
 80017a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017a6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f000 80a1 	beq.w	80018f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017b2:	4b34      	ldr	r3, [pc, #208]	@ (8001884 <HAL_RCC_OscConfig+0x470>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f003 030c 	and.w	r3, r3, #12
 80017ba:	2b08      	cmp	r3, #8
 80017bc:	d05c      	beq.n	8001878 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d141      	bne.n	800184a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017c6:	4b31      	ldr	r3, [pc, #196]	@ (800188c <HAL_RCC_OscConfig+0x478>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017cc:	f7ff fb7e 	bl	8000ecc <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d4:	f7ff fb7a 	bl	8000ecc <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e087      	b.n	80018f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017e6:	4b27      	ldr	r3, [pc, #156]	@ (8001884 <HAL_RCC_OscConfig+0x470>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1f0      	bne.n	80017d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	69da      	ldr	r2, [r3, #28]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a1b      	ldr	r3, [r3, #32]
 80017fa:	431a      	orrs	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001800:	019b      	lsls	r3, r3, #6
 8001802:	431a      	orrs	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001808:	085b      	lsrs	r3, r3, #1
 800180a:	3b01      	subs	r3, #1
 800180c:	041b      	lsls	r3, r3, #16
 800180e:	431a      	orrs	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001814:	061b      	lsls	r3, r3, #24
 8001816:	491b      	ldr	r1, [pc, #108]	@ (8001884 <HAL_RCC_OscConfig+0x470>)
 8001818:	4313      	orrs	r3, r2
 800181a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800181c:	4b1b      	ldr	r3, [pc, #108]	@ (800188c <HAL_RCC_OscConfig+0x478>)
 800181e:	2201      	movs	r2, #1
 8001820:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001822:	f7ff fb53 	bl	8000ecc <HAL_GetTick>
 8001826:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001828:	e008      	b.n	800183c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800182a:	f7ff fb4f 	bl	8000ecc <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b02      	cmp	r3, #2
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e05c      	b.n	80018f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800183c:	4b11      	ldr	r3, [pc, #68]	@ (8001884 <HAL_RCC_OscConfig+0x470>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d0f0      	beq.n	800182a <HAL_RCC_OscConfig+0x416>
 8001848:	e054      	b.n	80018f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800184a:	4b10      	ldr	r3, [pc, #64]	@ (800188c <HAL_RCC_OscConfig+0x478>)
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001850:	f7ff fb3c 	bl	8000ecc <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001858:	f7ff fb38 	bl	8000ecc <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e045      	b.n	80018f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800186a:	4b06      	ldr	r3, [pc, #24]	@ (8001884 <HAL_RCC_OscConfig+0x470>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1f0      	bne.n	8001858 <HAL_RCC_OscConfig+0x444>
 8001876:	e03d      	b.n	80018f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d107      	bne.n	8001890 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e038      	b.n	80018f6 <HAL_RCC_OscConfig+0x4e2>
 8001884:	40023800 	.word	0x40023800
 8001888:	40007000 	.word	0x40007000
 800188c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001890:	4b1b      	ldr	r3, [pc, #108]	@ (8001900 <HAL_RCC_OscConfig+0x4ec>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d028      	beq.n	80018f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d121      	bne.n	80018f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d11a      	bne.n	80018f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018ba:	68fa      	ldr	r2, [r7, #12]
 80018bc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80018c0:	4013      	ands	r3, r2
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80018c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d111      	bne.n	80018f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018d6:	085b      	lsrs	r3, r3, #1
 80018d8:	3b01      	subs	r3, #1
 80018da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018dc:	429a      	cmp	r2, r3
 80018de:	d107      	bne.n	80018f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d001      	beq.n	80018f4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e000      	b.n	80018f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3718      	adds	r7, #24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40023800 	.word	0x40023800

08001904 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d101      	bne.n	8001918 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e0cc      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001918:	4b68      	ldr	r3, [pc, #416]	@ (8001abc <HAL_RCC_ClockConfig+0x1b8>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0307 	and.w	r3, r3, #7
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	429a      	cmp	r2, r3
 8001924:	d90c      	bls.n	8001940 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001926:	4b65      	ldr	r3, [pc, #404]	@ (8001abc <HAL_RCC_ClockConfig+0x1b8>)
 8001928:	683a      	ldr	r2, [r7, #0]
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800192e:	4b63      	ldr	r3, [pc, #396]	@ (8001abc <HAL_RCC_ClockConfig+0x1b8>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	429a      	cmp	r2, r3
 800193a:	d001      	beq.n	8001940 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e0b8      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d020      	beq.n	800198e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0304 	and.w	r3, r3, #4
 8001954:	2b00      	cmp	r3, #0
 8001956:	d005      	beq.n	8001964 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001958:	4b59      	ldr	r3, [pc, #356]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	4a58      	ldr	r2, [pc, #352]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800195e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001962:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0308 	and.w	r3, r3, #8
 800196c:	2b00      	cmp	r3, #0
 800196e:	d005      	beq.n	800197c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001970:	4b53      	ldr	r3, [pc, #332]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	4a52      	ldr	r2, [pc, #328]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8001976:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800197a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800197c:	4b50      	ldr	r3, [pc, #320]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	494d      	ldr	r1, [pc, #308]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800198a:	4313      	orrs	r3, r2
 800198c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	2b00      	cmp	r3, #0
 8001998:	d044      	beq.n	8001a24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d107      	bne.n	80019b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a2:	4b47      	ldr	r3, [pc, #284]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d119      	bne.n	80019e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e07f      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d003      	beq.n	80019c2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019be:	2b03      	cmp	r3, #3
 80019c0:	d107      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019c2:	4b3f      	ldr	r3, [pc, #252]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d109      	bne.n	80019e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e06f      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d101      	bne.n	80019e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e067      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019e2:	4b37      	ldr	r3, [pc, #220]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f023 0203 	bic.w	r2, r3, #3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	4934      	ldr	r1, [pc, #208]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019f4:	f7ff fa6a 	bl	8000ecc <HAL_GetTick>
 80019f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019fa:	e00a      	b.n	8001a12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019fc:	f7ff fa66 	bl	8000ecc <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e04f      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a12:	4b2b      	ldr	r3, [pc, #172]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f003 020c 	and.w	r2, r3, #12
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d1eb      	bne.n	80019fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a24:	4b25      	ldr	r3, [pc, #148]	@ (8001abc <HAL_RCC_ClockConfig+0x1b8>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0307 	and.w	r3, r3, #7
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d20c      	bcs.n	8001a4c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a32:	4b22      	ldr	r3, [pc, #136]	@ (8001abc <HAL_RCC_ClockConfig+0x1b8>)
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3a:	4b20      	ldr	r3, [pc, #128]	@ (8001abc <HAL_RCC_ClockConfig+0x1b8>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d001      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e032      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0304 	and.w	r3, r3, #4
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d008      	beq.n	8001a6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a58:	4b19      	ldr	r3, [pc, #100]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	4916      	ldr	r1, [pc, #88]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0308 	and.w	r3, r3, #8
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d009      	beq.n	8001a8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a76:	4b12      	ldr	r3, [pc, #72]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	490e      	ldr	r1, [pc, #56]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a8a:	f000 f821 	bl	8001ad0 <HAL_RCC_GetSysClockFreq>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	091b      	lsrs	r3, r3, #4
 8001a96:	f003 030f 	and.w	r3, r3, #15
 8001a9a:	490a      	ldr	r1, [pc, #40]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a9c:	5ccb      	ldrb	r3, [r1, r3]
 8001a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa2:	4a09      	ldr	r2, [pc, #36]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001aa6:	4b09      	ldr	r3, [pc, #36]	@ (8001acc <HAL_RCC_ClockConfig+0x1c8>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff f860 	bl	8000b70 <HAL_InitTick>

  return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40023c00 	.word	0x40023c00
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	080067f0 	.word	0x080067f0
 8001ac8:	20000000 	.word	0x20000000
 8001acc:	20000004 	.word	0x20000004

08001ad0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ad0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ad4:	b090      	sub	sp, #64	@ 0x40
 8001ad6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001adc:	2300      	movs	r3, #0
 8001ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ae8:	4b59      	ldr	r3, [pc, #356]	@ (8001c50 <HAL_RCC_GetSysClockFreq+0x180>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f003 030c 	and.w	r3, r3, #12
 8001af0:	2b08      	cmp	r3, #8
 8001af2:	d00d      	beq.n	8001b10 <HAL_RCC_GetSysClockFreq+0x40>
 8001af4:	2b08      	cmp	r3, #8
 8001af6:	f200 80a1 	bhi.w	8001c3c <HAL_RCC_GetSysClockFreq+0x16c>
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d002      	beq.n	8001b04 <HAL_RCC_GetSysClockFreq+0x34>
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	d003      	beq.n	8001b0a <HAL_RCC_GetSysClockFreq+0x3a>
 8001b02:	e09b      	b.n	8001c3c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b04:	4b53      	ldr	r3, [pc, #332]	@ (8001c54 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b06:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b08:	e09b      	b.n	8001c42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b0a:	4b53      	ldr	r3, [pc, #332]	@ (8001c58 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b0c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b0e:	e098      	b.n	8001c42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b10:	4b4f      	ldr	r3, [pc, #316]	@ (8001c50 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b18:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b1a:	4b4d      	ldr	r3, [pc, #308]	@ (8001c50 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d028      	beq.n	8001b78 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b26:	4b4a      	ldr	r3, [pc, #296]	@ (8001c50 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	099b      	lsrs	r3, r3, #6
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	623b      	str	r3, [r7, #32]
 8001b30:	627a      	str	r2, [r7, #36]	@ 0x24
 8001b32:	6a3b      	ldr	r3, [r7, #32]
 8001b34:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b38:	2100      	movs	r1, #0
 8001b3a:	4b47      	ldr	r3, [pc, #284]	@ (8001c58 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b3c:	fb03 f201 	mul.w	r2, r3, r1
 8001b40:	2300      	movs	r3, #0
 8001b42:	fb00 f303 	mul.w	r3, r0, r3
 8001b46:	4413      	add	r3, r2
 8001b48:	4a43      	ldr	r2, [pc, #268]	@ (8001c58 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b4a:	fba0 1202 	umull	r1, r2, r0, r2
 8001b4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b50:	460a      	mov	r2, r1
 8001b52:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001b54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b56:	4413      	add	r3, r2
 8001b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	61bb      	str	r3, [r7, #24]
 8001b60:	61fa      	str	r2, [r7, #28]
 8001b62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b66:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001b6a:	f7fe fb39 	bl	80001e0 <__aeabi_uldivmod>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	4613      	mov	r3, r2
 8001b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b76:	e053      	b.n	8001c20 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b78:	4b35      	ldr	r3, [pc, #212]	@ (8001c50 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	099b      	lsrs	r3, r3, #6
 8001b7e:	2200      	movs	r2, #0
 8001b80:	613b      	str	r3, [r7, #16]
 8001b82:	617a      	str	r2, [r7, #20]
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001b8a:	f04f 0b00 	mov.w	fp, #0
 8001b8e:	4652      	mov	r2, sl
 8001b90:	465b      	mov	r3, fp
 8001b92:	f04f 0000 	mov.w	r0, #0
 8001b96:	f04f 0100 	mov.w	r1, #0
 8001b9a:	0159      	lsls	r1, r3, #5
 8001b9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ba0:	0150      	lsls	r0, r2, #5
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	ebb2 080a 	subs.w	r8, r2, sl
 8001baa:	eb63 090b 	sbc.w	r9, r3, fp
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	f04f 0300 	mov.w	r3, #0
 8001bb6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001bba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001bbe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001bc2:	ebb2 0408 	subs.w	r4, r2, r8
 8001bc6:	eb63 0509 	sbc.w	r5, r3, r9
 8001bca:	f04f 0200 	mov.w	r2, #0
 8001bce:	f04f 0300 	mov.w	r3, #0
 8001bd2:	00eb      	lsls	r3, r5, #3
 8001bd4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bd8:	00e2      	lsls	r2, r4, #3
 8001bda:	4614      	mov	r4, r2
 8001bdc:	461d      	mov	r5, r3
 8001bde:	eb14 030a 	adds.w	r3, r4, sl
 8001be2:	603b      	str	r3, [r7, #0]
 8001be4:	eb45 030b 	adc.w	r3, r5, fp
 8001be8:	607b      	str	r3, [r7, #4]
 8001bea:	f04f 0200 	mov.w	r2, #0
 8001bee:	f04f 0300 	mov.w	r3, #0
 8001bf2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bf6:	4629      	mov	r1, r5
 8001bf8:	028b      	lsls	r3, r1, #10
 8001bfa:	4621      	mov	r1, r4
 8001bfc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c00:	4621      	mov	r1, r4
 8001c02:	028a      	lsls	r2, r1, #10
 8001c04:	4610      	mov	r0, r2
 8001c06:	4619      	mov	r1, r3
 8001c08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	60bb      	str	r3, [r7, #8]
 8001c0e:	60fa      	str	r2, [r7, #12]
 8001c10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c14:	f7fe fae4 	bl	80001e0 <__aeabi_uldivmod>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001c20:	4b0b      	ldr	r3, [pc, #44]	@ (8001c50 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	0c1b      	lsrs	r3, r3, #16
 8001c26:	f003 0303 	and.w	r3, r3, #3
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001c30:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c38:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001c3a:	e002      	b.n	8001c42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c3c:	4b05      	ldr	r3, [pc, #20]	@ (8001c54 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c3e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001c40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3740      	adds	r7, #64	@ 0x40
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c4e:	bf00      	nop
 8001c50:	40023800 	.word	0x40023800
 8001c54:	00f42400 	.word	0x00f42400
 8001c58:	017d7840 	.word	0x017d7840

08001c5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c60:	4b03      	ldr	r3, [pc, #12]	@ (8001c70 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c62:	681b      	ldr	r3, [r3, #0]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	20000000 	.word	0x20000000

08001c74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c78:	f7ff fff0 	bl	8001c5c <HAL_RCC_GetHCLKFreq>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	4b05      	ldr	r3, [pc, #20]	@ (8001c94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	0b5b      	lsrs	r3, r3, #13
 8001c84:	f003 0307 	and.w	r3, r3, #7
 8001c88:	4903      	ldr	r1, [pc, #12]	@ (8001c98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c8a:	5ccb      	ldrb	r3, [r1, r3]
 8001c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40023800 	.word	0x40023800
 8001c98:	08006800 	.word	0x08006800

08001c9c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	220f      	movs	r2, #15
 8001caa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001cac:	4b12      	ldr	r3, [pc, #72]	@ (8001cf8 <HAL_RCC_GetClockConfig+0x5c>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 0203 	and.w	r2, r3, #3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf8 <HAL_RCC_GetClockConfig+0x5c>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf8 <HAL_RCC_GetClockConfig+0x5c>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001cd0:	4b09      	ldr	r3, [pc, #36]	@ (8001cf8 <HAL_RCC_GetClockConfig+0x5c>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	08db      	lsrs	r3, r3, #3
 8001cd6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001cde:	4b07      	ldr	r3, [pc, #28]	@ (8001cfc <HAL_RCC_GetClockConfig+0x60>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0207 	and.w	r2, r3, #7
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	601a      	str	r2, [r3, #0]
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	40023c00 	.word	0x40023c00

08001d00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d101      	bne.n	8001d12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e041      	b.n	8001d96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d106      	bne.n	8001d2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f839 	bl	8001d9e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2202      	movs	r2, #2
 8001d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3304      	adds	r3, #4
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4610      	mov	r0, r2
 8001d40:	f000 f9b2 	bl	80020a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b083      	sub	sp, #12
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
	...

08001db4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d001      	beq.n	8001dcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e044      	b.n	8001e56 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2202      	movs	r2, #2
 8001dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68da      	ldr	r2, [r3, #12]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f042 0201 	orr.w	r2, r2, #1
 8001de2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a1e      	ldr	r2, [pc, #120]	@ (8001e64 <HAL_TIM_Base_Start_IT+0xb0>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d018      	beq.n	8001e20 <HAL_TIM_Base_Start_IT+0x6c>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001df6:	d013      	beq.n	8001e20 <HAL_TIM_Base_Start_IT+0x6c>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a1a      	ldr	r2, [pc, #104]	@ (8001e68 <HAL_TIM_Base_Start_IT+0xb4>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d00e      	beq.n	8001e20 <HAL_TIM_Base_Start_IT+0x6c>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a19      	ldr	r2, [pc, #100]	@ (8001e6c <HAL_TIM_Base_Start_IT+0xb8>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d009      	beq.n	8001e20 <HAL_TIM_Base_Start_IT+0x6c>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a17      	ldr	r2, [pc, #92]	@ (8001e70 <HAL_TIM_Base_Start_IT+0xbc>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d004      	beq.n	8001e20 <HAL_TIM_Base_Start_IT+0x6c>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a16      	ldr	r2, [pc, #88]	@ (8001e74 <HAL_TIM_Base_Start_IT+0xc0>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d111      	bne.n	8001e44 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2b06      	cmp	r3, #6
 8001e30:	d010      	beq.n	8001e54 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f042 0201 	orr.w	r2, r2, #1
 8001e40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e42:	e007      	b.n	8001e54 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f042 0201 	orr.w	r2, r2, #1
 8001e52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3714      	adds	r7, #20
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	40010000 	.word	0x40010000
 8001e68:	40000400 	.word	0x40000400
 8001e6c:	40000800 	.word	0x40000800
 8001e70:	40000c00 	.word	0x40000c00
 8001e74:	40014000 	.word	0x40014000

08001e78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d020      	beq.n	8001edc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d01b      	beq.n	8001edc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f06f 0202 	mvn.w	r2, #2
 8001eac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f8d2 	bl	800206c <HAL_TIM_IC_CaptureCallback>
 8001ec8:	e005      	b.n	8001ed6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 f8c4 	bl	8002058 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f000 f8d5 	bl	8002080 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	f003 0304 	and.w	r3, r3, #4
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d020      	beq.n	8001f28 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f003 0304 	and.w	r3, r3, #4
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d01b      	beq.n	8001f28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f06f 0204 	mvn.w	r2, #4
 8001ef8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2202      	movs	r2, #2
 8001efe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 f8ac 	bl	800206c <HAL_TIM_IC_CaptureCallback>
 8001f14:	e005      	b.n	8001f22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f89e 	bl	8002058 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 f8af 	bl	8002080 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	f003 0308 	and.w	r3, r3, #8
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d020      	beq.n	8001f74 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f003 0308 	and.w	r3, r3, #8
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d01b      	beq.n	8001f74 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f06f 0208 	mvn.w	r2, #8
 8001f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2204      	movs	r2, #4
 8001f4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	f003 0303 	and.w	r3, r3, #3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f886 	bl	800206c <HAL_TIM_IC_CaptureCallback>
 8001f60:	e005      	b.n	8001f6e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f878 	bl	8002058 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 f889 	bl	8002080 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	f003 0310 	and.w	r3, r3, #16
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d020      	beq.n	8001fc0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f003 0310 	and.w	r3, r3, #16
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d01b      	beq.n	8001fc0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f06f 0210 	mvn.w	r2, #16
 8001f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2208      	movs	r2, #8
 8001f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 f860 	bl	800206c <HAL_TIM_IC_CaptureCallback>
 8001fac:	e005      	b.n	8001fba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f852 	bl	8002058 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f000 f863 	bl	8002080 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00c      	beq.n	8001fe4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d007      	beq.n	8001fe4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f06f 0201 	mvn.w	r2, #1
 8001fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7fe fd82 	bl	8000ae8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d00c      	beq.n	8002008 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d007      	beq.n	8002008 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f8e6 	bl	80021d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800200e:	2b00      	cmp	r3, #0
 8002010:	d00c      	beq.n	800202c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002018:	2b00      	cmp	r3, #0
 800201a:	d007      	beq.n	800202c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 f834 	bl	8002094 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	f003 0320 	and.w	r3, r3, #32
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00c      	beq.n	8002050 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f003 0320 	and.w	r3, r3, #32
 800203c:	2b00      	cmp	r3, #0
 800203e:	d007      	beq.n	8002050 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f06f 0220 	mvn.w	r2, #32
 8002048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f8b8 	bl	80021c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002050:	bf00      	nop
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a3a      	ldr	r2, [pc, #232]	@ (80021a4 <TIM_Base_SetConfig+0xfc>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d00f      	beq.n	80020e0 <TIM_Base_SetConfig+0x38>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020c6:	d00b      	beq.n	80020e0 <TIM_Base_SetConfig+0x38>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a37      	ldr	r2, [pc, #220]	@ (80021a8 <TIM_Base_SetConfig+0x100>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d007      	beq.n	80020e0 <TIM_Base_SetConfig+0x38>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a36      	ldr	r2, [pc, #216]	@ (80021ac <TIM_Base_SetConfig+0x104>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d003      	beq.n	80020e0 <TIM_Base_SetConfig+0x38>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a35      	ldr	r2, [pc, #212]	@ (80021b0 <TIM_Base_SetConfig+0x108>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d108      	bne.n	80020f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a2b      	ldr	r2, [pc, #172]	@ (80021a4 <TIM_Base_SetConfig+0xfc>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d01b      	beq.n	8002132 <TIM_Base_SetConfig+0x8a>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002100:	d017      	beq.n	8002132 <TIM_Base_SetConfig+0x8a>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a28      	ldr	r2, [pc, #160]	@ (80021a8 <TIM_Base_SetConfig+0x100>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d013      	beq.n	8002132 <TIM_Base_SetConfig+0x8a>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a27      	ldr	r2, [pc, #156]	@ (80021ac <TIM_Base_SetConfig+0x104>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d00f      	beq.n	8002132 <TIM_Base_SetConfig+0x8a>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a26      	ldr	r2, [pc, #152]	@ (80021b0 <TIM_Base_SetConfig+0x108>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d00b      	beq.n	8002132 <TIM_Base_SetConfig+0x8a>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a25      	ldr	r2, [pc, #148]	@ (80021b4 <TIM_Base_SetConfig+0x10c>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d007      	beq.n	8002132 <TIM_Base_SetConfig+0x8a>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a24      	ldr	r2, [pc, #144]	@ (80021b8 <TIM_Base_SetConfig+0x110>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d003      	beq.n	8002132 <TIM_Base_SetConfig+0x8a>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a23      	ldr	r2, [pc, #140]	@ (80021bc <TIM_Base_SetConfig+0x114>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d108      	bne.n	8002144 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002138:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	4313      	orrs	r3, r2
 8002142:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	4313      	orrs	r3, r2
 8002150:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	689a      	ldr	r2, [r3, #8]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a0e      	ldr	r2, [pc, #56]	@ (80021a4 <TIM_Base_SetConfig+0xfc>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d103      	bne.n	8002178 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	691a      	ldr	r2, [r3, #16]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b01      	cmp	r3, #1
 8002188:	d105      	bne.n	8002196 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	f023 0201 	bic.w	r2, r3, #1
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	611a      	str	r2, [r3, #16]
  }
}
 8002196:	bf00      	nop
 8002198:	3714      	adds	r7, #20
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	40010000 	.word	0x40010000
 80021a8:	40000400 	.word	0x40000400
 80021ac:	40000800 	.word	0x40000800
 80021b0:	40000c00 	.word	0x40000c00
 80021b4:	40014000 	.word	0x40014000
 80021b8:	40014400 	.word	0x40014400
 80021bc:	40014800 	.word	0x40014800

080021c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <__NVIC_SetPriority>:
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	6039      	str	r1, [r7, #0]
 80021f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	db0a      	blt.n	8002212 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	490c      	ldr	r1, [pc, #48]	@ (8002234 <__NVIC_SetPriority+0x4c>)
 8002202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002206:	0112      	lsls	r2, r2, #4
 8002208:	b2d2      	uxtb	r2, r2
 800220a:	440b      	add	r3, r1
 800220c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002210:	e00a      	b.n	8002228 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	b2da      	uxtb	r2, r3
 8002216:	4908      	ldr	r1, [pc, #32]	@ (8002238 <__NVIC_SetPriority+0x50>)
 8002218:	79fb      	ldrb	r3, [r7, #7]
 800221a:	f003 030f 	and.w	r3, r3, #15
 800221e:	3b04      	subs	r3, #4
 8002220:	0112      	lsls	r2, r2, #4
 8002222:	b2d2      	uxtb	r2, r2
 8002224:	440b      	add	r3, r1
 8002226:	761a      	strb	r2, [r3, #24]
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	e000e100 	.word	0xe000e100
 8002238:	e000ed00 	.word	0xe000ed00

0800223c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002240:	4b05      	ldr	r3, [pc, #20]	@ (8002258 <SysTick_Handler+0x1c>)
 8002242:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002244:	f002 fb7c 	bl	8004940 <xTaskGetSchedulerState>
 8002248:	4603      	mov	r3, r0
 800224a:	2b01      	cmp	r3, #1
 800224c:	d001      	beq.n	8002252 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800224e:	f003 fa73 	bl	8005738 <xPortSysTickHandler>
  }
}
 8002252:	bf00      	nop
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	e000e010 	.word	0xe000e010

0800225c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002260:	2100      	movs	r1, #0
 8002262:	f06f 0004 	mvn.w	r0, #4
 8002266:	f7ff ffbf 	bl	80021e8 <__NVIC_SetPriority>
#endif
}
 800226a:	bf00      	nop
 800226c:	bd80      	pop	{r7, pc}
	...

08002270 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002276:	f3ef 8305 	mrs	r3, IPSR
 800227a:	603b      	str	r3, [r7, #0]
  return(result);
 800227c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002282:	f06f 0305 	mvn.w	r3, #5
 8002286:	607b      	str	r3, [r7, #4]
 8002288:	e00c      	b.n	80022a4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800228a:	4b0a      	ldr	r3, [pc, #40]	@ (80022b4 <osKernelInitialize+0x44>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d105      	bne.n	800229e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002292:	4b08      	ldr	r3, [pc, #32]	@ (80022b4 <osKernelInitialize+0x44>)
 8002294:	2201      	movs	r2, #1
 8002296:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002298:	2300      	movs	r3, #0
 800229a:	607b      	str	r3, [r7, #4]
 800229c:	e002      	b.n	80022a4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800229e:	f04f 33ff 	mov.w	r3, #4294967295
 80022a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80022a4:	687b      	ldr	r3, [r7, #4]
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	200000f8 	.word	0x200000f8

080022b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022be:	f3ef 8305 	mrs	r3, IPSR
 80022c2:	603b      	str	r3, [r7, #0]
  return(result);
 80022c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d003      	beq.n	80022d2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80022ca:	f06f 0305 	mvn.w	r3, #5
 80022ce:	607b      	str	r3, [r7, #4]
 80022d0:	e010      	b.n	80022f4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80022d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002300 <osKernelStart+0x48>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d109      	bne.n	80022ee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80022da:	f7ff ffbf 	bl	800225c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80022de:	4b08      	ldr	r3, [pc, #32]	@ (8002300 <osKernelStart+0x48>)
 80022e0:	2202      	movs	r2, #2
 80022e2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80022e4:	f001 feb6 	bl	8004054 <vTaskStartScheduler>
      stat = osOK;
 80022e8:	2300      	movs	r3, #0
 80022ea:	607b      	str	r3, [r7, #4]
 80022ec:	e002      	b.n	80022f4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80022ee:	f04f 33ff 	mov.w	r3, #4294967295
 80022f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80022f4:	687b      	ldr	r3, [r7, #4]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	200000f8 	.word	0x200000f8

08002304 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800230a:	f3ef 8305 	mrs	r3, IPSR
 800230e:	603b      	str	r3, [r7, #0]
  return(result);
 8002310:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8002316:	f001 ffc9 	bl	80042ac <xTaskGetTickCountFromISR>
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	e002      	b.n	8002324 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800231e:	f001 ffb5 	bl	800428c <xTaskGetTickCount>
 8002322:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8002324:	687b      	ldr	r3, [r7, #4]
}
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800232e:	b580      	push	{r7, lr}
 8002330:	b08e      	sub	sp, #56	@ 0x38
 8002332:	af04      	add	r7, sp, #16
 8002334:	60f8      	str	r0, [r7, #12]
 8002336:	60b9      	str	r1, [r7, #8]
 8002338:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800233a:	2300      	movs	r3, #0
 800233c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800233e:	f3ef 8305 	mrs	r3, IPSR
 8002342:	617b      	str	r3, [r7, #20]
  return(result);
 8002344:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002346:	2b00      	cmp	r3, #0
 8002348:	d17e      	bne.n	8002448 <osThreadNew+0x11a>
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d07b      	beq.n	8002448 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002350:	2380      	movs	r3, #128	@ 0x80
 8002352:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002354:	2318      	movs	r3, #24
 8002356:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002358:	2300      	movs	r3, #0
 800235a:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800235c:	f04f 33ff 	mov.w	r3, #4294967295
 8002360:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d045      	beq.n	80023f4 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d002      	beq.n	8002376 <osThreadNew+0x48>
        name = attr->name;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d002      	beq.n	8002384 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d008      	beq.n	800239c <osThreadNew+0x6e>
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	2b38      	cmp	r3, #56	@ 0x38
 800238e:	d805      	bhi.n	800239c <osThreadNew+0x6e>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <osThreadNew+0x72>
        return (NULL);
 800239c:	2300      	movs	r3, #0
 800239e:	e054      	b.n	800244a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	695b      	ldr	r3, [r3, #20]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	695b      	ldr	r3, [r3, #20]
 80023ac:	089b      	lsrs	r3, r3, #2
 80023ae:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d00e      	beq.n	80023d6 <osThreadNew+0xa8>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	2ba7      	cmp	r3, #167	@ 0xa7
 80023be:	d90a      	bls.n	80023d6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d006      	beq.n	80023d6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	695b      	ldr	r3, [r3, #20]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d002      	beq.n	80023d6 <osThreadNew+0xa8>
        mem = 1;
 80023d0:	2301      	movs	r3, #1
 80023d2:	61bb      	str	r3, [r7, #24]
 80023d4:	e010      	b.n	80023f8 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d10c      	bne.n	80023f8 <osThreadNew+0xca>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d108      	bne.n	80023f8 <osThreadNew+0xca>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d104      	bne.n	80023f8 <osThreadNew+0xca>
          mem = 0;
 80023ee:	2300      	movs	r3, #0
 80023f0:	61bb      	str	r3, [r7, #24]
 80023f2:	e001      	b.n	80023f8 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80023f4:	2300      	movs	r3, #0
 80023f6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d110      	bne.n	8002420 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002406:	9202      	str	r2, [sp, #8]
 8002408:	9301      	str	r3, [sp, #4]
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	9300      	str	r3, [sp, #0]
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	6a3a      	ldr	r2, [r7, #32]
 8002412:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002414:	68f8      	ldr	r0, [r7, #12]
 8002416:	f001 fb21 	bl	8003a5c <xTaskCreateStatic>
 800241a:	4603      	mov	r3, r0
 800241c:	613b      	str	r3, [r7, #16]
 800241e:	e013      	b.n	8002448 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d110      	bne.n	8002448 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002426:	6a3b      	ldr	r3, [r7, #32]
 8002428:	b29a      	uxth	r2, r3
 800242a:	f107 0310 	add.w	r3, r7, #16
 800242e:	9301      	str	r3, [sp, #4]
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f001 fb6f 	bl	8003b1c <xTaskCreate>
 800243e:	4603      	mov	r3, r0
 8002440:	2b01      	cmp	r3, #1
 8002442:	d001      	beq.n	8002448 <osThreadNew+0x11a>
            hTask = NULL;
 8002444:	2300      	movs	r3, #0
 8002446:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002448:	693b      	ldr	r3, [r7, #16]
}
 800244a:	4618      	mov	r0, r3
 800244c:	3728      	adds	r7, #40	@ 0x28
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8002452:	b580      	push	{r7, lr}
 8002454:	b086      	sub	sp, #24
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800245e:	f3ef 8305 	mrs	r3, IPSR
 8002462:	60fb      	str	r3, [r7, #12]
  return(result);
 8002464:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <osThreadSuspend+0x20>
    stat = osErrorISR;
 800246a:	f06f 0305 	mvn.w	r3, #5
 800246e:	617b      	str	r3, [r7, #20]
 8002470:	e00b      	b.n	800248a <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d103      	bne.n	8002480 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8002478:	f06f 0303 	mvn.w	r3, #3
 800247c:	617b      	str	r3, [r7, #20]
 800247e:	e004      	b.n	800248a <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8002480:	2300      	movs	r3, #0
 8002482:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8002484:	6938      	ldr	r0, [r7, #16]
 8002486:	f001 fcdd 	bl	8003e44 <vTaskSuspend>
  }

  return (stat);
 800248a:	697b      	ldr	r3, [r7, #20]
}
 800248c:	4618      	mov	r0, r3
 800248e:	3718      	adds	r7, #24
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024a0:	f3ef 8305 	mrs	r3, IPSR
 80024a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80024a6:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d003      	beq.n	80024b4 <osThreadResume+0x20>
    stat = osErrorISR;
 80024ac:	f06f 0305 	mvn.w	r3, #5
 80024b0:	617b      	str	r3, [r7, #20]
 80024b2:	e00b      	b.n	80024cc <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d103      	bne.n	80024c2 <osThreadResume+0x2e>
    stat = osErrorParameter;
 80024ba:	f06f 0303 	mvn.w	r3, #3
 80024be:	617b      	str	r3, [r7, #20]
 80024c0:	e004      	b.n	80024cc <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 80024c2:	2300      	movs	r3, #0
 80024c4:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 80024c6:	6938      	ldr	r0, [r7, #16]
 80024c8:	f001 fd64 	bl	8003f94 <vTaskResume>
  }

  return (stat);
 80024cc:	697b      	ldr	r3, [r7, #20]
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3718      	adds	r7, #24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b084      	sub	sp, #16
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024de:	f3ef 8305 	mrs	r3, IPSR
 80024e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80024e4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <osDelay+0x1c>
    stat = osErrorISR;
 80024ea:	f06f 0305 	mvn.w	r3, #5
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	e007      	b.n	8002502 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80024f2:	2300      	movs	r3, #0
 80024f4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d002      	beq.n	8002502 <osDelay+0x2c>
      vTaskDelay(ticks);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f001 fc6b 	bl	8003dd8 <vTaskDelay>
    }
  }

  return (stat);
 8002502:	68fb      	ldr	r3, [r7, #12]
}
 8002504:	4618      	mov	r0, r3
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800250c:	b580      	push	{r7, lr}
 800250e:	b08a      	sub	sp, #40	@ 0x28
 8002510:	af02      	add	r7, sp, #8
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8002518:	2300      	movs	r3, #0
 800251a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800251c:	f3ef 8305 	mrs	r3, IPSR
 8002520:	613b      	str	r3, [r7, #16]
  return(result);
 8002522:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8002524:	2b00      	cmp	r3, #0
 8002526:	d175      	bne.n	8002614 <osSemaphoreNew+0x108>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d072      	beq.n	8002614 <osSemaphoreNew+0x108>
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	429a      	cmp	r2, r3
 8002534:	d86e      	bhi.n	8002614 <osSemaphoreNew+0x108>
    mem = -1;
 8002536:	f04f 33ff 	mov.w	r3, #4294967295
 800253a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d015      	beq.n	800256e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d006      	beq.n	8002558 <osSemaphoreNew+0x4c>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	2b4f      	cmp	r3, #79	@ 0x4f
 8002550:	d902      	bls.n	8002558 <osSemaphoreNew+0x4c>
        mem = 1;
 8002552:	2301      	movs	r3, #1
 8002554:	61bb      	str	r3, [r7, #24]
 8002556:	e00c      	b.n	8002572 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d108      	bne.n	8002572 <osSemaphoreNew+0x66>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d104      	bne.n	8002572 <osSemaphoreNew+0x66>
          mem = 0;
 8002568:	2300      	movs	r3, #0
 800256a:	61bb      	str	r3, [r7, #24]
 800256c:	e001      	b.n	8002572 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800256e:	2300      	movs	r3, #0
 8002570:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002578:	d04c      	beq.n	8002614 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d128      	bne.n	80025d2 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d10a      	bne.n	800259c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	2203      	movs	r2, #3
 800258c:	9200      	str	r2, [sp, #0]
 800258e:	2200      	movs	r2, #0
 8002590:	2100      	movs	r1, #0
 8002592:	2001      	movs	r0, #1
 8002594:	f000 faa0 	bl	8002ad8 <xQueueGenericCreateStatic>
 8002598:	61f8      	str	r0, [r7, #28]
 800259a:	e005      	b.n	80025a8 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800259c:	2203      	movs	r2, #3
 800259e:	2100      	movs	r1, #0
 80025a0:	2001      	movs	r0, #1
 80025a2:	f000 fb16 	bl	8002bd2 <xQueueGenericCreate>
 80025a6:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d022      	beq.n	80025f4 <osSemaphoreNew+0xe8>
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d01f      	beq.n	80025f4 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80025b4:	2300      	movs	r3, #0
 80025b6:	2200      	movs	r2, #0
 80025b8:	2100      	movs	r1, #0
 80025ba:	69f8      	ldr	r0, [r7, #28]
 80025bc:	f000 fbd6 	bl	8002d6c <xQueueGenericSend>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d016      	beq.n	80025f4 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80025c6:	69f8      	ldr	r0, [r7, #28]
 80025c8:	f001 f874 	bl	80036b4 <vQueueDelete>
            hSemaphore = NULL;
 80025cc:	2300      	movs	r3, #0
 80025ce:	61fb      	str	r3, [r7, #28]
 80025d0:	e010      	b.n	80025f4 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d108      	bne.n	80025ea <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	461a      	mov	r2, r3
 80025de:	68b9      	ldr	r1, [r7, #8]
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f000 fb54 	bl	8002c8e <xQueueCreateCountingSemaphoreStatic>
 80025e6:	61f8      	str	r0, [r7, #28]
 80025e8:	e004      	b.n	80025f4 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80025ea:	68b9      	ldr	r1, [r7, #8]
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	f000 fb87 	bl	8002d00 <xQueueCreateCountingSemaphore>
 80025f2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00c      	beq.n	8002614 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d003      	beq.n	8002608 <osSemaphoreNew+0xfc>
          name = attr->name;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	617b      	str	r3, [r7, #20]
 8002606:	e001      	b.n	800260c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8002608:	2300      	movs	r3, #0
 800260a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800260c:	6979      	ldr	r1, [r7, #20]
 800260e:	69f8      	ldr	r0, [r7, #28]
 8002610:	f001 f99c 	bl	800394c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8002614:	69fb      	ldr	r3, [r7, #28]
}
 8002616:	4618      	mov	r0, r3
 8002618:	3720      	adds	r7, #32
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
	...

08002620 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800262e:	2300      	movs	r3, #0
 8002630:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d103      	bne.n	8002640 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8002638:	f06f 0303 	mvn.w	r3, #3
 800263c:	617b      	str	r3, [r7, #20]
 800263e:	e039      	b.n	80026b4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002640:	f3ef 8305 	mrs	r3, IPSR
 8002644:	60fb      	str	r3, [r7, #12]
  return(result);
 8002646:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002648:	2b00      	cmp	r3, #0
 800264a:	d022      	beq.n	8002692 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d003      	beq.n	800265a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8002652:	f06f 0303 	mvn.w	r3, #3
 8002656:	617b      	str	r3, [r7, #20]
 8002658:	e02c      	b.n	80026b4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800265a:	2300      	movs	r3, #0
 800265c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800265e:	f107 0308 	add.w	r3, r7, #8
 8002662:	461a      	mov	r2, r3
 8002664:	2100      	movs	r1, #0
 8002666:	6938      	ldr	r0, [r7, #16]
 8002668:	f000 ffa2 	bl	80035b0 <xQueueReceiveFromISR>
 800266c:	4603      	mov	r3, r0
 800266e:	2b01      	cmp	r3, #1
 8002670:	d003      	beq.n	800267a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8002672:	f06f 0302 	mvn.w	r3, #2
 8002676:	617b      	str	r3, [r7, #20]
 8002678:	e01c      	b.n	80026b4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d019      	beq.n	80026b4 <osSemaphoreAcquire+0x94>
 8002680:	4b0f      	ldr	r3, [pc, #60]	@ (80026c0 <osSemaphoreAcquire+0xa0>)
 8002682:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	f3bf 8f4f 	dsb	sy
 800268c:	f3bf 8f6f 	isb	sy
 8002690:	e010      	b.n	80026b4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8002692:	6839      	ldr	r1, [r7, #0]
 8002694:	6938      	ldr	r0, [r7, #16]
 8002696:	f000 fe7b 	bl	8003390 <xQueueSemaphoreTake>
 800269a:	4603      	mov	r3, r0
 800269c:	2b01      	cmp	r3, #1
 800269e:	d009      	beq.n	80026b4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80026a6:	f06f 0301 	mvn.w	r3, #1
 80026aa:	617b      	str	r3, [r7, #20]
 80026ac:	e002      	b.n	80026b4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80026ae:	f06f 0302 	mvn.w	r3, #2
 80026b2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80026b4:	697b      	ldr	r3, [r7, #20]
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3718      	adds	r7, #24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	e000ed04 	.word	0xe000ed04

080026c4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80026d0:	2300      	movs	r3, #0
 80026d2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d103      	bne.n	80026e2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80026da:	f06f 0303 	mvn.w	r3, #3
 80026de:	617b      	str	r3, [r7, #20]
 80026e0:	e02c      	b.n	800273c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026e2:	f3ef 8305 	mrs	r3, IPSR
 80026e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80026e8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d01a      	beq.n	8002724 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80026ee:	2300      	movs	r3, #0
 80026f0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80026f2:	f107 0308 	add.w	r3, r7, #8
 80026f6:	4619      	mov	r1, r3
 80026f8:	6938      	ldr	r0, [r7, #16]
 80026fa:	f000 fcd7 	bl	80030ac <xQueueGiveFromISR>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b01      	cmp	r3, #1
 8002702:	d003      	beq.n	800270c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8002704:	f06f 0302 	mvn.w	r3, #2
 8002708:	617b      	str	r3, [r7, #20]
 800270a:	e017      	b.n	800273c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d014      	beq.n	800273c <osSemaphoreRelease+0x78>
 8002712:	4b0d      	ldr	r3, [pc, #52]	@ (8002748 <osSemaphoreRelease+0x84>)
 8002714:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002718:	601a      	str	r2, [r3, #0]
 800271a:	f3bf 8f4f 	dsb	sy
 800271e:	f3bf 8f6f 	isb	sy
 8002722:	e00b      	b.n	800273c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002724:	2300      	movs	r3, #0
 8002726:	2200      	movs	r2, #0
 8002728:	2100      	movs	r1, #0
 800272a:	6938      	ldr	r0, [r7, #16]
 800272c:	f000 fb1e 	bl	8002d6c <xQueueGenericSend>
 8002730:	4603      	mov	r3, r0
 8002732:	2b01      	cmp	r3, #1
 8002734:	d002      	beq.n	800273c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8002736:	f06f 0302 	mvn.w	r3, #2
 800273a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800273c:	697b      	ldr	r3, [r7, #20]
}
 800273e:	4618      	mov	r0, r3
 8002740:	3718      	adds	r7, #24
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	e000ed04 	.word	0xe000ed04

0800274c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800274c:	b580      	push	{r7, lr}
 800274e:	b08a      	sub	sp, #40	@ 0x28
 8002750:	af02      	add	r7, sp, #8
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8002758:	2300      	movs	r3, #0
 800275a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800275c:	f3ef 8305 	mrs	r3, IPSR
 8002760:	613b      	str	r3, [r7, #16]
  return(result);
 8002762:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8002764:	2b00      	cmp	r3, #0
 8002766:	d15f      	bne.n	8002828 <osMessageQueueNew+0xdc>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d05c      	beq.n	8002828 <osMessageQueueNew+0xdc>
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d059      	beq.n	8002828 <osMessageQueueNew+0xdc>
    mem = -1;
 8002774:	f04f 33ff 	mov.w	r3, #4294967295
 8002778:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d029      	beq.n	80027d4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d012      	beq.n	80027ae <osMessageQueueNew+0x62>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	2b4f      	cmp	r3, #79	@ 0x4f
 800278e:	d90e      	bls.n	80027ae <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00a      	beq.n	80027ae <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	695a      	ldr	r2, [r3, #20]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	68b9      	ldr	r1, [r7, #8]
 80027a0:	fb01 f303 	mul.w	r3, r1, r3
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d302      	bcc.n	80027ae <osMessageQueueNew+0x62>
        mem = 1;
 80027a8:	2301      	movs	r3, #1
 80027aa:	61bb      	str	r3, [r7, #24]
 80027ac:	e014      	b.n	80027d8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d110      	bne.n	80027d8 <osMessageQueueNew+0x8c>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10c      	bne.n	80027d8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d108      	bne.n	80027d8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d104      	bne.n	80027d8 <osMessageQueueNew+0x8c>
          mem = 0;
 80027ce:	2300      	movs	r3, #0
 80027d0:	61bb      	str	r3, [r7, #24]
 80027d2:	e001      	b.n	80027d8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80027d4:	2300      	movs	r3, #0
 80027d6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d10b      	bne.n	80027f6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	691a      	ldr	r2, [r3, #16]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	2100      	movs	r1, #0
 80027e8:	9100      	str	r1, [sp, #0]
 80027ea:	68b9      	ldr	r1, [r7, #8]
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f000 f973 	bl	8002ad8 <xQueueGenericCreateStatic>
 80027f2:	61f8      	str	r0, [r7, #28]
 80027f4:	e008      	b.n	8002808 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d105      	bne.n	8002808 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80027fc:	2200      	movs	r2, #0
 80027fe:	68b9      	ldr	r1, [r7, #8]
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f000 f9e6 	bl	8002bd2 <xQueueGenericCreate>
 8002806:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00c      	beq.n	8002828 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d003      	beq.n	800281c <osMessageQueueNew+0xd0>
        name = attr->name;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	617b      	str	r3, [r7, #20]
 800281a:	e001      	b.n	8002820 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800281c:	2300      	movs	r3, #0
 800281e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8002820:	6979      	ldr	r1, [r7, #20]
 8002822:	69f8      	ldr	r0, [r7, #28]
 8002824:	f001 f892 	bl	800394c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8002828:	69fb      	ldr	r3, [r7, #28]
}
 800282a:	4618      	mov	r0, r3
 800282c:	3720      	adds	r7, #32
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
	...

08002834 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	4a07      	ldr	r2, [pc, #28]	@ (8002860 <vApplicationGetIdleTaskMemory+0x2c>)
 8002844:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	4a06      	ldr	r2, [pc, #24]	@ (8002864 <vApplicationGetIdleTaskMemory+0x30>)
 800284a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2280      	movs	r2, #128	@ 0x80
 8002850:	601a      	str	r2, [r3, #0]
}
 8002852:	bf00      	nop
 8002854:	3714      	adds	r7, #20
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	200000fc 	.word	0x200000fc
 8002864:	200001a4 	.word	0x200001a4

08002868 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	4a07      	ldr	r2, [pc, #28]	@ (8002894 <vApplicationGetTimerTaskMemory+0x2c>)
 8002878:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	4a06      	ldr	r2, [pc, #24]	@ (8002898 <vApplicationGetTimerTaskMemory+0x30>)
 800287e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002886:	601a      	str	r2, [r3, #0]
}
 8002888:	bf00      	nop
 800288a:	3714      	adds	r7, #20
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	200003a4 	.word	0x200003a4
 8002898:	2000044c 	.word	0x2000044c

0800289c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f103 0208 	add.w	r2, r3, #8
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f04f 32ff 	mov.w	r2, #4294967295
 80028b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f103 0208 	add.w	r2, r3, #8
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f103 0208 	add.w	r2, r3, #8
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80028ea:	bf00      	nop
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028f6:	b480      	push	{r7}
 80028f8:	b085      	sub	sp, #20
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
 80028fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	1c5a      	adds	r2, r3, #1
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	601a      	str	r2, [r3, #0]
}
 8002932:	bf00      	nop
 8002934:	3714      	adds	r7, #20
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800293e:	b480      	push	{r7}
 8002940:	b085      	sub	sp, #20
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
 8002946:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002954:	d103      	bne.n	800295e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	60fb      	str	r3, [r7, #12]
 800295c:	e00c      	b.n	8002978 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	3308      	adds	r3, #8
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	e002      	b.n	800296c <vListInsert+0x2e>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	60fb      	str	r3, [r7, #12]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68ba      	ldr	r2, [r7, #8]
 8002974:	429a      	cmp	r2, r3
 8002976:	d2f6      	bcs.n	8002966 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	685a      	ldr	r2, [r3, #4]
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	1c5a      	adds	r2, r3, #1
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	601a      	str	r2, [r3, #0]
}
 80029a4:	bf00      	nop
 80029a6:	3714      	adds	r7, #20
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	6892      	ldr	r2, [r2, #8]
 80029c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6852      	ldr	r2, [r2, #4]
 80029d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d103      	bne.n	80029e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	1e5a      	subs	r2, r3, #1
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3714      	adds	r7, #20
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d10b      	bne.n	8002a30 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a1c:	f383 8811 	msr	BASEPRI, r3
 8002a20:	f3bf 8f6f 	isb	sy
 8002a24:	f3bf 8f4f 	dsb	sy
 8002a28:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002a2a:	bf00      	nop
 8002a2c:	bf00      	nop
 8002a2e:	e7fd      	b.n	8002a2c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002a30:	f002 fdf2 	bl	8005618 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a3c:	68f9      	ldr	r1, [r7, #12]
 8002a3e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002a40:	fb01 f303 	mul.w	r3, r1, r3
 8002a44:	441a      	add	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a60:	3b01      	subs	r3, #1
 8002a62:	68f9      	ldr	r1, [r7, #12]
 8002a64:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002a66:	fb01 f303 	mul.w	r3, r1, r3
 8002a6a:	441a      	add	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	22ff      	movs	r2, #255	@ 0xff
 8002a74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	22ff      	movs	r2, #255	@ 0xff
 8002a7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d114      	bne.n	8002ab0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d01a      	beq.n	8002ac4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	3310      	adds	r3, #16
 8002a92:	4618      	mov	r0, r3
 8002a94:	f001 fd8e 	bl	80045b4 <xTaskRemoveFromEventList>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d012      	beq.n	8002ac4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8002ad4 <xQueueGenericReset+0xd0>)
 8002aa0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002aa4:	601a      	str	r2, [r3, #0]
 8002aa6:	f3bf 8f4f 	dsb	sy
 8002aaa:	f3bf 8f6f 	isb	sy
 8002aae:	e009      	b.n	8002ac4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	3310      	adds	r3, #16
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff fef1 	bl	800289c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	3324      	adds	r3, #36	@ 0x24
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7ff feec 	bl	800289c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002ac4:	f002 fdda 	bl	800567c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002ac8:	2301      	movs	r3, #1
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	e000ed04 	.word	0xe000ed04

08002ad8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b08e      	sub	sp, #56	@ 0x38
 8002adc:	af02      	add	r7, sp, #8
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
 8002ae4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d10b      	bne.n	8002b04 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002af0:	f383 8811 	msr	BASEPRI, r3
 8002af4:	f3bf 8f6f 	isb	sy
 8002af8:	f3bf 8f4f 	dsb	sy
 8002afc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002afe:	bf00      	nop
 8002b00:	bf00      	nop
 8002b02:	e7fd      	b.n	8002b00 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10b      	bne.n	8002b22 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002b0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b0e:	f383 8811 	msr	BASEPRI, r3
 8002b12:	f3bf 8f6f 	isb	sy
 8002b16:	f3bf 8f4f 	dsb	sy
 8002b1a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002b1c:	bf00      	nop
 8002b1e:	bf00      	nop
 8002b20:	e7fd      	b.n	8002b1e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d002      	beq.n	8002b2e <xQueueGenericCreateStatic+0x56>
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <xQueueGenericCreateStatic+0x5a>
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <xQueueGenericCreateStatic+0x5c>
 8002b32:	2300      	movs	r3, #0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d10b      	bne.n	8002b50 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b3c:	f383 8811 	msr	BASEPRI, r3
 8002b40:	f3bf 8f6f 	isb	sy
 8002b44:	f3bf 8f4f 	dsb	sy
 8002b48:	623b      	str	r3, [r7, #32]
}
 8002b4a:	bf00      	nop
 8002b4c:	bf00      	nop
 8002b4e:	e7fd      	b.n	8002b4c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d102      	bne.n	8002b5c <xQueueGenericCreateStatic+0x84>
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d101      	bne.n	8002b60 <xQueueGenericCreateStatic+0x88>
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e000      	b.n	8002b62 <xQueueGenericCreateStatic+0x8a>
 8002b60:	2300      	movs	r3, #0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10b      	bne.n	8002b7e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b6a:	f383 8811 	msr	BASEPRI, r3
 8002b6e:	f3bf 8f6f 	isb	sy
 8002b72:	f3bf 8f4f 	dsb	sy
 8002b76:	61fb      	str	r3, [r7, #28]
}
 8002b78:	bf00      	nop
 8002b7a:	bf00      	nop
 8002b7c:	e7fd      	b.n	8002b7a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002b7e:	2350      	movs	r3, #80	@ 0x50
 8002b80:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	2b50      	cmp	r3, #80	@ 0x50
 8002b86:	d00b      	beq.n	8002ba0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b8c:	f383 8811 	msr	BASEPRI, r3
 8002b90:	f3bf 8f6f 	isb	sy
 8002b94:	f3bf 8f4f 	dsb	sy
 8002b98:	61bb      	str	r3, [r7, #24]
}
 8002b9a:	bf00      	nop
 8002b9c:	bf00      	nop
 8002b9e:	e7fd      	b.n	8002b9c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002ba0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002ba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00d      	beq.n	8002bc8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002bb4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bba:	9300      	str	r3, [sp, #0]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	68b9      	ldr	r1, [r7, #8]
 8002bc2:	68f8      	ldr	r0, [r7, #12]
 8002bc4:	f000 f840 	bl	8002c48 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3730      	adds	r7, #48	@ 0x30
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b08a      	sub	sp, #40	@ 0x28
 8002bd6:	af02      	add	r7, sp, #8
 8002bd8:	60f8      	str	r0, [r7, #12]
 8002bda:	60b9      	str	r1, [r7, #8]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d10b      	bne.n	8002bfe <xQueueGenericCreate+0x2c>
	__asm volatile
 8002be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bea:	f383 8811 	msr	BASEPRI, r3
 8002bee:	f3bf 8f6f 	isb	sy
 8002bf2:	f3bf 8f4f 	dsb	sy
 8002bf6:	613b      	str	r3, [r7, #16]
}
 8002bf8:	bf00      	nop
 8002bfa:	bf00      	nop
 8002bfc:	e7fd      	b.n	8002bfa <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	68ba      	ldr	r2, [r7, #8]
 8002c02:	fb02 f303 	mul.w	r3, r2, r3
 8002c06:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	3350      	adds	r3, #80	@ 0x50
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f002 fe25 	bl	800585c <pvPortMalloc>
 8002c12:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d011      	beq.n	8002c3e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	3350      	adds	r3, #80	@ 0x50
 8002c22:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c2c:	79fa      	ldrb	r2, [r7, #7]
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	4613      	mov	r3, r2
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	68b9      	ldr	r1, [r7, #8]
 8002c38:	68f8      	ldr	r0, [r7, #12]
 8002c3a:	f000 f805 	bl	8002c48 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002c3e:	69bb      	ldr	r3, [r7, #24]
	}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3720      	adds	r7, #32
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
 8002c54:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d103      	bne.n	8002c64 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	e002      	b.n	8002c6a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002c76:	2101      	movs	r1, #1
 8002c78:	69b8      	ldr	r0, [r7, #24]
 8002c7a:	f7ff fec3 	bl	8002a04 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	78fa      	ldrb	r2, [r7, #3]
 8002c82:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002c86:	bf00      	nop
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b08a      	sub	sp, #40	@ 0x28
 8002c92:	af02      	add	r7, sp, #8
 8002c94:	60f8      	str	r0, [r7, #12]
 8002c96:	60b9      	str	r1, [r7, #8]
 8002c98:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10b      	bne.n	8002cb8 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8002ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ca4:	f383 8811 	msr	BASEPRI, r3
 8002ca8:	f3bf 8f6f 	isb	sy
 8002cac:	f3bf 8f4f 	dsb	sy
 8002cb0:	61bb      	str	r3, [r7, #24]
}
 8002cb2:	bf00      	nop
 8002cb4:	bf00      	nop
 8002cb6:	e7fd      	b.n	8002cb4 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002cb8:	68ba      	ldr	r2, [r7, #8]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d90b      	bls.n	8002cd8 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8002cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cc4:	f383 8811 	msr	BASEPRI, r3
 8002cc8:	f3bf 8f6f 	isb	sy
 8002ccc:	f3bf 8f4f 	dsb	sy
 8002cd0:	617b      	str	r3, [r7, #20]
}
 8002cd2:	bf00      	nop
 8002cd4:	bf00      	nop
 8002cd6:	e7fd      	b.n	8002cd4 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002cd8:	2302      	movs	r3, #2
 8002cda:	9300      	str	r3, [sp, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f7ff fef8 	bl	8002ad8 <xQueueGenericCreateStatic>
 8002ce8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d002      	beq.n	8002cf6 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	68ba      	ldr	r2, [r7, #8]
 8002cf4:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002cf6:	69fb      	ldr	r3, [r7, #28]
	}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3720      	adds	r7, #32
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10b      	bne.n	8002d28 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8002d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d14:	f383 8811 	msr	BASEPRI, r3
 8002d18:	f3bf 8f6f 	isb	sy
 8002d1c:	f3bf 8f4f 	dsb	sy
 8002d20:	613b      	str	r3, [r7, #16]
}
 8002d22:	bf00      	nop
 8002d24:	bf00      	nop
 8002d26:	e7fd      	b.n	8002d24 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d90b      	bls.n	8002d48 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8002d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d34:	f383 8811 	msr	BASEPRI, r3
 8002d38:	f3bf 8f6f 	isb	sy
 8002d3c:	f3bf 8f4f 	dsb	sy
 8002d40:	60fb      	str	r3, [r7, #12]
}
 8002d42:	bf00      	nop
 8002d44:	bf00      	nop
 8002d46:	e7fd      	b.n	8002d44 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002d48:	2202      	movs	r2, #2
 8002d4a:	2100      	movs	r1, #0
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f7ff ff40 	bl	8002bd2 <xQueueGenericCreate>
 8002d52:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d002      	beq.n	8002d60 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002d60:	697b      	ldr	r3, [r7, #20]
	}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3718      	adds	r7, #24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
	...

08002d6c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b08e      	sub	sp, #56	@ 0x38
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
 8002d78:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d10b      	bne.n	8002da0 <xQueueGenericSend+0x34>
	__asm volatile
 8002d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d8c:	f383 8811 	msr	BASEPRI, r3
 8002d90:	f3bf 8f6f 	isb	sy
 8002d94:	f3bf 8f4f 	dsb	sy
 8002d98:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002d9a:	bf00      	nop
 8002d9c:	bf00      	nop
 8002d9e:	e7fd      	b.n	8002d9c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d103      	bne.n	8002dae <xQueueGenericSend+0x42>
 8002da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <xQueueGenericSend+0x46>
 8002dae:	2301      	movs	r3, #1
 8002db0:	e000      	b.n	8002db4 <xQueueGenericSend+0x48>
 8002db2:	2300      	movs	r3, #0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d10b      	bne.n	8002dd0 <xQueueGenericSend+0x64>
	__asm volatile
 8002db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dbc:	f383 8811 	msr	BASEPRI, r3
 8002dc0:	f3bf 8f6f 	isb	sy
 8002dc4:	f3bf 8f4f 	dsb	sy
 8002dc8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002dca:	bf00      	nop
 8002dcc:	bf00      	nop
 8002dce:	e7fd      	b.n	8002dcc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d103      	bne.n	8002dde <xQueueGenericSend+0x72>
 8002dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d101      	bne.n	8002de2 <xQueueGenericSend+0x76>
 8002dde:	2301      	movs	r3, #1
 8002de0:	e000      	b.n	8002de4 <xQueueGenericSend+0x78>
 8002de2:	2300      	movs	r3, #0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d10b      	bne.n	8002e00 <xQueueGenericSend+0x94>
	__asm volatile
 8002de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dec:	f383 8811 	msr	BASEPRI, r3
 8002df0:	f3bf 8f6f 	isb	sy
 8002df4:	f3bf 8f4f 	dsb	sy
 8002df8:	623b      	str	r3, [r7, #32]
}
 8002dfa:	bf00      	nop
 8002dfc:	bf00      	nop
 8002dfe:	e7fd      	b.n	8002dfc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e00:	f001 fd9e 	bl	8004940 <xTaskGetSchedulerState>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d102      	bne.n	8002e10 <xQueueGenericSend+0xa4>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d101      	bne.n	8002e14 <xQueueGenericSend+0xa8>
 8002e10:	2301      	movs	r3, #1
 8002e12:	e000      	b.n	8002e16 <xQueueGenericSend+0xaa>
 8002e14:	2300      	movs	r3, #0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d10b      	bne.n	8002e32 <xQueueGenericSend+0xc6>
	__asm volatile
 8002e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e1e:	f383 8811 	msr	BASEPRI, r3
 8002e22:	f3bf 8f6f 	isb	sy
 8002e26:	f3bf 8f4f 	dsb	sy
 8002e2a:	61fb      	str	r3, [r7, #28]
}
 8002e2c:	bf00      	nop
 8002e2e:	bf00      	nop
 8002e30:	e7fd      	b.n	8002e2e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e32:	f002 fbf1 	bl	8005618 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d302      	bcc.n	8002e48 <xQueueGenericSend+0xdc>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d129      	bne.n	8002e9c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	68b9      	ldr	r1, [r7, #8]
 8002e4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e4e:	f000 fc6d 	bl	800372c <prvCopyDataToQueue>
 8002e52:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d010      	beq.n	8002e7e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e5e:	3324      	adds	r3, #36	@ 0x24
 8002e60:	4618      	mov	r0, r3
 8002e62:	f001 fba7 	bl	80045b4 <xTaskRemoveFromEventList>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d013      	beq.n	8002e94 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002e6c:	4b3f      	ldr	r3, [pc, #252]	@ (8002f6c <xQueueGenericSend+0x200>)
 8002e6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	f3bf 8f4f 	dsb	sy
 8002e78:	f3bf 8f6f 	isb	sy
 8002e7c:	e00a      	b.n	8002e94 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d007      	beq.n	8002e94 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002e84:	4b39      	ldr	r3, [pc, #228]	@ (8002f6c <xQueueGenericSend+0x200>)
 8002e86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e8a:	601a      	str	r2, [r3, #0]
 8002e8c:	f3bf 8f4f 	dsb	sy
 8002e90:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002e94:	f002 fbf2 	bl	800567c <vPortExitCritical>
				return pdPASS;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e063      	b.n	8002f64 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d103      	bne.n	8002eaa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002ea2:	f002 fbeb 	bl	800567c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	e05c      	b.n	8002f64 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d106      	bne.n	8002ebe <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002eb0:	f107 0314 	add.w	r3, r7, #20
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f001 fbe1 	bl	800467c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002ebe:	f002 fbdd 	bl	800567c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ec2:	f001 f937 	bl	8004134 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002ec6:	f002 fba7 	bl	8005618 <vPortEnterCritical>
 8002eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ecc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002ed0:	b25b      	sxtb	r3, r3
 8002ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed6:	d103      	bne.n	8002ee0 <xQueueGenericSend+0x174>
 8002ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ee2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002ee6:	b25b      	sxtb	r3, r3
 8002ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eec:	d103      	bne.n	8002ef6 <xQueueGenericSend+0x18a>
 8002eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002ef6:	f002 fbc1 	bl	800567c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002efa:	1d3a      	adds	r2, r7, #4
 8002efc:	f107 0314 	add.w	r3, r7, #20
 8002f00:	4611      	mov	r1, r2
 8002f02:	4618      	mov	r0, r3
 8002f04:	f001 fbd0 	bl	80046a8 <xTaskCheckForTimeOut>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d124      	bne.n	8002f58 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002f0e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f10:	f000 fd04 	bl	800391c <prvIsQueueFull>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d018      	beq.n	8002f4c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f1c:	3310      	adds	r3, #16
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	4611      	mov	r1, r2
 8002f22:	4618      	mov	r0, r3
 8002f24:	f001 faf4 	bl	8004510 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002f28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f2a:	f000 fc8f 	bl	800384c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002f2e:	f001 f90f 	bl	8004150 <xTaskResumeAll>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f47f af7c 	bne.w	8002e32 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8002f6c <xQueueGenericSend+0x200>)
 8002f3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	f3bf 8f4f 	dsb	sy
 8002f46:	f3bf 8f6f 	isb	sy
 8002f4a:	e772      	b.n	8002e32 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002f4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f4e:	f000 fc7d 	bl	800384c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f52:	f001 f8fd 	bl	8004150 <xTaskResumeAll>
 8002f56:	e76c      	b.n	8002e32 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002f58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f5a:	f000 fc77 	bl	800384c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f5e:	f001 f8f7 	bl	8004150 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002f62:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3738      	adds	r7, #56	@ 0x38
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	e000ed04 	.word	0xe000ed04

08002f70 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b090      	sub	sp, #64	@ 0x40
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
 8002f7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10b      	bne.n	8002fa0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f8c:	f383 8811 	msr	BASEPRI, r3
 8002f90:	f3bf 8f6f 	isb	sy
 8002f94:	f3bf 8f4f 	dsb	sy
 8002f98:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002f9a:	bf00      	nop
 8002f9c:	bf00      	nop
 8002f9e:	e7fd      	b.n	8002f9c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d103      	bne.n	8002fae <xQueueGenericSendFromISR+0x3e>
 8002fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <xQueueGenericSendFromISR+0x42>
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e000      	b.n	8002fb4 <xQueueGenericSendFromISR+0x44>
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d10b      	bne.n	8002fd0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fbc:	f383 8811 	msr	BASEPRI, r3
 8002fc0:	f3bf 8f6f 	isb	sy
 8002fc4:	f3bf 8f4f 	dsb	sy
 8002fc8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002fca:	bf00      	nop
 8002fcc:	bf00      	nop
 8002fce:	e7fd      	b.n	8002fcc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d103      	bne.n	8002fde <xQueueGenericSendFromISR+0x6e>
 8002fd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d101      	bne.n	8002fe2 <xQueueGenericSendFromISR+0x72>
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e000      	b.n	8002fe4 <xQueueGenericSendFromISR+0x74>
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d10b      	bne.n	8003000 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fec:	f383 8811 	msr	BASEPRI, r3
 8002ff0:	f3bf 8f6f 	isb	sy
 8002ff4:	f3bf 8f4f 	dsb	sy
 8002ff8:	623b      	str	r3, [r7, #32]
}
 8002ffa:	bf00      	nop
 8002ffc:	bf00      	nop
 8002ffe:	e7fd      	b.n	8002ffc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003000:	f002 fbea 	bl	80057d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003004:	f3ef 8211 	mrs	r2, BASEPRI
 8003008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800300c:	f383 8811 	msr	BASEPRI, r3
 8003010:	f3bf 8f6f 	isb	sy
 8003014:	f3bf 8f4f 	dsb	sy
 8003018:	61fa      	str	r2, [r7, #28]
 800301a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800301c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800301e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003022:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003026:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003028:	429a      	cmp	r2, r3
 800302a:	d302      	bcc.n	8003032 <xQueueGenericSendFromISR+0xc2>
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	2b02      	cmp	r3, #2
 8003030:	d12f      	bne.n	8003092 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003034:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003038:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800303c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800303e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003040:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	68b9      	ldr	r1, [r7, #8]
 8003046:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003048:	f000 fb70 	bl	800372c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800304c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003054:	d112      	bne.n	800307c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305a:	2b00      	cmp	r3, #0
 800305c:	d016      	beq.n	800308c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800305e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003060:	3324      	adds	r3, #36	@ 0x24
 8003062:	4618      	mov	r0, r3
 8003064:	f001 faa6 	bl	80045b4 <xTaskRemoveFromEventList>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00e      	beq.n	800308c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00b      	beq.n	800308c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	601a      	str	r2, [r3, #0]
 800307a:	e007      	b.n	800308c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800307c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003080:	3301      	adds	r3, #1
 8003082:	b2db      	uxtb	r3, r3
 8003084:	b25a      	sxtb	r2, r3
 8003086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003088:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800308c:	2301      	movs	r3, #1
 800308e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003090:	e001      	b.n	8003096 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003092:	2300      	movs	r3, #0
 8003094:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003096:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003098:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80030a0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80030a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3740      	adds	r7, #64	@ 0x40
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b08e      	sub	sp, #56	@ 0x38
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80030ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d10b      	bne.n	80030d8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80030c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030c4:	f383 8811 	msr	BASEPRI, r3
 80030c8:	f3bf 8f6f 	isb	sy
 80030cc:	f3bf 8f4f 	dsb	sy
 80030d0:	623b      	str	r3, [r7, #32]
}
 80030d2:	bf00      	nop
 80030d4:	bf00      	nop
 80030d6:	e7fd      	b.n	80030d4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80030d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00b      	beq.n	80030f8 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80030e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030e4:	f383 8811 	msr	BASEPRI, r3
 80030e8:	f3bf 8f6f 	isb	sy
 80030ec:	f3bf 8f4f 	dsb	sy
 80030f0:	61fb      	str	r3, [r7, #28]
}
 80030f2:	bf00      	nop
 80030f4:	bf00      	nop
 80030f6:	e7fd      	b.n	80030f4 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80030f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d103      	bne.n	8003108 <xQueueGiveFromISR+0x5c>
 8003100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d101      	bne.n	800310c <xQueueGiveFromISR+0x60>
 8003108:	2301      	movs	r3, #1
 800310a:	e000      	b.n	800310e <xQueueGiveFromISR+0x62>
 800310c:	2300      	movs	r3, #0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10b      	bne.n	800312a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8003112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003116:	f383 8811 	msr	BASEPRI, r3
 800311a:	f3bf 8f6f 	isb	sy
 800311e:	f3bf 8f4f 	dsb	sy
 8003122:	61bb      	str	r3, [r7, #24]
}
 8003124:	bf00      	nop
 8003126:	bf00      	nop
 8003128:	e7fd      	b.n	8003126 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800312a:	f002 fb55 	bl	80057d8 <vPortValidateInterruptPriority>
	__asm volatile
 800312e:	f3ef 8211 	mrs	r2, BASEPRI
 8003132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003136:	f383 8811 	msr	BASEPRI, r3
 800313a:	f3bf 8f6f 	isb	sy
 800313e:	f3bf 8f4f 	dsb	sy
 8003142:	617a      	str	r2, [r7, #20]
 8003144:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003146:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003148:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800314a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800314c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800314e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003154:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003156:	429a      	cmp	r2, r3
 8003158:	d22b      	bcs.n	80031b2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800315a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800315c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003160:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003166:	1c5a      	adds	r2, r3, #1
 8003168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800316a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800316c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003174:	d112      	bne.n	800319c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317a:	2b00      	cmp	r3, #0
 800317c:	d016      	beq.n	80031ac <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800317e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003180:	3324      	adds	r3, #36	@ 0x24
 8003182:	4618      	mov	r0, r3
 8003184:	f001 fa16 	bl	80045b4 <xTaskRemoveFromEventList>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00e      	beq.n	80031ac <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00b      	beq.n	80031ac <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	2201      	movs	r2, #1
 8003198:	601a      	str	r2, [r3, #0]
 800319a:	e007      	b.n	80031ac <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800319c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80031a0:	3301      	adds	r3, #1
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	b25a      	sxtb	r2, r3
 80031a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80031ac:	2301      	movs	r3, #1
 80031ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80031b0:	e001      	b.n	80031b6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80031b2:	2300      	movs	r3, #0
 80031b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80031b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031b8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f383 8811 	msr	BASEPRI, r3
}
 80031c0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80031c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3738      	adds	r7, #56	@ 0x38
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b08c      	sub	sp, #48	@ 0x30
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80031d8:	2300      	movs	r3, #0
 80031da:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80031e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10b      	bne.n	80031fe <xQueueReceive+0x32>
	__asm volatile
 80031e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031ea:	f383 8811 	msr	BASEPRI, r3
 80031ee:	f3bf 8f6f 	isb	sy
 80031f2:	f3bf 8f4f 	dsb	sy
 80031f6:	623b      	str	r3, [r7, #32]
}
 80031f8:	bf00      	nop
 80031fa:	bf00      	nop
 80031fc:	e7fd      	b.n	80031fa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d103      	bne.n	800320c <xQueueReceive+0x40>
 8003204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003208:	2b00      	cmp	r3, #0
 800320a:	d101      	bne.n	8003210 <xQueueReceive+0x44>
 800320c:	2301      	movs	r3, #1
 800320e:	e000      	b.n	8003212 <xQueueReceive+0x46>
 8003210:	2300      	movs	r3, #0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10b      	bne.n	800322e <xQueueReceive+0x62>
	__asm volatile
 8003216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800321a:	f383 8811 	msr	BASEPRI, r3
 800321e:	f3bf 8f6f 	isb	sy
 8003222:	f3bf 8f4f 	dsb	sy
 8003226:	61fb      	str	r3, [r7, #28]
}
 8003228:	bf00      	nop
 800322a:	bf00      	nop
 800322c:	e7fd      	b.n	800322a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800322e:	f001 fb87 	bl	8004940 <xTaskGetSchedulerState>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d102      	bne.n	800323e <xQueueReceive+0x72>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <xQueueReceive+0x76>
 800323e:	2301      	movs	r3, #1
 8003240:	e000      	b.n	8003244 <xQueueReceive+0x78>
 8003242:	2300      	movs	r3, #0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d10b      	bne.n	8003260 <xQueueReceive+0x94>
	__asm volatile
 8003248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800324c:	f383 8811 	msr	BASEPRI, r3
 8003250:	f3bf 8f6f 	isb	sy
 8003254:	f3bf 8f4f 	dsb	sy
 8003258:	61bb      	str	r3, [r7, #24]
}
 800325a:	bf00      	nop
 800325c:	bf00      	nop
 800325e:	e7fd      	b.n	800325c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003260:	f002 f9da 	bl	8005618 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003268:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800326a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800326c:	2b00      	cmp	r3, #0
 800326e:	d01f      	beq.n	80032b0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003270:	68b9      	ldr	r1, [r7, #8]
 8003272:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003274:	f000 fac4 	bl	8003800 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327a:	1e5a      	subs	r2, r3, #1
 800327c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800327e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00f      	beq.n	80032a8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800328a:	3310      	adds	r3, #16
 800328c:	4618      	mov	r0, r3
 800328e:	f001 f991 	bl	80045b4 <xTaskRemoveFromEventList>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d007      	beq.n	80032a8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003298:	4b3c      	ldr	r3, [pc, #240]	@ (800338c <xQueueReceive+0x1c0>)
 800329a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800329e:	601a      	str	r2, [r3, #0]
 80032a0:	f3bf 8f4f 	dsb	sy
 80032a4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80032a8:	f002 f9e8 	bl	800567c <vPortExitCritical>
				return pdPASS;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e069      	b.n	8003384 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d103      	bne.n	80032be <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80032b6:	f002 f9e1 	bl	800567c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80032ba:	2300      	movs	r3, #0
 80032bc:	e062      	b.n	8003384 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80032be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d106      	bne.n	80032d2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032c4:	f107 0310 	add.w	r3, r7, #16
 80032c8:	4618      	mov	r0, r3
 80032ca:	f001 f9d7 	bl	800467c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032ce:	2301      	movs	r3, #1
 80032d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80032d2:	f002 f9d3 	bl	800567c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80032d6:	f000 ff2d 	bl	8004134 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80032da:	f002 f99d 	bl	8005618 <vPortEnterCritical>
 80032de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80032e4:	b25b      	sxtb	r3, r3
 80032e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ea:	d103      	bne.n	80032f4 <xQueueReceive+0x128>
 80032ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80032fa:	b25b      	sxtb	r3, r3
 80032fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003300:	d103      	bne.n	800330a <xQueueReceive+0x13e>
 8003302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800330a:	f002 f9b7 	bl	800567c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800330e:	1d3a      	adds	r2, r7, #4
 8003310:	f107 0310 	add.w	r3, r7, #16
 8003314:	4611      	mov	r1, r2
 8003316:	4618      	mov	r0, r3
 8003318:	f001 f9c6 	bl	80046a8 <xTaskCheckForTimeOut>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d123      	bne.n	800336a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003322:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003324:	f000 fae4 	bl	80038f0 <prvIsQueueEmpty>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d017      	beq.n	800335e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800332e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003330:	3324      	adds	r3, #36	@ 0x24
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	4611      	mov	r1, r2
 8003336:	4618      	mov	r0, r3
 8003338:	f001 f8ea 	bl	8004510 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800333c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800333e:	f000 fa85 	bl	800384c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003342:	f000 ff05 	bl	8004150 <xTaskResumeAll>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d189      	bne.n	8003260 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800334c:	4b0f      	ldr	r3, [pc, #60]	@ (800338c <xQueueReceive+0x1c0>)
 800334e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003352:	601a      	str	r2, [r3, #0]
 8003354:	f3bf 8f4f 	dsb	sy
 8003358:	f3bf 8f6f 	isb	sy
 800335c:	e780      	b.n	8003260 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800335e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003360:	f000 fa74 	bl	800384c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003364:	f000 fef4 	bl	8004150 <xTaskResumeAll>
 8003368:	e77a      	b.n	8003260 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800336a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800336c:	f000 fa6e 	bl	800384c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003370:	f000 feee 	bl	8004150 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003374:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003376:	f000 fabb 	bl	80038f0 <prvIsQueueEmpty>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	f43f af6f 	beq.w	8003260 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003382:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003384:	4618      	mov	r0, r3
 8003386:	3730      	adds	r7, #48	@ 0x30
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	e000ed04 	.word	0xe000ed04

08003390 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b08e      	sub	sp, #56	@ 0x38
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800339a:	2300      	movs	r3, #0
 800339c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80033a2:	2300      	movs	r3, #0
 80033a4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80033a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d10b      	bne.n	80033c4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80033ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033b0:	f383 8811 	msr	BASEPRI, r3
 80033b4:	f3bf 8f6f 	isb	sy
 80033b8:	f3bf 8f4f 	dsb	sy
 80033bc:	623b      	str	r3, [r7, #32]
}
 80033be:	bf00      	nop
 80033c0:	bf00      	nop
 80033c2:	e7fd      	b.n	80033c0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80033c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00b      	beq.n	80033e4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80033cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033d0:	f383 8811 	msr	BASEPRI, r3
 80033d4:	f3bf 8f6f 	isb	sy
 80033d8:	f3bf 8f4f 	dsb	sy
 80033dc:	61fb      	str	r3, [r7, #28]
}
 80033de:	bf00      	nop
 80033e0:	bf00      	nop
 80033e2:	e7fd      	b.n	80033e0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033e4:	f001 faac 	bl	8004940 <xTaskGetSchedulerState>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d102      	bne.n	80033f4 <xQueueSemaphoreTake+0x64>
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d101      	bne.n	80033f8 <xQueueSemaphoreTake+0x68>
 80033f4:	2301      	movs	r3, #1
 80033f6:	e000      	b.n	80033fa <xQueueSemaphoreTake+0x6a>
 80033f8:	2300      	movs	r3, #0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10b      	bne.n	8003416 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80033fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003402:	f383 8811 	msr	BASEPRI, r3
 8003406:	f3bf 8f6f 	isb	sy
 800340a:	f3bf 8f4f 	dsb	sy
 800340e:	61bb      	str	r3, [r7, #24]
}
 8003410:	bf00      	nop
 8003412:	bf00      	nop
 8003414:	e7fd      	b.n	8003412 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003416:	f002 f8ff 	bl	8005618 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800341a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800341c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800341e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003422:	2b00      	cmp	r3, #0
 8003424:	d024      	beq.n	8003470 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003428:	1e5a      	subs	r2, r3, #1
 800342a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800342c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800342e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d104      	bne.n	8003440 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003436:	f001 fbfd 	bl	8004c34 <pvTaskIncrementMutexHeldCount>
 800343a:	4602      	mov	r2, r0
 800343c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800343e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00f      	beq.n	8003468 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800344a:	3310      	adds	r3, #16
 800344c:	4618      	mov	r0, r3
 800344e:	f001 f8b1 	bl	80045b4 <xTaskRemoveFromEventList>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d007      	beq.n	8003468 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003458:	4b54      	ldr	r3, [pc, #336]	@ (80035ac <xQueueSemaphoreTake+0x21c>)
 800345a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	f3bf 8f4f 	dsb	sy
 8003464:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003468:	f002 f908 	bl	800567c <vPortExitCritical>
				return pdPASS;
 800346c:	2301      	movs	r3, #1
 800346e:	e098      	b.n	80035a2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d112      	bne.n	800349c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00b      	beq.n	8003494 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800347c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003480:	f383 8811 	msr	BASEPRI, r3
 8003484:	f3bf 8f6f 	isb	sy
 8003488:	f3bf 8f4f 	dsb	sy
 800348c:	617b      	str	r3, [r7, #20]
}
 800348e:	bf00      	nop
 8003490:	bf00      	nop
 8003492:	e7fd      	b.n	8003490 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003494:	f002 f8f2 	bl	800567c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003498:	2300      	movs	r3, #0
 800349a:	e082      	b.n	80035a2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800349c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d106      	bne.n	80034b0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80034a2:	f107 030c 	add.w	r3, r7, #12
 80034a6:	4618      	mov	r0, r3
 80034a8:	f001 f8e8 	bl	800467c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80034ac:	2301      	movs	r3, #1
 80034ae:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80034b0:	f002 f8e4 	bl	800567c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80034b4:	f000 fe3e 	bl	8004134 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80034b8:	f002 f8ae 	bl	8005618 <vPortEnterCritical>
 80034bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034be:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80034c2:	b25b      	sxtb	r3, r3
 80034c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c8:	d103      	bne.n	80034d2 <xQueueSemaphoreTake+0x142>
 80034ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80034d8:	b25b      	sxtb	r3, r3
 80034da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034de:	d103      	bne.n	80034e8 <xQueueSemaphoreTake+0x158>
 80034e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80034e8:	f002 f8c8 	bl	800567c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034ec:	463a      	mov	r2, r7
 80034ee:	f107 030c 	add.w	r3, r7, #12
 80034f2:	4611      	mov	r1, r2
 80034f4:	4618      	mov	r0, r3
 80034f6:	f001 f8d7 	bl	80046a8 <xTaskCheckForTimeOut>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d132      	bne.n	8003566 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003500:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003502:	f000 f9f5 	bl	80038f0 <prvIsQueueEmpty>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d026      	beq.n	800355a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800350c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d109      	bne.n	8003528 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003514:	f002 f880 	bl	8005618 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	4618      	mov	r0, r3
 800351e:	f001 fa2d 	bl	800497c <xTaskPriorityInherit>
 8003522:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8003524:	f002 f8aa 	bl	800567c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800352a:	3324      	adds	r3, #36	@ 0x24
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	4611      	mov	r1, r2
 8003530:	4618      	mov	r0, r3
 8003532:	f000 ffed 	bl	8004510 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003536:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003538:	f000 f988 	bl	800384c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800353c:	f000 fe08 	bl	8004150 <xTaskResumeAll>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	f47f af67 	bne.w	8003416 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003548:	4b18      	ldr	r3, [pc, #96]	@ (80035ac <xQueueSemaphoreTake+0x21c>)
 800354a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800354e:	601a      	str	r2, [r3, #0]
 8003550:	f3bf 8f4f 	dsb	sy
 8003554:	f3bf 8f6f 	isb	sy
 8003558:	e75d      	b.n	8003416 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800355a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800355c:	f000 f976 	bl	800384c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003560:	f000 fdf6 	bl	8004150 <xTaskResumeAll>
 8003564:	e757      	b.n	8003416 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003566:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003568:	f000 f970 	bl	800384c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800356c:	f000 fdf0 	bl	8004150 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003570:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003572:	f000 f9bd 	bl	80038f0 <prvIsQueueEmpty>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	f43f af4c 	beq.w	8003416 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800357e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00d      	beq.n	80035a0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003584:	f002 f848 	bl	8005618 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003588:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800358a:	f000 f8b7 	bl	80036fc <prvGetDisinheritPriorityAfterTimeout>
 800358e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003596:	4618      	mov	r0, r3
 8003598:	f001 fac8 	bl	8004b2c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800359c:	f002 f86e 	bl	800567c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80035a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3738      	adds	r7, #56	@ 0x38
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	e000ed04 	.word	0xe000ed04

080035b0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b08e      	sub	sp, #56	@ 0x38
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80035c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d10b      	bne.n	80035de <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80035c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ca:	f383 8811 	msr	BASEPRI, r3
 80035ce:	f3bf 8f6f 	isb	sy
 80035d2:	f3bf 8f4f 	dsb	sy
 80035d6:	623b      	str	r3, [r7, #32]
}
 80035d8:	bf00      	nop
 80035da:	bf00      	nop
 80035dc:	e7fd      	b.n	80035da <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d103      	bne.n	80035ec <xQueueReceiveFromISR+0x3c>
 80035e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d101      	bne.n	80035f0 <xQueueReceiveFromISR+0x40>
 80035ec:	2301      	movs	r3, #1
 80035ee:	e000      	b.n	80035f2 <xQueueReceiveFromISR+0x42>
 80035f0:	2300      	movs	r3, #0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10b      	bne.n	800360e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80035f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035fa:	f383 8811 	msr	BASEPRI, r3
 80035fe:	f3bf 8f6f 	isb	sy
 8003602:	f3bf 8f4f 	dsb	sy
 8003606:	61fb      	str	r3, [r7, #28]
}
 8003608:	bf00      	nop
 800360a:	bf00      	nop
 800360c:	e7fd      	b.n	800360a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800360e:	f002 f8e3 	bl	80057d8 <vPortValidateInterruptPriority>
	__asm volatile
 8003612:	f3ef 8211 	mrs	r2, BASEPRI
 8003616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800361a:	f383 8811 	msr	BASEPRI, r3
 800361e:	f3bf 8f6f 	isb	sy
 8003622:	f3bf 8f4f 	dsb	sy
 8003626:	61ba      	str	r2, [r7, #24]
 8003628:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800362a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800362c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800362e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003632:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003636:	2b00      	cmp	r3, #0
 8003638:	d02f      	beq.n	800369a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800363a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800363c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003640:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003644:	68b9      	ldr	r1, [r7, #8]
 8003646:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003648:	f000 f8da 	bl	8003800 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800364c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800364e:	1e5a      	subs	r2, r3, #1
 8003650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003652:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003654:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800365c:	d112      	bne.n	8003684 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800365e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d016      	beq.n	8003694 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003668:	3310      	adds	r3, #16
 800366a:	4618      	mov	r0, r3
 800366c:	f000 ffa2 	bl	80045b4 <xTaskRemoveFromEventList>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00e      	beq.n	8003694 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00b      	beq.n	8003694 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	e007      	b.n	8003694 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003684:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003688:	3301      	adds	r3, #1
 800368a:	b2db      	uxtb	r3, r3
 800368c:	b25a      	sxtb	r2, r3
 800368e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003690:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8003694:	2301      	movs	r3, #1
 8003696:	637b      	str	r3, [r7, #52]	@ 0x34
 8003698:	e001      	b.n	800369e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800369a:	2300      	movs	r3, #0
 800369c:	637b      	str	r3, [r7, #52]	@ 0x34
 800369e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036a0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	f383 8811 	msr	BASEPRI, r3
}
 80036a8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80036aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3738      	adds	r7, #56	@ 0x38
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d10b      	bne.n	80036de <vQueueDelete+0x2a>
	__asm volatile
 80036c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036ca:	f383 8811 	msr	BASEPRI, r3
 80036ce:	f3bf 8f6f 	isb	sy
 80036d2:	f3bf 8f4f 	dsb	sy
 80036d6:	60bb      	str	r3, [r7, #8]
}
 80036d8:	bf00      	nop
 80036da:	bf00      	nop
 80036dc:	e7fd      	b.n	80036da <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f000 f95e 	bl	80039a0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d102      	bne.n	80036f4 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f002 f982 	bl	80059f8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80036f4:	bf00      	nop
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003708:	2b00      	cmp	r3, #0
 800370a:	d006      	beq.n	800371a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8003716:	60fb      	str	r3, [r7, #12]
 8003718:	e001      	b.n	800371e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800371a:	2300      	movs	r3, #0
 800371c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800371e:	68fb      	ldr	r3, [r7, #12]
	}
 8003720:	4618      	mov	r0, r3
 8003722:	3714      	adds	r7, #20
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003738:	2300      	movs	r3, #0
 800373a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003740:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10d      	bne.n	8003766 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d14d      	bne.n	80037ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	4618      	mov	r0, r3
 8003758:	f001 f978 	bl	8004a4c <xTaskPriorityDisinherit>
 800375c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	609a      	str	r2, [r3, #8]
 8003764:	e043      	b.n	80037ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d119      	bne.n	80037a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6858      	ldr	r0, [r3, #4]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003774:	461a      	mov	r2, r3
 8003776:	68b9      	ldr	r1, [r7, #8]
 8003778:	f002 fd27 	bl	80061ca <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003784:	441a      	add	r2, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	429a      	cmp	r2, r3
 8003794:	d32b      	bcc.n	80037ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	605a      	str	r2, [r3, #4]
 800379e:	e026      	b.n	80037ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	68d8      	ldr	r0, [r3, #12]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a8:	461a      	mov	r2, r3
 80037aa:	68b9      	ldr	r1, [r7, #8]
 80037ac:	f002 fd0d 	bl	80061ca <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	68da      	ldr	r2, [r3, #12]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b8:	425b      	negs	r3, r3
 80037ba:	441a      	add	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	68da      	ldr	r2, [r3, #12]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d207      	bcs.n	80037dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d4:	425b      	negs	r3, r3
 80037d6:	441a      	add	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d105      	bne.n	80037ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d002      	beq.n	80037ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	3b01      	subs	r3, #1
 80037ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1c5a      	adds	r2, r3, #1
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80037f6:	697b      	ldr	r3, [r7, #20]
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3718      	adds	r7, #24
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380e:	2b00      	cmp	r3, #0
 8003810:	d018      	beq.n	8003844 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68da      	ldr	r2, [r3, #12]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381a:	441a      	add	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68da      	ldr	r2, [r3, #12]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	429a      	cmp	r2, r3
 800382a:	d303      	bcc.n	8003834 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	68d9      	ldr	r1, [r3, #12]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383c:	461a      	mov	r2, r3
 800383e:	6838      	ldr	r0, [r7, #0]
 8003840:	f002 fcc3 	bl	80061ca <memcpy>
	}
}
 8003844:	bf00      	nop
 8003846:	3708      	adds	r7, #8
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003854:	f001 fee0 	bl	8005618 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800385e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003860:	e011      	b.n	8003886 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003866:	2b00      	cmp	r3, #0
 8003868:	d012      	beq.n	8003890 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	3324      	adds	r3, #36	@ 0x24
 800386e:	4618      	mov	r0, r3
 8003870:	f000 fea0 	bl	80045b4 <xTaskRemoveFromEventList>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800387a:	f000 ff79 	bl	8004770 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800387e:	7bfb      	ldrb	r3, [r7, #15]
 8003880:	3b01      	subs	r3, #1
 8003882:	b2db      	uxtb	r3, r3
 8003884:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800388a:	2b00      	cmp	r3, #0
 800388c:	dce9      	bgt.n	8003862 <prvUnlockQueue+0x16>
 800388e:	e000      	b.n	8003892 <prvUnlockQueue+0x46>
					break;
 8003890:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	22ff      	movs	r2, #255	@ 0xff
 8003896:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800389a:	f001 feef 	bl	800567c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800389e:	f001 febb 	bl	8005618 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80038a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80038aa:	e011      	b.n	80038d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d012      	beq.n	80038da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	3310      	adds	r3, #16
 80038b8:	4618      	mov	r0, r3
 80038ba:	f000 fe7b 	bl	80045b4 <xTaskRemoveFromEventList>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80038c4:	f000 ff54 	bl	8004770 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80038c8:	7bbb      	ldrb	r3, [r7, #14]
 80038ca:	3b01      	subs	r3, #1
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80038d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	dce9      	bgt.n	80038ac <prvUnlockQueue+0x60>
 80038d8:	e000      	b.n	80038dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80038da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	22ff      	movs	r2, #255	@ 0xff
 80038e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80038e4:	f001 feca 	bl	800567c <vPortExitCritical>
}
 80038e8:	bf00      	nop
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80038f8:	f001 fe8e 	bl	8005618 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003900:	2b00      	cmp	r3, #0
 8003902:	d102      	bne.n	800390a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003904:	2301      	movs	r3, #1
 8003906:	60fb      	str	r3, [r7, #12]
 8003908:	e001      	b.n	800390e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800390a:	2300      	movs	r3, #0
 800390c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800390e:	f001 feb5 	bl	800567c <vPortExitCritical>

	return xReturn;
 8003912:	68fb      	ldr	r3, [r7, #12]
}
 8003914:	4618      	mov	r0, r3
 8003916:	3710      	adds	r7, #16
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003924:	f001 fe78 	bl	8005618 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003930:	429a      	cmp	r2, r3
 8003932:	d102      	bne.n	800393a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003934:	2301      	movs	r3, #1
 8003936:	60fb      	str	r3, [r7, #12]
 8003938:	e001      	b.n	800393e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800393a:	2300      	movs	r3, #0
 800393c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800393e:	f001 fe9d 	bl	800567c <vPortExitCritical>

	return xReturn;
 8003942:	68fb      	ldr	r3, [r7, #12]
}
 8003944:	4618      	mov	r0, r3
 8003946:	3710      	adds	r7, #16
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003956:	2300      	movs	r3, #0
 8003958:	60fb      	str	r3, [r7, #12]
 800395a:	e014      	b.n	8003986 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800395c:	4a0f      	ldr	r2, [pc, #60]	@ (800399c <vQueueAddToRegistry+0x50>)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d10b      	bne.n	8003980 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003968:	490c      	ldr	r1, [pc, #48]	@ (800399c <vQueueAddToRegistry+0x50>)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003972:	4a0a      	ldr	r2, [pc, #40]	@ (800399c <vQueueAddToRegistry+0x50>)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	00db      	lsls	r3, r3, #3
 8003978:	4413      	add	r3, r2
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800397e:	e006      	b.n	800398e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	3301      	adds	r3, #1
 8003984:	60fb      	str	r3, [r7, #12]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2b07      	cmp	r3, #7
 800398a:	d9e7      	bls.n	800395c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800398c:	bf00      	nop
 800398e:	bf00      	nop
 8003990:	3714      	adds	r7, #20
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	2000084c 	.word	0x2000084c

080039a0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80039a8:	2300      	movs	r3, #0
 80039aa:	60fb      	str	r3, [r7, #12]
 80039ac:	e016      	b.n	80039dc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80039ae:	4a10      	ldr	r2, [pc, #64]	@ (80039f0 <vQueueUnregisterQueue+0x50>)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	4413      	add	r3, r2
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d10b      	bne.n	80039d6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80039be:	4a0c      	ldr	r2, [pc, #48]	@ (80039f0 <vQueueUnregisterQueue+0x50>)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2100      	movs	r1, #0
 80039c4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80039c8:	4a09      	ldr	r2, [pc, #36]	@ (80039f0 <vQueueUnregisterQueue+0x50>)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	4413      	add	r3, r2
 80039d0:	2200      	movs	r2, #0
 80039d2:	605a      	str	r2, [r3, #4]
				break;
 80039d4:	e006      	b.n	80039e4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	3301      	adds	r3, #1
 80039da:	60fb      	str	r3, [r7, #12]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2b07      	cmp	r3, #7
 80039e0:	d9e5      	bls.n	80039ae <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80039e2:	bf00      	nop
 80039e4:	bf00      	nop
 80039e6:	3714      	adds	r7, #20
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr
 80039f0:	2000084c 	.word	0x2000084c

080039f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003a04:	f001 fe08 	bl	8005618 <vPortEnterCritical>
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a0e:	b25b      	sxtb	r3, r3
 8003a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a14:	d103      	bne.n	8003a1e <vQueueWaitForMessageRestricted+0x2a>
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a24:	b25b      	sxtb	r3, r3
 8003a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a2a:	d103      	bne.n	8003a34 <vQueueWaitForMessageRestricted+0x40>
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a34:	f001 fe22 	bl	800567c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d106      	bne.n	8003a4e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	3324      	adds	r3, #36	@ 0x24
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	68b9      	ldr	r1, [r7, #8]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f000 fd87 	bl	800455c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003a4e:	6978      	ldr	r0, [r7, #20]
 8003a50:	f7ff fefc 	bl	800384c <prvUnlockQueue>
	}
 8003a54:	bf00      	nop
 8003a56:	3718      	adds	r7, #24
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b08e      	sub	sp, #56	@ 0x38
 8003a60:	af04      	add	r7, sp, #16
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
 8003a68:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003a6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d10b      	bne.n	8003a88 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a74:	f383 8811 	msr	BASEPRI, r3
 8003a78:	f3bf 8f6f 	isb	sy
 8003a7c:	f3bf 8f4f 	dsb	sy
 8003a80:	623b      	str	r3, [r7, #32]
}
 8003a82:	bf00      	nop
 8003a84:	bf00      	nop
 8003a86:	e7fd      	b.n	8003a84 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003a88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10b      	bne.n	8003aa6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a92:	f383 8811 	msr	BASEPRI, r3
 8003a96:	f3bf 8f6f 	isb	sy
 8003a9a:	f3bf 8f4f 	dsb	sy
 8003a9e:	61fb      	str	r3, [r7, #28]
}
 8003aa0:	bf00      	nop
 8003aa2:	bf00      	nop
 8003aa4:	e7fd      	b.n	8003aa2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003aa6:	23a8      	movs	r3, #168	@ 0xa8
 8003aa8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	2ba8      	cmp	r3, #168	@ 0xa8
 8003aae:	d00b      	beq.n	8003ac8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ab4:	f383 8811 	msr	BASEPRI, r3
 8003ab8:	f3bf 8f6f 	isb	sy
 8003abc:	f3bf 8f4f 	dsb	sy
 8003ac0:	61bb      	str	r3, [r7, #24]
}
 8003ac2:	bf00      	nop
 8003ac4:	bf00      	nop
 8003ac6:	e7fd      	b.n	8003ac4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003ac8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d01e      	beq.n	8003b0e <xTaskCreateStatic+0xb2>
 8003ad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d01b      	beq.n	8003b0e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ad8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003adc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003ade:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003ae8:	2300      	movs	r3, #0
 8003aea:	9303      	str	r3, [sp, #12]
 8003aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aee:	9302      	str	r3, [sp, #8]
 8003af0:	f107 0314 	add.w	r3, r7, #20
 8003af4:	9301      	str	r3, [sp, #4]
 8003af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	68b9      	ldr	r1, [r7, #8]
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f000 f851 	bl	8003ba8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b06:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003b08:	f000 f8f6 	bl	8003cf8 <prvAddNewTaskToReadyList>
 8003b0c:	e001      	b.n	8003b12 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003b12:	697b      	ldr	r3, [r7, #20]
	}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3728      	adds	r7, #40	@ 0x28
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b08c      	sub	sp, #48	@ 0x30
 8003b20:	af04      	add	r7, sp, #16
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	603b      	str	r3, [r7, #0]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003b2c:	88fb      	ldrh	r3, [r7, #6]
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4618      	mov	r0, r3
 8003b32:	f001 fe93 	bl	800585c <pvPortMalloc>
 8003b36:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00e      	beq.n	8003b5c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003b3e:	20a8      	movs	r0, #168	@ 0xa8
 8003b40:	f001 fe8c 	bl	800585c <pvPortMalloc>
 8003b44:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d003      	beq.n	8003b54 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b52:	e005      	b.n	8003b60 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003b54:	6978      	ldr	r0, [r7, #20]
 8003b56:	f001 ff4f 	bl	80059f8 <vPortFree>
 8003b5a:	e001      	b.n	8003b60 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d017      	beq.n	8003b96 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b6e:	88fa      	ldrh	r2, [r7, #6]
 8003b70:	2300      	movs	r3, #0
 8003b72:	9303      	str	r3, [sp, #12]
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	9302      	str	r3, [sp, #8]
 8003b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b7a:	9301      	str	r3, [sp, #4]
 8003b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b7e:	9300      	str	r3, [sp, #0]
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	68b9      	ldr	r1, [r7, #8]
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f000 f80f 	bl	8003ba8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b8a:	69f8      	ldr	r0, [r7, #28]
 8003b8c:	f000 f8b4 	bl	8003cf8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003b90:	2301      	movs	r3, #1
 8003b92:	61bb      	str	r3, [r7, #24]
 8003b94:	e002      	b.n	8003b9c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b96:	f04f 33ff 	mov.w	r3, #4294967295
 8003b9a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003b9c:	69bb      	ldr	r3, [r7, #24]
	}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3720      	adds	r7, #32
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
	...

08003ba8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b088      	sub	sp, #32
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
 8003bb4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bb8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	21a5      	movs	r1, #165	@ 0xa5
 8003bc2:	f002 fa31 	bl	8006028 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bc8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	4413      	add	r3, r2
 8003bd6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	f023 0307 	bic.w	r3, r3, #7
 8003bde:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	f003 0307 	and.w	r3, r3, #7
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00b      	beq.n	8003c02 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bee:	f383 8811 	msr	BASEPRI, r3
 8003bf2:	f3bf 8f6f 	isb	sy
 8003bf6:	f3bf 8f4f 	dsb	sy
 8003bfa:	617b      	str	r3, [r7, #20]
}
 8003bfc:	bf00      	nop
 8003bfe:	bf00      	nop
 8003c00:	e7fd      	b.n	8003bfe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d01f      	beq.n	8003c48 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c08:	2300      	movs	r3, #0
 8003c0a:	61fb      	str	r3, [r7, #28]
 8003c0c:	e012      	b.n	8003c34 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003c0e:	68ba      	ldr	r2, [r7, #8]
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	4413      	add	r3, r2
 8003c14:	7819      	ldrb	r1, [r3, #0]
 8003c16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	3334      	adds	r3, #52	@ 0x34
 8003c1e:	460a      	mov	r2, r1
 8003c20:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	4413      	add	r3, r2
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d006      	beq.n	8003c3c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	3301      	adds	r3, #1
 8003c32:	61fb      	str	r3, [r7, #28]
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	2b0f      	cmp	r3, #15
 8003c38:	d9e9      	bls.n	8003c0e <prvInitialiseNewTask+0x66>
 8003c3a:	e000      	b.n	8003c3e <prvInitialiseNewTask+0x96>
			{
				break;
 8003c3c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c46:	e003      	b.n	8003c50 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c52:	2b37      	cmp	r3, #55	@ 0x37
 8003c54:	d901      	bls.n	8003c5a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003c56:	2337      	movs	r3, #55	@ 0x37
 8003c58:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c5e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c64:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c68:	2200      	movs	r2, #0
 8003c6a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c6e:	3304      	adds	r3, #4
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7fe fe33 	bl	80028dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c78:	3318      	adds	r3, #24
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7fe fe2e 	bl	80028dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c84:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c88:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c8e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c94:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ca8:	3354      	adds	r3, #84	@ 0x54
 8003caa:	224c      	movs	r2, #76	@ 0x4c
 8003cac:	2100      	movs	r1, #0
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f002 f9ba 	bl	8006028 <memset>
 8003cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb6:	4a0d      	ldr	r2, [pc, #52]	@ (8003cec <prvInitialiseNewTask+0x144>)
 8003cb8:	659a      	str	r2, [r3, #88]	@ 0x58
 8003cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cbc:	4a0c      	ldr	r2, [pc, #48]	@ (8003cf0 <prvInitialiseNewTask+0x148>)
 8003cbe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc2:	4a0c      	ldr	r2, [pc, #48]	@ (8003cf4 <prvInitialiseNewTask+0x14c>)
 8003cc4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	68f9      	ldr	r1, [r7, #12]
 8003cca:	69b8      	ldr	r0, [r7, #24]
 8003ccc:	f001 fb74 	bl	80053b8 <pxPortInitialiseStack>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d002      	beq.n	8003ce2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ce0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ce2:	bf00      	nop
 8003ce4:	3720      	adds	r7, #32
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	20004ae0 	.word	0x20004ae0
 8003cf0:	20004b48 	.word	0x20004b48
 8003cf4:	20004bb0 	.word	0x20004bb0

08003cf8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003d00:	f001 fc8a 	bl	8005618 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003d04:	4b2d      	ldr	r3, [pc, #180]	@ (8003dbc <prvAddNewTaskToReadyList+0xc4>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	3301      	adds	r3, #1
 8003d0a:	4a2c      	ldr	r2, [pc, #176]	@ (8003dbc <prvAddNewTaskToReadyList+0xc4>)
 8003d0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003d0e:	4b2c      	ldr	r3, [pc, #176]	@ (8003dc0 <prvAddNewTaskToReadyList+0xc8>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d109      	bne.n	8003d2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003d16:	4a2a      	ldr	r2, [pc, #168]	@ (8003dc0 <prvAddNewTaskToReadyList+0xc8>)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003d1c:	4b27      	ldr	r3, [pc, #156]	@ (8003dbc <prvAddNewTaskToReadyList+0xc4>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d110      	bne.n	8003d46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003d24:	f000 fd48 	bl	80047b8 <prvInitialiseTaskLists>
 8003d28:	e00d      	b.n	8003d46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003d2a:	4b26      	ldr	r3, [pc, #152]	@ (8003dc4 <prvAddNewTaskToReadyList+0xcc>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d109      	bne.n	8003d46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003d32:	4b23      	ldr	r3, [pc, #140]	@ (8003dc0 <prvAddNewTaskToReadyList+0xc8>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d802      	bhi.n	8003d46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003d40:	4a1f      	ldr	r2, [pc, #124]	@ (8003dc0 <prvAddNewTaskToReadyList+0xc8>)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003d46:	4b20      	ldr	r3, [pc, #128]	@ (8003dc8 <prvAddNewTaskToReadyList+0xd0>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	4a1e      	ldr	r2, [pc, #120]	@ (8003dc8 <prvAddNewTaskToReadyList+0xd0>)
 8003d4e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003d50:	4b1d      	ldr	r3, [pc, #116]	@ (8003dc8 <prvAddNewTaskToReadyList+0xd0>)
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d5c:	4b1b      	ldr	r3, [pc, #108]	@ (8003dcc <prvAddNewTaskToReadyList+0xd4>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d903      	bls.n	8003d6c <prvAddNewTaskToReadyList+0x74>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d68:	4a18      	ldr	r2, [pc, #96]	@ (8003dcc <prvAddNewTaskToReadyList+0xd4>)
 8003d6a:	6013      	str	r3, [r2, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d70:	4613      	mov	r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	4413      	add	r3, r2
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	4a15      	ldr	r2, [pc, #84]	@ (8003dd0 <prvAddNewTaskToReadyList+0xd8>)
 8003d7a:	441a      	add	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	3304      	adds	r3, #4
 8003d80:	4619      	mov	r1, r3
 8003d82:	4610      	mov	r0, r2
 8003d84:	f7fe fdb7 	bl	80028f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003d88:	f001 fc78 	bl	800567c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003d8c:	4b0d      	ldr	r3, [pc, #52]	@ (8003dc4 <prvAddNewTaskToReadyList+0xcc>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00e      	beq.n	8003db2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003d94:	4b0a      	ldr	r3, [pc, #40]	@ (8003dc0 <prvAddNewTaskToReadyList+0xc8>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d207      	bcs.n	8003db2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003da2:	4b0c      	ldr	r3, [pc, #48]	@ (8003dd4 <prvAddNewTaskToReadyList+0xdc>)
 8003da4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003da8:	601a      	str	r2, [r3, #0]
 8003daa:	f3bf 8f4f 	dsb	sy
 8003dae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003db2:	bf00      	nop
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	20000d60 	.word	0x20000d60
 8003dc0:	2000088c 	.word	0x2000088c
 8003dc4:	20000d6c 	.word	0x20000d6c
 8003dc8:	20000d7c 	.word	0x20000d7c
 8003dcc:	20000d68 	.word	0x20000d68
 8003dd0:	20000890 	.word	0x20000890
 8003dd4:	e000ed04 	.word	0xe000ed04

08003dd8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003de0:	2300      	movs	r3, #0
 8003de2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d018      	beq.n	8003e1c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003dea:	4b14      	ldr	r3, [pc, #80]	@ (8003e3c <vTaskDelay+0x64>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00b      	beq.n	8003e0a <vTaskDelay+0x32>
	__asm volatile
 8003df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003df6:	f383 8811 	msr	BASEPRI, r3
 8003dfa:	f3bf 8f6f 	isb	sy
 8003dfe:	f3bf 8f4f 	dsb	sy
 8003e02:	60bb      	str	r3, [r7, #8]
}
 8003e04:	bf00      	nop
 8003e06:	bf00      	nop
 8003e08:	e7fd      	b.n	8003e06 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003e0a:	f000 f993 	bl	8004134 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003e0e:	2100      	movs	r1, #0
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 ff23 	bl	8004c5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003e16:	f000 f99b 	bl	8004150 <xTaskResumeAll>
 8003e1a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d107      	bne.n	8003e32 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003e22:	4b07      	ldr	r3, [pc, #28]	@ (8003e40 <vTaskDelay+0x68>)
 8003e24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e28:	601a      	str	r2, [r3, #0]
 8003e2a:	f3bf 8f4f 	dsb	sy
 8003e2e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003e32:	bf00      	nop
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	20000d88 	.word	0x20000d88
 8003e40:	e000ed04 	.word	0xe000ed04

08003e44 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003e4c:	f001 fbe4 	bl	8005618 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d102      	bne.n	8003e5c <vTaskSuspend+0x18>
 8003e56:	4b30      	ldr	r3, [pc, #192]	@ (8003f18 <vTaskSuspend+0xd4>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	e000      	b.n	8003e5e <vTaskSuspend+0x1a>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	3304      	adds	r3, #4
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7fe fda3 	bl	80029b0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d004      	beq.n	8003e7c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	3318      	adds	r3, #24
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7fe fd9a 	bl	80029b0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	3304      	adds	r3, #4
 8003e80:	4619      	mov	r1, r3
 8003e82:	4826      	ldr	r0, [pc, #152]	@ (8003f1c <vTaskSuspend+0xd8>)
 8003e84:	f7fe fd37 	bl	80028f6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d103      	bne.n	8003e9c <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8003e9c:	f001 fbee 	bl	800567c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8003ea0:	4b1f      	ldr	r3, [pc, #124]	@ (8003f20 <vTaskSuspend+0xdc>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d005      	beq.n	8003eb4 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8003ea8:	f001 fbb6 	bl	8005618 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8003eac:	f000 fd28 	bl	8004900 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8003eb0:	f001 fbe4 	bl	800567c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8003eb4:	4b18      	ldr	r3, [pc, #96]	@ (8003f18 <vTaskSuspend+0xd4>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d128      	bne.n	8003f10 <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 8003ebe:	4b18      	ldr	r3, [pc, #96]	@ (8003f20 <vTaskSuspend+0xdc>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d018      	beq.n	8003ef8 <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8003ec6:	4b17      	ldr	r3, [pc, #92]	@ (8003f24 <vTaskSuspend+0xe0>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00b      	beq.n	8003ee6 <vTaskSuspend+0xa2>
	__asm volatile
 8003ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ed2:	f383 8811 	msr	BASEPRI, r3
 8003ed6:	f3bf 8f6f 	isb	sy
 8003eda:	f3bf 8f4f 	dsb	sy
 8003ede:	60bb      	str	r3, [r7, #8]
}
 8003ee0:	bf00      	nop
 8003ee2:	bf00      	nop
 8003ee4:	e7fd      	b.n	8003ee2 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8003ee6:	4b10      	ldr	r3, [pc, #64]	@ (8003f28 <vTaskSuspend+0xe4>)
 8003ee8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003eec:	601a      	str	r2, [r3, #0]
 8003eee:	f3bf 8f4f 	dsb	sy
 8003ef2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003ef6:	e00b      	b.n	8003f10 <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8003ef8:	4b08      	ldr	r3, [pc, #32]	@ (8003f1c <vTaskSuspend+0xd8>)
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	4b0b      	ldr	r3, [pc, #44]	@ (8003f2c <vTaskSuspend+0xe8>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d103      	bne.n	8003f0c <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 8003f04:	4b04      	ldr	r3, [pc, #16]	@ (8003f18 <vTaskSuspend+0xd4>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	601a      	str	r2, [r3, #0]
	}
 8003f0a:	e001      	b.n	8003f10 <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 8003f0c:	f000 fa9a 	bl	8004444 <vTaskSwitchContext>
	}
 8003f10:	bf00      	nop
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	2000088c 	.word	0x2000088c
 8003f1c:	20000d4c 	.word	0x20000d4c
 8003f20:	20000d6c 	.word	0x20000d6c
 8003f24:	20000d88 	.word	0x20000d88
 8003f28:	e000ed04 	.word	0xe000ed04
 8003f2c:	20000d60 	.word	0x20000d60

08003f30 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8003f30:	b480      	push	{r7}
 8003f32:	b087      	sub	sp, #28
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d10b      	bne.n	8003f5e <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 8003f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f4a:	f383 8811 	msr	BASEPRI, r3
 8003f4e:	f3bf 8f6f 	isb	sy
 8003f52:	f3bf 8f4f 	dsb	sy
 8003f56:	60fb      	str	r3, [r7, #12]
}
 8003f58:	bf00      	nop
 8003f5a:	bf00      	nop
 8003f5c:	e7fd      	b.n	8003f5a <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	4a0a      	ldr	r2, [pc, #40]	@ (8003f8c <prvTaskIsTaskSuspended+0x5c>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d10a      	bne.n	8003f7e <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f6c:	4a08      	ldr	r2, [pc, #32]	@ (8003f90 <prvTaskIsTaskSuspended+0x60>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d005      	beq.n	8003f7e <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003f7e:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003f80:	4618      	mov	r0, r3
 8003f82:	371c      	adds	r7, #28
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr
 8003f8c:	20000d4c 	.word	0x20000d4c
 8003f90:	20000d20 	.word	0x20000d20

08003f94 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10b      	bne.n	8003fbe <vTaskResume+0x2a>
	__asm volatile
 8003fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003faa:	f383 8811 	msr	BASEPRI, r3
 8003fae:	f3bf 8f6f 	isb	sy
 8003fb2:	f3bf 8f4f 	dsb	sy
 8003fb6:	60bb      	str	r3, [r7, #8]
}
 8003fb8:	bf00      	nop
 8003fba:	bf00      	nop
 8003fbc:	e7fd      	b.n	8003fba <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8003fbe:	4b21      	ldr	r3, [pc, #132]	@ (8004044 <vTaskResume+0xb0>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d038      	beq.n	800403a <vTaskResume+0xa6>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d035      	beq.n	800403a <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 8003fce:	f001 fb23 	bl	8005618 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	f7ff ffac 	bl	8003f30 <prvTaskIsTaskSuspended>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d02b      	beq.n	8004036 <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	3304      	adds	r3, #4
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fe fce4 	bl	80029b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fec:	4b16      	ldr	r3, [pc, #88]	@ (8004048 <vTaskResume+0xb4>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d903      	bls.n	8003ffc <vTaskResume+0x68>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff8:	4a13      	ldr	r2, [pc, #76]	@ (8004048 <vTaskResume+0xb4>)
 8003ffa:	6013      	str	r3, [r2, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004000:	4613      	mov	r3, r2
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	4413      	add	r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	4a10      	ldr	r2, [pc, #64]	@ (800404c <vTaskResume+0xb8>)
 800400a:	441a      	add	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	3304      	adds	r3, #4
 8004010:	4619      	mov	r1, r3
 8004012:	4610      	mov	r0, r2
 8004014:	f7fe fc6f 	bl	80028f6 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800401c:	4b09      	ldr	r3, [pc, #36]	@ (8004044 <vTaskResume+0xb0>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004022:	429a      	cmp	r2, r3
 8004024:	d307      	bcc.n	8004036 <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8004026:	4b0a      	ldr	r3, [pc, #40]	@ (8004050 <vTaskResume+0xbc>)
 8004028:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800402c:	601a      	str	r2, [r3, #0]
 800402e:	f3bf 8f4f 	dsb	sy
 8004032:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8004036:	f001 fb21 	bl	800567c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800403a:	bf00      	nop
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	2000088c 	.word	0x2000088c
 8004048:	20000d68 	.word	0x20000d68
 800404c:	20000890 	.word	0x20000890
 8004050:	e000ed04 	.word	0xe000ed04

08004054 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b08a      	sub	sp, #40	@ 0x28
 8004058:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800405a:	2300      	movs	r3, #0
 800405c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800405e:	2300      	movs	r3, #0
 8004060:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004062:	463a      	mov	r2, r7
 8004064:	1d39      	adds	r1, r7, #4
 8004066:	f107 0308 	add.w	r3, r7, #8
 800406a:	4618      	mov	r0, r3
 800406c:	f7fe fbe2 	bl	8002834 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004070:	6839      	ldr	r1, [r7, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	68ba      	ldr	r2, [r7, #8]
 8004076:	9202      	str	r2, [sp, #8]
 8004078:	9301      	str	r3, [sp, #4]
 800407a:	2300      	movs	r3, #0
 800407c:	9300      	str	r3, [sp, #0]
 800407e:	2300      	movs	r3, #0
 8004080:	460a      	mov	r2, r1
 8004082:	4924      	ldr	r1, [pc, #144]	@ (8004114 <vTaskStartScheduler+0xc0>)
 8004084:	4824      	ldr	r0, [pc, #144]	@ (8004118 <vTaskStartScheduler+0xc4>)
 8004086:	f7ff fce9 	bl	8003a5c <xTaskCreateStatic>
 800408a:	4603      	mov	r3, r0
 800408c:	4a23      	ldr	r2, [pc, #140]	@ (800411c <vTaskStartScheduler+0xc8>)
 800408e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004090:	4b22      	ldr	r3, [pc, #136]	@ (800411c <vTaskStartScheduler+0xc8>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d002      	beq.n	800409e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004098:	2301      	movs	r3, #1
 800409a:	617b      	str	r3, [r7, #20]
 800409c:	e001      	b.n	80040a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800409e:	2300      	movs	r3, #0
 80040a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d102      	bne.n	80040ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80040a8:	f000 fe2c 	bl	8004d04 <xTimerCreateTimerTask>
 80040ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d11b      	bne.n	80040ec <vTaskStartScheduler+0x98>
	__asm volatile
 80040b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040b8:	f383 8811 	msr	BASEPRI, r3
 80040bc:	f3bf 8f6f 	isb	sy
 80040c0:	f3bf 8f4f 	dsb	sy
 80040c4:	613b      	str	r3, [r7, #16]
}
 80040c6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80040c8:	4b15      	ldr	r3, [pc, #84]	@ (8004120 <vTaskStartScheduler+0xcc>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	3354      	adds	r3, #84	@ 0x54
 80040ce:	4a15      	ldr	r2, [pc, #84]	@ (8004124 <vTaskStartScheduler+0xd0>)
 80040d0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80040d2:	4b15      	ldr	r3, [pc, #84]	@ (8004128 <vTaskStartScheduler+0xd4>)
 80040d4:	f04f 32ff 	mov.w	r2, #4294967295
 80040d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80040da:	4b14      	ldr	r3, [pc, #80]	@ (800412c <vTaskStartScheduler+0xd8>)
 80040dc:	2201      	movs	r2, #1
 80040de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80040e0:	4b13      	ldr	r3, [pc, #76]	@ (8004130 <vTaskStartScheduler+0xdc>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80040e6:	f001 f9f3 	bl	80054d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80040ea:	e00f      	b.n	800410c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f2:	d10b      	bne.n	800410c <vTaskStartScheduler+0xb8>
	__asm volatile
 80040f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040f8:	f383 8811 	msr	BASEPRI, r3
 80040fc:	f3bf 8f6f 	isb	sy
 8004100:	f3bf 8f4f 	dsb	sy
 8004104:	60fb      	str	r3, [r7, #12]
}
 8004106:	bf00      	nop
 8004108:	bf00      	nop
 800410a:	e7fd      	b.n	8004108 <vTaskStartScheduler+0xb4>
}
 800410c:	bf00      	nop
 800410e:	3718      	adds	r7, #24
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	08006708 	.word	0x08006708
 8004118:	08004789 	.word	0x08004789
 800411c:	20000d84 	.word	0x20000d84
 8004120:	2000088c 	.word	0x2000088c
 8004124:	2000001c 	.word	0x2000001c
 8004128:	20000d80 	.word	0x20000d80
 800412c:	20000d6c 	.word	0x20000d6c
 8004130:	20000d64 	.word	0x20000d64

08004134 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004138:	4b04      	ldr	r3, [pc, #16]	@ (800414c <vTaskSuspendAll+0x18>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	3301      	adds	r3, #1
 800413e:	4a03      	ldr	r2, [pc, #12]	@ (800414c <vTaskSuspendAll+0x18>)
 8004140:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004142:	bf00      	nop
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr
 800414c:	20000d88 	.word	0x20000d88

08004150 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004156:	2300      	movs	r3, #0
 8004158:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800415a:	2300      	movs	r3, #0
 800415c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800415e:	4b42      	ldr	r3, [pc, #264]	@ (8004268 <xTaskResumeAll+0x118>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d10b      	bne.n	800417e <xTaskResumeAll+0x2e>
	__asm volatile
 8004166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800416a:	f383 8811 	msr	BASEPRI, r3
 800416e:	f3bf 8f6f 	isb	sy
 8004172:	f3bf 8f4f 	dsb	sy
 8004176:	603b      	str	r3, [r7, #0]
}
 8004178:	bf00      	nop
 800417a:	bf00      	nop
 800417c:	e7fd      	b.n	800417a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800417e:	f001 fa4b 	bl	8005618 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004182:	4b39      	ldr	r3, [pc, #228]	@ (8004268 <xTaskResumeAll+0x118>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	3b01      	subs	r3, #1
 8004188:	4a37      	ldr	r2, [pc, #220]	@ (8004268 <xTaskResumeAll+0x118>)
 800418a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800418c:	4b36      	ldr	r3, [pc, #216]	@ (8004268 <xTaskResumeAll+0x118>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d162      	bne.n	800425a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004194:	4b35      	ldr	r3, [pc, #212]	@ (800426c <xTaskResumeAll+0x11c>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d05e      	beq.n	800425a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800419c:	e02f      	b.n	80041fe <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800419e:	4b34      	ldr	r3, [pc, #208]	@ (8004270 <xTaskResumeAll+0x120>)
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	3318      	adds	r3, #24
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7fe fc00 	bl	80029b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	3304      	adds	r3, #4
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7fe fbfb 	bl	80029b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041be:	4b2d      	ldr	r3, [pc, #180]	@ (8004274 <xTaskResumeAll+0x124>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d903      	bls.n	80041ce <xTaskResumeAll+0x7e>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ca:	4a2a      	ldr	r2, [pc, #168]	@ (8004274 <xTaskResumeAll+0x124>)
 80041cc:	6013      	str	r3, [r2, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041d2:	4613      	mov	r3, r2
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	4413      	add	r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	4a27      	ldr	r2, [pc, #156]	@ (8004278 <xTaskResumeAll+0x128>)
 80041dc:	441a      	add	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	3304      	adds	r3, #4
 80041e2:	4619      	mov	r1, r3
 80041e4:	4610      	mov	r0, r2
 80041e6:	f7fe fb86 	bl	80028f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041ee:	4b23      	ldr	r3, [pc, #140]	@ (800427c <xTaskResumeAll+0x12c>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d302      	bcc.n	80041fe <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80041f8:	4b21      	ldr	r3, [pc, #132]	@ (8004280 <xTaskResumeAll+0x130>)
 80041fa:	2201      	movs	r2, #1
 80041fc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80041fe:	4b1c      	ldr	r3, [pc, #112]	@ (8004270 <xTaskResumeAll+0x120>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1cb      	bne.n	800419e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d001      	beq.n	8004210 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800420c:	f000 fb78 	bl	8004900 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004210:	4b1c      	ldr	r3, [pc, #112]	@ (8004284 <xTaskResumeAll+0x134>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d010      	beq.n	800423e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800421c:	f000 f858 	bl	80042d0 <xTaskIncrementTick>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d002      	beq.n	800422c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004226:	4b16      	ldr	r3, [pc, #88]	@ (8004280 <xTaskResumeAll+0x130>)
 8004228:	2201      	movs	r2, #1
 800422a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	3b01      	subs	r3, #1
 8004230:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1f1      	bne.n	800421c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004238:	4b12      	ldr	r3, [pc, #72]	@ (8004284 <xTaskResumeAll+0x134>)
 800423a:	2200      	movs	r2, #0
 800423c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800423e:	4b10      	ldr	r3, [pc, #64]	@ (8004280 <xTaskResumeAll+0x130>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d009      	beq.n	800425a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004246:	2301      	movs	r3, #1
 8004248:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800424a:	4b0f      	ldr	r3, [pc, #60]	@ (8004288 <xTaskResumeAll+0x138>)
 800424c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004250:	601a      	str	r2, [r3, #0]
 8004252:	f3bf 8f4f 	dsb	sy
 8004256:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800425a:	f001 fa0f 	bl	800567c <vPortExitCritical>

	return xAlreadyYielded;
 800425e:	68bb      	ldr	r3, [r7, #8]
}
 8004260:	4618      	mov	r0, r3
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	20000d88 	.word	0x20000d88
 800426c:	20000d60 	.word	0x20000d60
 8004270:	20000d20 	.word	0x20000d20
 8004274:	20000d68 	.word	0x20000d68
 8004278:	20000890 	.word	0x20000890
 800427c:	2000088c 	.word	0x2000088c
 8004280:	20000d74 	.word	0x20000d74
 8004284:	20000d70 	.word	0x20000d70
 8004288:	e000ed04 	.word	0xe000ed04

0800428c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004292:	4b05      	ldr	r3, [pc, #20]	@ (80042a8 <xTaskGetTickCount+0x1c>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004298:	687b      	ldr	r3, [r7, #4]
}
 800429a:	4618      	mov	r0, r3
 800429c:	370c      	adds	r7, #12
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	20000d64 	.word	0x20000d64

080042ac <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80042b2:	f001 fa91 	bl	80057d8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80042b6:	2300      	movs	r3, #0
 80042b8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80042ba:	4b04      	ldr	r3, [pc, #16]	@ (80042cc <xTaskGetTickCountFromISR+0x20>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80042c0:	683b      	ldr	r3, [r7, #0]
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3708      	adds	r7, #8
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	20000d64 	.word	0x20000d64

080042d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b086      	sub	sp, #24
 80042d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80042d6:	2300      	movs	r3, #0
 80042d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042da:	4b4f      	ldr	r3, [pc, #316]	@ (8004418 <xTaskIncrementTick+0x148>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f040 8090 	bne.w	8004404 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80042e4:	4b4d      	ldr	r3, [pc, #308]	@ (800441c <xTaskIncrementTick+0x14c>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	3301      	adds	r3, #1
 80042ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80042ec:	4a4b      	ldr	r2, [pc, #300]	@ (800441c <xTaskIncrementTick+0x14c>)
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d121      	bne.n	800433c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80042f8:	4b49      	ldr	r3, [pc, #292]	@ (8004420 <xTaskIncrementTick+0x150>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00b      	beq.n	800431a <xTaskIncrementTick+0x4a>
	__asm volatile
 8004302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004306:	f383 8811 	msr	BASEPRI, r3
 800430a:	f3bf 8f6f 	isb	sy
 800430e:	f3bf 8f4f 	dsb	sy
 8004312:	603b      	str	r3, [r7, #0]
}
 8004314:	bf00      	nop
 8004316:	bf00      	nop
 8004318:	e7fd      	b.n	8004316 <xTaskIncrementTick+0x46>
 800431a:	4b41      	ldr	r3, [pc, #260]	@ (8004420 <xTaskIncrementTick+0x150>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	60fb      	str	r3, [r7, #12]
 8004320:	4b40      	ldr	r3, [pc, #256]	@ (8004424 <xTaskIncrementTick+0x154>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a3e      	ldr	r2, [pc, #248]	@ (8004420 <xTaskIncrementTick+0x150>)
 8004326:	6013      	str	r3, [r2, #0]
 8004328:	4a3e      	ldr	r2, [pc, #248]	@ (8004424 <xTaskIncrementTick+0x154>)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6013      	str	r3, [r2, #0]
 800432e:	4b3e      	ldr	r3, [pc, #248]	@ (8004428 <xTaskIncrementTick+0x158>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	3301      	adds	r3, #1
 8004334:	4a3c      	ldr	r2, [pc, #240]	@ (8004428 <xTaskIncrementTick+0x158>)
 8004336:	6013      	str	r3, [r2, #0]
 8004338:	f000 fae2 	bl	8004900 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800433c:	4b3b      	ldr	r3, [pc, #236]	@ (800442c <xTaskIncrementTick+0x15c>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	429a      	cmp	r2, r3
 8004344:	d349      	bcc.n	80043da <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004346:	4b36      	ldr	r3, [pc, #216]	@ (8004420 <xTaskIncrementTick+0x150>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d104      	bne.n	800435a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004350:	4b36      	ldr	r3, [pc, #216]	@ (800442c <xTaskIncrementTick+0x15c>)
 8004352:	f04f 32ff 	mov.w	r2, #4294967295
 8004356:	601a      	str	r2, [r3, #0]
					break;
 8004358:	e03f      	b.n	80043da <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800435a:	4b31      	ldr	r3, [pc, #196]	@ (8004420 <xTaskIncrementTick+0x150>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	429a      	cmp	r2, r3
 8004370:	d203      	bcs.n	800437a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004372:	4a2e      	ldr	r2, [pc, #184]	@ (800442c <xTaskIncrementTick+0x15c>)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004378:	e02f      	b.n	80043da <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	3304      	adds	r3, #4
 800437e:	4618      	mov	r0, r3
 8004380:	f7fe fb16 	bl	80029b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004388:	2b00      	cmp	r3, #0
 800438a:	d004      	beq.n	8004396 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	3318      	adds	r3, #24
 8004390:	4618      	mov	r0, r3
 8004392:	f7fe fb0d 	bl	80029b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800439a:	4b25      	ldr	r3, [pc, #148]	@ (8004430 <xTaskIncrementTick+0x160>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d903      	bls.n	80043aa <xTaskIncrementTick+0xda>
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043a6:	4a22      	ldr	r2, [pc, #136]	@ (8004430 <xTaskIncrementTick+0x160>)
 80043a8:	6013      	str	r3, [r2, #0]
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043ae:	4613      	mov	r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	4413      	add	r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	4a1f      	ldr	r2, [pc, #124]	@ (8004434 <xTaskIncrementTick+0x164>)
 80043b8:	441a      	add	r2, r3
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	3304      	adds	r3, #4
 80043be:	4619      	mov	r1, r3
 80043c0:	4610      	mov	r0, r2
 80043c2:	f7fe fa98 	bl	80028f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043ca:	4b1b      	ldr	r3, [pc, #108]	@ (8004438 <xTaskIncrementTick+0x168>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d3b8      	bcc.n	8004346 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80043d4:	2301      	movs	r3, #1
 80043d6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043d8:	e7b5      	b.n	8004346 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80043da:	4b17      	ldr	r3, [pc, #92]	@ (8004438 <xTaskIncrementTick+0x168>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043e0:	4914      	ldr	r1, [pc, #80]	@ (8004434 <xTaskIncrementTick+0x164>)
 80043e2:	4613      	mov	r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	4413      	add	r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	440b      	add	r3, r1
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d901      	bls.n	80043f6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80043f2:	2301      	movs	r3, #1
 80043f4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80043f6:	4b11      	ldr	r3, [pc, #68]	@ (800443c <xTaskIncrementTick+0x16c>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d007      	beq.n	800440e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80043fe:	2301      	movs	r3, #1
 8004400:	617b      	str	r3, [r7, #20]
 8004402:	e004      	b.n	800440e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004404:	4b0e      	ldr	r3, [pc, #56]	@ (8004440 <xTaskIncrementTick+0x170>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	3301      	adds	r3, #1
 800440a:	4a0d      	ldr	r2, [pc, #52]	@ (8004440 <xTaskIncrementTick+0x170>)
 800440c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800440e:	697b      	ldr	r3, [r7, #20]
}
 8004410:	4618      	mov	r0, r3
 8004412:	3718      	adds	r7, #24
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	20000d88 	.word	0x20000d88
 800441c:	20000d64 	.word	0x20000d64
 8004420:	20000d18 	.word	0x20000d18
 8004424:	20000d1c 	.word	0x20000d1c
 8004428:	20000d78 	.word	0x20000d78
 800442c:	20000d80 	.word	0x20000d80
 8004430:	20000d68 	.word	0x20000d68
 8004434:	20000890 	.word	0x20000890
 8004438:	2000088c 	.word	0x2000088c
 800443c:	20000d74 	.word	0x20000d74
 8004440:	20000d70 	.word	0x20000d70

08004444 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800444a:	4b2b      	ldr	r3, [pc, #172]	@ (80044f8 <vTaskSwitchContext+0xb4>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d003      	beq.n	800445a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004452:	4b2a      	ldr	r3, [pc, #168]	@ (80044fc <vTaskSwitchContext+0xb8>)
 8004454:	2201      	movs	r2, #1
 8004456:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004458:	e047      	b.n	80044ea <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800445a:	4b28      	ldr	r3, [pc, #160]	@ (80044fc <vTaskSwitchContext+0xb8>)
 800445c:	2200      	movs	r2, #0
 800445e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004460:	4b27      	ldr	r3, [pc, #156]	@ (8004500 <vTaskSwitchContext+0xbc>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	60fb      	str	r3, [r7, #12]
 8004466:	e011      	b.n	800448c <vTaskSwitchContext+0x48>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10b      	bne.n	8004486 <vTaskSwitchContext+0x42>
	__asm volatile
 800446e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004472:	f383 8811 	msr	BASEPRI, r3
 8004476:	f3bf 8f6f 	isb	sy
 800447a:	f3bf 8f4f 	dsb	sy
 800447e:	607b      	str	r3, [r7, #4]
}
 8004480:	bf00      	nop
 8004482:	bf00      	nop
 8004484:	e7fd      	b.n	8004482 <vTaskSwitchContext+0x3e>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	3b01      	subs	r3, #1
 800448a:	60fb      	str	r3, [r7, #12]
 800448c:	491d      	ldr	r1, [pc, #116]	@ (8004504 <vTaskSwitchContext+0xc0>)
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	4613      	mov	r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	4413      	add	r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	440b      	add	r3, r1
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d0e3      	beq.n	8004468 <vTaskSwitchContext+0x24>
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	4613      	mov	r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	4413      	add	r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	4a16      	ldr	r2, [pc, #88]	@ (8004504 <vTaskSwitchContext+0xc0>)
 80044ac:	4413      	add	r3, r2
 80044ae:	60bb      	str	r3, [r7, #8]
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	685a      	ldr	r2, [r3, #4]
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	605a      	str	r2, [r3, #4]
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	685a      	ldr	r2, [r3, #4]
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	3308      	adds	r3, #8
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d104      	bne.n	80044d0 <vTaskSwitchContext+0x8c>
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	685a      	ldr	r2, [r3, #4]
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	605a      	str	r2, [r3, #4]
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	4a0c      	ldr	r2, [pc, #48]	@ (8004508 <vTaskSwitchContext+0xc4>)
 80044d8:	6013      	str	r3, [r2, #0]
 80044da:	4a09      	ldr	r2, [pc, #36]	@ (8004500 <vTaskSwitchContext+0xbc>)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80044e0:	4b09      	ldr	r3, [pc, #36]	@ (8004508 <vTaskSwitchContext+0xc4>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	3354      	adds	r3, #84	@ 0x54
 80044e6:	4a09      	ldr	r2, [pc, #36]	@ (800450c <vTaskSwitchContext+0xc8>)
 80044e8:	6013      	str	r3, [r2, #0]
}
 80044ea:	bf00      	nop
 80044ec:	3714      	adds	r7, #20
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	20000d88 	.word	0x20000d88
 80044fc:	20000d74 	.word	0x20000d74
 8004500:	20000d68 	.word	0x20000d68
 8004504:	20000890 	.word	0x20000890
 8004508:	2000088c 	.word	0x2000088c
 800450c:	2000001c 	.word	0x2000001c

08004510 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d10b      	bne.n	8004538 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004524:	f383 8811 	msr	BASEPRI, r3
 8004528:	f3bf 8f6f 	isb	sy
 800452c:	f3bf 8f4f 	dsb	sy
 8004530:	60fb      	str	r3, [r7, #12]
}
 8004532:	bf00      	nop
 8004534:	bf00      	nop
 8004536:	e7fd      	b.n	8004534 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004538:	4b07      	ldr	r3, [pc, #28]	@ (8004558 <vTaskPlaceOnEventList+0x48>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	3318      	adds	r3, #24
 800453e:	4619      	mov	r1, r3
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f7fe f9fc 	bl	800293e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004546:	2101      	movs	r1, #1
 8004548:	6838      	ldr	r0, [r7, #0]
 800454a:	f000 fb87 	bl	8004c5c <prvAddCurrentTaskToDelayedList>
}
 800454e:	bf00      	nop
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	2000088c 	.word	0x2000088c

0800455c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800455c:	b580      	push	{r7, lr}
 800455e:	b086      	sub	sp, #24
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10b      	bne.n	8004586 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800456e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004572:	f383 8811 	msr	BASEPRI, r3
 8004576:	f3bf 8f6f 	isb	sy
 800457a:	f3bf 8f4f 	dsb	sy
 800457e:	617b      	str	r3, [r7, #20]
}
 8004580:	bf00      	nop
 8004582:	bf00      	nop
 8004584:	e7fd      	b.n	8004582 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004586:	4b0a      	ldr	r3, [pc, #40]	@ (80045b0 <vTaskPlaceOnEventListRestricted+0x54>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	3318      	adds	r3, #24
 800458c:	4619      	mov	r1, r3
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f7fe f9b1 	bl	80028f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d002      	beq.n	80045a0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800459a:	f04f 33ff 	mov.w	r3, #4294967295
 800459e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80045a0:	6879      	ldr	r1, [r7, #4]
 80045a2:	68b8      	ldr	r0, [r7, #8]
 80045a4:	f000 fb5a 	bl	8004c5c <prvAddCurrentTaskToDelayedList>
	}
 80045a8:	bf00      	nop
 80045aa:	3718      	adds	r7, #24
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	2000088c 	.word	0x2000088c

080045b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10b      	bne.n	80045e2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80045ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ce:	f383 8811 	msr	BASEPRI, r3
 80045d2:	f3bf 8f6f 	isb	sy
 80045d6:	f3bf 8f4f 	dsb	sy
 80045da:	60fb      	str	r3, [r7, #12]
}
 80045dc:	bf00      	nop
 80045de:	bf00      	nop
 80045e0:	e7fd      	b.n	80045de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	3318      	adds	r3, #24
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7fe f9e2 	bl	80029b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045ec:	4b1d      	ldr	r3, [pc, #116]	@ (8004664 <xTaskRemoveFromEventList+0xb0>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d11d      	bne.n	8004630 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	3304      	adds	r3, #4
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7fe f9d9 	bl	80029b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004602:	4b19      	ldr	r3, [pc, #100]	@ (8004668 <xTaskRemoveFromEventList+0xb4>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	429a      	cmp	r2, r3
 8004608:	d903      	bls.n	8004612 <xTaskRemoveFromEventList+0x5e>
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800460e:	4a16      	ldr	r2, [pc, #88]	@ (8004668 <xTaskRemoveFromEventList+0xb4>)
 8004610:	6013      	str	r3, [r2, #0]
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004616:	4613      	mov	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	4413      	add	r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	4a13      	ldr	r2, [pc, #76]	@ (800466c <xTaskRemoveFromEventList+0xb8>)
 8004620:	441a      	add	r2, r3
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	3304      	adds	r3, #4
 8004626:	4619      	mov	r1, r3
 8004628:	4610      	mov	r0, r2
 800462a:	f7fe f964 	bl	80028f6 <vListInsertEnd>
 800462e:	e005      	b.n	800463c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	3318      	adds	r3, #24
 8004634:	4619      	mov	r1, r3
 8004636:	480e      	ldr	r0, [pc, #56]	@ (8004670 <xTaskRemoveFromEventList+0xbc>)
 8004638:	f7fe f95d 	bl	80028f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004640:	4b0c      	ldr	r3, [pc, #48]	@ (8004674 <xTaskRemoveFromEventList+0xc0>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004646:	429a      	cmp	r2, r3
 8004648:	d905      	bls.n	8004656 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800464a:	2301      	movs	r3, #1
 800464c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800464e:	4b0a      	ldr	r3, [pc, #40]	@ (8004678 <xTaskRemoveFromEventList+0xc4>)
 8004650:	2201      	movs	r2, #1
 8004652:	601a      	str	r2, [r3, #0]
 8004654:	e001      	b.n	800465a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004656:	2300      	movs	r3, #0
 8004658:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800465a:	697b      	ldr	r3, [r7, #20]
}
 800465c:	4618      	mov	r0, r3
 800465e:	3718      	adds	r7, #24
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	20000d88 	.word	0x20000d88
 8004668:	20000d68 	.word	0x20000d68
 800466c:	20000890 	.word	0x20000890
 8004670:	20000d20 	.word	0x20000d20
 8004674:	2000088c 	.word	0x2000088c
 8004678:	20000d74 	.word	0x20000d74

0800467c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004684:	4b06      	ldr	r3, [pc, #24]	@ (80046a0 <vTaskInternalSetTimeOutState+0x24>)
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800468c:	4b05      	ldr	r3, [pc, #20]	@ (80046a4 <vTaskInternalSetTimeOutState+0x28>)
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	605a      	str	r2, [r3, #4]
}
 8004694:	bf00      	nop
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr
 80046a0:	20000d78 	.word	0x20000d78
 80046a4:	20000d64 	.word	0x20000d64

080046a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b088      	sub	sp, #32
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d10b      	bne.n	80046d0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80046b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046bc:	f383 8811 	msr	BASEPRI, r3
 80046c0:	f3bf 8f6f 	isb	sy
 80046c4:	f3bf 8f4f 	dsb	sy
 80046c8:	613b      	str	r3, [r7, #16]
}
 80046ca:	bf00      	nop
 80046cc:	bf00      	nop
 80046ce:	e7fd      	b.n	80046cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10b      	bne.n	80046ee <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80046d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046da:	f383 8811 	msr	BASEPRI, r3
 80046de:	f3bf 8f6f 	isb	sy
 80046e2:	f3bf 8f4f 	dsb	sy
 80046e6:	60fb      	str	r3, [r7, #12]
}
 80046e8:	bf00      	nop
 80046ea:	bf00      	nop
 80046ec:	e7fd      	b.n	80046ea <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80046ee:	f000 ff93 	bl	8005618 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80046f2:	4b1d      	ldr	r3, [pc, #116]	@ (8004768 <xTaskCheckForTimeOut+0xc0>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800470a:	d102      	bne.n	8004712 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800470c:	2300      	movs	r3, #0
 800470e:	61fb      	str	r3, [r7, #28]
 8004710:	e023      	b.n	800475a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	4b15      	ldr	r3, [pc, #84]	@ (800476c <xTaskCheckForTimeOut+0xc4>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	429a      	cmp	r2, r3
 800471c:	d007      	beq.n	800472e <xTaskCheckForTimeOut+0x86>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	429a      	cmp	r2, r3
 8004726:	d302      	bcc.n	800472e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004728:	2301      	movs	r3, #1
 800472a:	61fb      	str	r3, [r7, #28]
 800472c:	e015      	b.n	800475a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	429a      	cmp	r2, r3
 8004736:	d20b      	bcs.n	8004750 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	1ad2      	subs	r2, r2, r3
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f7ff ff99 	bl	800467c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800474a:	2300      	movs	r3, #0
 800474c:	61fb      	str	r3, [r7, #28]
 800474e:	e004      	b.n	800475a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	2200      	movs	r2, #0
 8004754:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004756:	2301      	movs	r3, #1
 8004758:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800475a:	f000 ff8f 	bl	800567c <vPortExitCritical>

	return xReturn;
 800475e:	69fb      	ldr	r3, [r7, #28]
}
 8004760:	4618      	mov	r0, r3
 8004762:	3720      	adds	r7, #32
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	20000d64 	.word	0x20000d64
 800476c:	20000d78 	.word	0x20000d78

08004770 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004770:	b480      	push	{r7}
 8004772:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004774:	4b03      	ldr	r3, [pc, #12]	@ (8004784 <vTaskMissedYield+0x14>)
 8004776:	2201      	movs	r2, #1
 8004778:	601a      	str	r2, [r3, #0]
}
 800477a:	bf00      	nop
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr
 8004784:	20000d74 	.word	0x20000d74

08004788 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004790:	f000 f852 	bl	8004838 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004794:	4b06      	ldr	r3, [pc, #24]	@ (80047b0 <prvIdleTask+0x28>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d9f9      	bls.n	8004790 <prvIdleTask+0x8>
			{
				taskYIELD();
 800479c:	4b05      	ldr	r3, [pc, #20]	@ (80047b4 <prvIdleTask+0x2c>)
 800479e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047a2:	601a      	str	r2, [r3, #0]
 80047a4:	f3bf 8f4f 	dsb	sy
 80047a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80047ac:	e7f0      	b.n	8004790 <prvIdleTask+0x8>
 80047ae:	bf00      	nop
 80047b0:	20000890 	.word	0x20000890
 80047b4:	e000ed04 	.word	0xe000ed04

080047b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80047be:	2300      	movs	r3, #0
 80047c0:	607b      	str	r3, [r7, #4]
 80047c2:	e00c      	b.n	80047de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	4613      	mov	r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	4413      	add	r3, r2
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	4a12      	ldr	r2, [pc, #72]	@ (8004818 <prvInitialiseTaskLists+0x60>)
 80047d0:	4413      	add	r3, r2
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7fe f862 	bl	800289c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	3301      	adds	r3, #1
 80047dc:	607b      	str	r3, [r7, #4]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2b37      	cmp	r3, #55	@ 0x37
 80047e2:	d9ef      	bls.n	80047c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80047e4:	480d      	ldr	r0, [pc, #52]	@ (800481c <prvInitialiseTaskLists+0x64>)
 80047e6:	f7fe f859 	bl	800289c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80047ea:	480d      	ldr	r0, [pc, #52]	@ (8004820 <prvInitialiseTaskLists+0x68>)
 80047ec:	f7fe f856 	bl	800289c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80047f0:	480c      	ldr	r0, [pc, #48]	@ (8004824 <prvInitialiseTaskLists+0x6c>)
 80047f2:	f7fe f853 	bl	800289c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80047f6:	480c      	ldr	r0, [pc, #48]	@ (8004828 <prvInitialiseTaskLists+0x70>)
 80047f8:	f7fe f850 	bl	800289c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80047fc:	480b      	ldr	r0, [pc, #44]	@ (800482c <prvInitialiseTaskLists+0x74>)
 80047fe:	f7fe f84d 	bl	800289c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004802:	4b0b      	ldr	r3, [pc, #44]	@ (8004830 <prvInitialiseTaskLists+0x78>)
 8004804:	4a05      	ldr	r2, [pc, #20]	@ (800481c <prvInitialiseTaskLists+0x64>)
 8004806:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004808:	4b0a      	ldr	r3, [pc, #40]	@ (8004834 <prvInitialiseTaskLists+0x7c>)
 800480a:	4a05      	ldr	r2, [pc, #20]	@ (8004820 <prvInitialiseTaskLists+0x68>)
 800480c:	601a      	str	r2, [r3, #0]
}
 800480e:	bf00      	nop
 8004810:	3708      	adds	r7, #8
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	20000890 	.word	0x20000890
 800481c:	20000cf0 	.word	0x20000cf0
 8004820:	20000d04 	.word	0x20000d04
 8004824:	20000d20 	.word	0x20000d20
 8004828:	20000d34 	.word	0x20000d34
 800482c:	20000d4c 	.word	0x20000d4c
 8004830:	20000d18 	.word	0x20000d18
 8004834:	20000d1c 	.word	0x20000d1c

08004838 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800483e:	e019      	b.n	8004874 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004840:	f000 feea 	bl	8005618 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004844:	4b10      	ldr	r3, [pc, #64]	@ (8004888 <prvCheckTasksWaitingTermination+0x50>)
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	3304      	adds	r3, #4
 8004850:	4618      	mov	r0, r3
 8004852:	f7fe f8ad 	bl	80029b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004856:	4b0d      	ldr	r3, [pc, #52]	@ (800488c <prvCheckTasksWaitingTermination+0x54>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	3b01      	subs	r3, #1
 800485c:	4a0b      	ldr	r2, [pc, #44]	@ (800488c <prvCheckTasksWaitingTermination+0x54>)
 800485e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004860:	4b0b      	ldr	r3, [pc, #44]	@ (8004890 <prvCheckTasksWaitingTermination+0x58>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	3b01      	subs	r3, #1
 8004866:	4a0a      	ldr	r2, [pc, #40]	@ (8004890 <prvCheckTasksWaitingTermination+0x58>)
 8004868:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800486a:	f000 ff07 	bl	800567c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 f810 	bl	8004894 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004874:	4b06      	ldr	r3, [pc, #24]	@ (8004890 <prvCheckTasksWaitingTermination+0x58>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1e1      	bne.n	8004840 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800487c:	bf00      	nop
 800487e:	bf00      	nop
 8004880:	3708      	adds	r7, #8
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	20000d34 	.word	0x20000d34
 800488c:	20000d60 	.word	0x20000d60
 8004890:	20000d48 	.word	0x20000d48

08004894 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	3354      	adds	r3, #84	@ 0x54
 80048a0:	4618      	mov	r0, r3
 80048a2:	f001 fbd9 	bl	8006058 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d108      	bne.n	80048c2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048b4:	4618      	mov	r0, r3
 80048b6:	f001 f89f 	bl	80059f8 <vPortFree>
				vPortFree( pxTCB );
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f001 f89c 	bl	80059f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80048c0:	e019      	b.n	80048f6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d103      	bne.n	80048d4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f001 f893 	bl	80059f8 <vPortFree>
	}
 80048d2:	e010      	b.n	80048f6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d00b      	beq.n	80048f6 <prvDeleteTCB+0x62>
	__asm volatile
 80048de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048e2:	f383 8811 	msr	BASEPRI, r3
 80048e6:	f3bf 8f6f 	isb	sy
 80048ea:	f3bf 8f4f 	dsb	sy
 80048ee:	60fb      	str	r3, [r7, #12]
}
 80048f0:	bf00      	nop
 80048f2:	bf00      	nop
 80048f4:	e7fd      	b.n	80048f2 <prvDeleteTCB+0x5e>
	}
 80048f6:	bf00      	nop
 80048f8:	3710      	adds	r7, #16
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
	...

08004900 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004906:	4b0c      	ldr	r3, [pc, #48]	@ (8004938 <prvResetNextTaskUnblockTime+0x38>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d104      	bne.n	800491a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004910:	4b0a      	ldr	r3, [pc, #40]	@ (800493c <prvResetNextTaskUnblockTime+0x3c>)
 8004912:	f04f 32ff 	mov.w	r2, #4294967295
 8004916:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004918:	e008      	b.n	800492c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800491a:	4b07      	ldr	r3, [pc, #28]	@ (8004938 <prvResetNextTaskUnblockTime+0x38>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	4a04      	ldr	r2, [pc, #16]	@ (800493c <prvResetNextTaskUnblockTime+0x3c>)
 800492a:	6013      	str	r3, [r2, #0]
}
 800492c:	bf00      	nop
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr
 8004938:	20000d18 	.word	0x20000d18
 800493c:	20000d80 	.word	0x20000d80

08004940 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004946:	4b0b      	ldr	r3, [pc, #44]	@ (8004974 <xTaskGetSchedulerState+0x34>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d102      	bne.n	8004954 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800494e:	2301      	movs	r3, #1
 8004950:	607b      	str	r3, [r7, #4]
 8004952:	e008      	b.n	8004966 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004954:	4b08      	ldr	r3, [pc, #32]	@ (8004978 <xTaskGetSchedulerState+0x38>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d102      	bne.n	8004962 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800495c:	2302      	movs	r3, #2
 800495e:	607b      	str	r3, [r7, #4]
 8004960:	e001      	b.n	8004966 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004962:	2300      	movs	r3, #0
 8004964:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004966:	687b      	ldr	r3, [r7, #4]
	}
 8004968:	4618      	mov	r0, r3
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr
 8004974:	20000d6c 	.word	0x20000d6c
 8004978:	20000d88 	.word	0x20000d88

0800497c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004988:	2300      	movs	r3, #0
 800498a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d051      	beq.n	8004a36 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004996:	4b2a      	ldr	r3, [pc, #168]	@ (8004a40 <xTaskPriorityInherit+0xc4>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800499c:	429a      	cmp	r2, r3
 800499e:	d241      	bcs.n	8004a24 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	db06      	blt.n	80049b6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049a8:	4b25      	ldr	r3, [pc, #148]	@ (8004a40 <xTaskPriorityInherit+0xc4>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ae:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	6959      	ldr	r1, [r3, #20]
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049be:	4613      	mov	r3, r2
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	4413      	add	r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	4a1f      	ldr	r2, [pc, #124]	@ (8004a44 <xTaskPriorityInherit+0xc8>)
 80049c8:	4413      	add	r3, r2
 80049ca:	4299      	cmp	r1, r3
 80049cc:	d122      	bne.n	8004a14 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	3304      	adds	r3, #4
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7fd ffec 	bl	80029b0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80049d8:	4b19      	ldr	r3, [pc, #100]	@ (8004a40 <xTaskPriorityInherit+0xc4>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049e6:	4b18      	ldr	r3, [pc, #96]	@ (8004a48 <xTaskPriorityInherit+0xcc>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d903      	bls.n	80049f6 <xTaskPriorityInherit+0x7a>
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f2:	4a15      	ldr	r2, [pc, #84]	@ (8004a48 <xTaskPriorityInherit+0xcc>)
 80049f4:	6013      	str	r3, [r2, #0]
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049fa:	4613      	mov	r3, r2
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	4413      	add	r3, r2
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	4a10      	ldr	r2, [pc, #64]	@ (8004a44 <xTaskPriorityInherit+0xc8>)
 8004a04:	441a      	add	r2, r3
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	3304      	adds	r3, #4
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	4610      	mov	r0, r2
 8004a0e:	f7fd ff72 	bl	80028f6 <vListInsertEnd>
 8004a12:	e004      	b.n	8004a1e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004a14:	4b0a      	ldr	r3, [pc, #40]	@ (8004a40 <xTaskPriorityInherit+0xc4>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	60fb      	str	r3, [r7, #12]
 8004a22:	e008      	b.n	8004a36 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004a28:	4b05      	ldr	r3, [pc, #20]	@ (8004a40 <xTaskPriorityInherit+0xc4>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d201      	bcs.n	8004a36 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004a32:	2301      	movs	r3, #1
 8004a34:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004a36:	68fb      	ldr	r3, [r7, #12]
	}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3710      	adds	r7, #16
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	2000088c 	.word	0x2000088c
 8004a44:	20000890 	.word	0x20000890
 8004a48:	20000d68 	.word	0x20000d68

08004a4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d058      	beq.n	8004b14 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004a62:	4b2f      	ldr	r3, [pc, #188]	@ (8004b20 <xTaskPriorityDisinherit+0xd4>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d00b      	beq.n	8004a84 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a70:	f383 8811 	msr	BASEPRI, r3
 8004a74:	f3bf 8f6f 	isb	sy
 8004a78:	f3bf 8f4f 	dsb	sy
 8004a7c:	60fb      	str	r3, [r7, #12]
}
 8004a7e:	bf00      	nop
 8004a80:	bf00      	nop
 8004a82:	e7fd      	b.n	8004a80 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d10b      	bne.n	8004aa4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a90:	f383 8811 	msr	BASEPRI, r3
 8004a94:	f3bf 8f6f 	isb	sy
 8004a98:	f3bf 8f4f 	dsb	sy
 8004a9c:	60bb      	str	r3, [r7, #8]
}
 8004a9e:	bf00      	nop
 8004aa0:	bf00      	nop
 8004aa2:	e7fd      	b.n	8004aa0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004aa8:	1e5a      	subs	r2, r3, #1
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d02c      	beq.n	8004b14 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d128      	bne.n	8004b14 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	3304      	adds	r3, #4
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7fd ff72 	bl	80029b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ae4:	4b0f      	ldr	r3, [pc, #60]	@ (8004b24 <xTaskPriorityDisinherit+0xd8>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d903      	bls.n	8004af4 <xTaskPriorityDisinherit+0xa8>
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af0:	4a0c      	ldr	r2, [pc, #48]	@ (8004b24 <xTaskPriorityDisinherit+0xd8>)
 8004af2:	6013      	str	r3, [r2, #0]
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004af8:	4613      	mov	r3, r2
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	4413      	add	r3, r2
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	4a09      	ldr	r2, [pc, #36]	@ (8004b28 <xTaskPriorityDisinherit+0xdc>)
 8004b02:	441a      	add	r2, r3
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	3304      	adds	r3, #4
 8004b08:	4619      	mov	r1, r3
 8004b0a:	4610      	mov	r0, r2
 8004b0c:	f7fd fef3 	bl	80028f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004b10:	2301      	movs	r3, #1
 8004b12:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004b14:	697b      	ldr	r3, [r7, #20]
	}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3718      	adds	r7, #24
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	2000088c 	.word	0x2000088c
 8004b24:	20000d68 	.word	0x20000d68
 8004b28:	20000890 	.word	0x20000890

08004b2c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b088      	sub	sp, #32
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d06c      	beq.n	8004c1e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d10b      	bne.n	8004b64 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8004b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b50:	f383 8811 	msr	BASEPRI, r3
 8004b54:	f3bf 8f6f 	isb	sy
 8004b58:	f3bf 8f4f 	dsb	sy
 8004b5c:	60fb      	str	r3, [r7, #12]
}
 8004b5e:	bf00      	nop
 8004b60:	bf00      	nop
 8004b62:	e7fd      	b.n	8004b60 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b68:	683a      	ldr	r2, [r7, #0]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d902      	bls.n	8004b74 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	61fb      	str	r3, [r7, #28]
 8004b72:	e002      	b.n	8004b7a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b78:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b7e:	69fa      	ldr	r2, [r7, #28]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d04c      	beq.n	8004c1e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b88:	697a      	ldr	r2, [r7, #20]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d147      	bne.n	8004c1e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004b8e:	4b26      	ldr	r3, [pc, #152]	@ (8004c28 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	69ba      	ldr	r2, [r7, #24]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d10b      	bne.n	8004bb0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8004b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b9c:	f383 8811 	msr	BASEPRI, r3
 8004ba0:	f3bf 8f6f 	isb	sy
 8004ba4:	f3bf 8f4f 	dsb	sy
 8004ba8:	60bb      	str	r3, [r7, #8]
}
 8004baa:	bf00      	nop
 8004bac:	bf00      	nop
 8004bae:	e7fd      	b.n	8004bac <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bb4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	69fa      	ldr	r2, [r7, #28]
 8004bba:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	db04      	blt.n	8004bce <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	6959      	ldr	r1, [r3, #20]
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	4413      	add	r3, r2
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	4a13      	ldr	r2, [pc, #76]	@ (8004c2c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004bde:	4413      	add	r3, r2
 8004be0:	4299      	cmp	r1, r3
 8004be2:	d11c      	bne.n	8004c1e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	3304      	adds	r3, #4
 8004be8:	4618      	mov	r0, r3
 8004bea:	f7fd fee1 	bl	80029b0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bf2:	4b0f      	ldr	r3, [pc, #60]	@ (8004c30 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d903      	bls.n	8004c02 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bfe:	4a0c      	ldr	r2, [pc, #48]	@ (8004c30 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004c00:	6013      	str	r3, [r2, #0]
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c06:	4613      	mov	r3, r2
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	4413      	add	r3, r2
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	4a07      	ldr	r2, [pc, #28]	@ (8004c2c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004c10:	441a      	add	r2, r3
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	3304      	adds	r3, #4
 8004c16:	4619      	mov	r1, r3
 8004c18:	4610      	mov	r0, r2
 8004c1a:	f7fd fe6c 	bl	80028f6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004c1e:	bf00      	nop
 8004c20:	3720      	adds	r7, #32
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	2000088c 	.word	0x2000088c
 8004c2c:	20000890 	.word	0x20000890
 8004c30:	20000d68 	.word	0x20000d68

08004c34 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004c34:	b480      	push	{r7}
 8004c36:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004c38:	4b07      	ldr	r3, [pc, #28]	@ (8004c58 <pvTaskIncrementMutexHeldCount+0x24>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d004      	beq.n	8004c4a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004c40:	4b05      	ldr	r3, [pc, #20]	@ (8004c58 <pvTaskIncrementMutexHeldCount+0x24>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004c46:	3201      	adds	r2, #1
 8004c48:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8004c4a:	4b03      	ldr	r3, [pc, #12]	@ (8004c58 <pvTaskIncrementMutexHeldCount+0x24>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
	}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr
 8004c58:	2000088c 	.word	0x2000088c

08004c5c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004c66:	4b21      	ldr	r3, [pc, #132]	@ (8004cec <prvAddCurrentTaskToDelayedList+0x90>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c6c:	4b20      	ldr	r3, [pc, #128]	@ (8004cf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	3304      	adds	r3, #4
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7fd fe9c 	bl	80029b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c7e:	d10a      	bne.n	8004c96 <prvAddCurrentTaskToDelayedList+0x3a>
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d007      	beq.n	8004c96 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c86:	4b1a      	ldr	r3, [pc, #104]	@ (8004cf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	3304      	adds	r3, #4
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	4819      	ldr	r0, [pc, #100]	@ (8004cf4 <prvAddCurrentTaskToDelayedList+0x98>)
 8004c90:	f7fd fe31 	bl	80028f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004c94:	e026      	b.n	8004ce4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004c9e:	4b14      	ldr	r3, [pc, #80]	@ (8004cf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68ba      	ldr	r2, [r7, #8]
 8004ca4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004ca6:	68ba      	ldr	r2, [r7, #8]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d209      	bcs.n	8004cc2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cae:	4b12      	ldr	r3, [pc, #72]	@ (8004cf8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	4b0f      	ldr	r3, [pc, #60]	@ (8004cf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	3304      	adds	r3, #4
 8004cb8:	4619      	mov	r1, r3
 8004cba:	4610      	mov	r0, r2
 8004cbc:	f7fd fe3f 	bl	800293e <vListInsert>
}
 8004cc0:	e010      	b.n	8004ce4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8004cfc <prvAddCurrentTaskToDelayedList+0xa0>)
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8004cf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	3304      	adds	r3, #4
 8004ccc:	4619      	mov	r1, r3
 8004cce:	4610      	mov	r0, r2
 8004cd0:	f7fd fe35 	bl	800293e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8004d00 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68ba      	ldr	r2, [r7, #8]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d202      	bcs.n	8004ce4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004cde:	4a08      	ldr	r2, [pc, #32]	@ (8004d00 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	6013      	str	r3, [r2, #0]
}
 8004ce4:	bf00      	nop
 8004ce6:	3710      	adds	r7, #16
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	20000d64 	.word	0x20000d64
 8004cf0:	2000088c 	.word	0x2000088c
 8004cf4:	20000d4c 	.word	0x20000d4c
 8004cf8:	20000d1c 	.word	0x20000d1c
 8004cfc:	20000d18 	.word	0x20000d18
 8004d00:	20000d80 	.word	0x20000d80

08004d04 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b08a      	sub	sp, #40	@ 0x28
 8004d08:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004d0e:	f000 fb13 	bl	8005338 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004d12:	4b1d      	ldr	r3, [pc, #116]	@ (8004d88 <xTimerCreateTimerTask+0x84>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d021      	beq.n	8004d5e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004d22:	1d3a      	adds	r2, r7, #4
 8004d24:	f107 0108 	add.w	r1, r7, #8
 8004d28:	f107 030c 	add.w	r3, r7, #12
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7fd fd9b 	bl	8002868 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004d32:	6879      	ldr	r1, [r7, #4]
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	9202      	str	r2, [sp, #8]
 8004d3a:	9301      	str	r3, [sp, #4]
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	9300      	str	r3, [sp, #0]
 8004d40:	2300      	movs	r3, #0
 8004d42:	460a      	mov	r2, r1
 8004d44:	4911      	ldr	r1, [pc, #68]	@ (8004d8c <xTimerCreateTimerTask+0x88>)
 8004d46:	4812      	ldr	r0, [pc, #72]	@ (8004d90 <xTimerCreateTimerTask+0x8c>)
 8004d48:	f7fe fe88 	bl	8003a5c <xTaskCreateStatic>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	4a11      	ldr	r2, [pc, #68]	@ (8004d94 <xTimerCreateTimerTask+0x90>)
 8004d50:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004d52:	4b10      	ldr	r3, [pc, #64]	@ (8004d94 <xTimerCreateTimerTask+0x90>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d10b      	bne.n	8004d7c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d68:	f383 8811 	msr	BASEPRI, r3
 8004d6c:	f3bf 8f6f 	isb	sy
 8004d70:	f3bf 8f4f 	dsb	sy
 8004d74:	613b      	str	r3, [r7, #16]
}
 8004d76:	bf00      	nop
 8004d78:	bf00      	nop
 8004d7a:	e7fd      	b.n	8004d78 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004d7c:	697b      	ldr	r3, [r7, #20]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3718      	adds	r7, #24
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	20000dbc 	.word	0x20000dbc
 8004d8c:	08006710 	.word	0x08006710
 8004d90:	08004ed1 	.word	0x08004ed1
 8004d94:	20000dc0 	.word	0x20000dc0

08004d98 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b08a      	sub	sp, #40	@ 0x28
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	607a      	str	r2, [r7, #4]
 8004da4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004da6:	2300      	movs	r3, #0
 8004da8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d10b      	bne.n	8004dc8 <xTimerGenericCommand+0x30>
	__asm volatile
 8004db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004db4:	f383 8811 	msr	BASEPRI, r3
 8004db8:	f3bf 8f6f 	isb	sy
 8004dbc:	f3bf 8f4f 	dsb	sy
 8004dc0:	623b      	str	r3, [r7, #32]
}
 8004dc2:	bf00      	nop
 8004dc4:	bf00      	nop
 8004dc6:	e7fd      	b.n	8004dc4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004dc8:	4b19      	ldr	r3, [pc, #100]	@ (8004e30 <xTimerGenericCommand+0x98>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d02a      	beq.n	8004e26 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	2b05      	cmp	r3, #5
 8004de0:	dc18      	bgt.n	8004e14 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004de2:	f7ff fdad 	bl	8004940 <xTaskGetSchedulerState>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d109      	bne.n	8004e00 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004dec:	4b10      	ldr	r3, [pc, #64]	@ (8004e30 <xTimerGenericCommand+0x98>)
 8004dee:	6818      	ldr	r0, [r3, #0]
 8004df0:	f107 0110 	add.w	r1, r7, #16
 8004df4:	2300      	movs	r3, #0
 8004df6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004df8:	f7fd ffb8 	bl	8002d6c <xQueueGenericSend>
 8004dfc:	6278      	str	r0, [r7, #36]	@ 0x24
 8004dfe:	e012      	b.n	8004e26 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004e00:	4b0b      	ldr	r3, [pc, #44]	@ (8004e30 <xTimerGenericCommand+0x98>)
 8004e02:	6818      	ldr	r0, [r3, #0]
 8004e04:	f107 0110 	add.w	r1, r7, #16
 8004e08:	2300      	movs	r3, #0
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f7fd ffae 	bl	8002d6c <xQueueGenericSend>
 8004e10:	6278      	str	r0, [r7, #36]	@ 0x24
 8004e12:	e008      	b.n	8004e26 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004e14:	4b06      	ldr	r3, [pc, #24]	@ (8004e30 <xTimerGenericCommand+0x98>)
 8004e16:	6818      	ldr	r0, [r3, #0]
 8004e18:	f107 0110 	add.w	r1, r7, #16
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	683a      	ldr	r2, [r7, #0]
 8004e20:	f7fe f8a6 	bl	8002f70 <xQueueGenericSendFromISR>
 8004e24:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3728      	adds	r7, #40	@ 0x28
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	20000dbc 	.word	0x20000dbc

08004e34 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b088      	sub	sp, #32
 8004e38:	af02      	add	r7, sp, #8
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e3e:	4b23      	ldr	r3, [pc, #140]	@ (8004ecc <prvProcessExpiredTimer+0x98>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	3304      	adds	r3, #4
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7fd fdaf 	bl	80029b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e58:	f003 0304 	and.w	r3, r3, #4
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d023      	beq.n	8004ea8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	699a      	ldr	r2, [r3, #24]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	18d1      	adds	r1, r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	683a      	ldr	r2, [r7, #0]
 8004e6c:	6978      	ldr	r0, [r7, #20]
 8004e6e:	f000 f8d5 	bl	800501c <prvInsertTimerInActiveList>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d020      	beq.n	8004eba <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e78:	2300      	movs	r3, #0
 8004e7a:	9300      	str	r3, [sp, #0]
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	2100      	movs	r1, #0
 8004e82:	6978      	ldr	r0, [r7, #20]
 8004e84:	f7ff ff88 	bl	8004d98 <xTimerGenericCommand>
 8004e88:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d114      	bne.n	8004eba <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e94:	f383 8811 	msr	BASEPRI, r3
 8004e98:	f3bf 8f6f 	isb	sy
 8004e9c:	f3bf 8f4f 	dsb	sy
 8004ea0:	60fb      	str	r3, [r7, #12]
}
 8004ea2:	bf00      	nop
 8004ea4:	bf00      	nop
 8004ea6:	e7fd      	b.n	8004ea4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004eae:	f023 0301 	bic.w	r3, r3, #1
 8004eb2:	b2da      	uxtb	r2, r3
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	6a1b      	ldr	r3, [r3, #32]
 8004ebe:	6978      	ldr	r0, [r7, #20]
 8004ec0:	4798      	blx	r3
}
 8004ec2:	bf00      	nop
 8004ec4:	3718      	adds	r7, #24
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	20000db4 	.word	0x20000db4

08004ed0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ed8:	f107 0308 	add.w	r3, r7, #8
 8004edc:	4618      	mov	r0, r3
 8004ede:	f000 f859 	bl	8004f94 <prvGetNextExpireTime>
 8004ee2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f000 f805 	bl	8004ef8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004eee:	f000 f8d7 	bl	80050a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ef2:	bf00      	nop
 8004ef4:	e7f0      	b.n	8004ed8 <prvTimerTask+0x8>
	...

08004ef8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004f02:	f7ff f917 	bl	8004134 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f06:	f107 0308 	add.w	r3, r7, #8
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f000 f866 	bl	8004fdc <prvSampleTimeNow>
 8004f10:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d130      	bne.n	8004f7a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10a      	bne.n	8004f34 <prvProcessTimerOrBlockTask+0x3c>
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d806      	bhi.n	8004f34 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004f26:	f7ff f913 	bl	8004150 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004f2a:	68f9      	ldr	r1, [r7, #12]
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f7ff ff81 	bl	8004e34 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004f32:	e024      	b.n	8004f7e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d008      	beq.n	8004f4c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004f3a:	4b13      	ldr	r3, [pc, #76]	@ (8004f88 <prvProcessTimerOrBlockTask+0x90>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d101      	bne.n	8004f48 <prvProcessTimerOrBlockTask+0x50>
 8004f44:	2301      	movs	r3, #1
 8004f46:	e000      	b.n	8004f4a <prvProcessTimerOrBlockTask+0x52>
 8004f48:	2300      	movs	r3, #0
 8004f4a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8004f8c <prvProcessTimerOrBlockTask+0x94>)
 8004f4e:	6818      	ldr	r0, [r3, #0]
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	683a      	ldr	r2, [r7, #0]
 8004f58:	4619      	mov	r1, r3
 8004f5a:	f7fe fd4b 	bl	80039f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004f5e:	f7ff f8f7 	bl	8004150 <xTaskResumeAll>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d10a      	bne.n	8004f7e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004f68:	4b09      	ldr	r3, [pc, #36]	@ (8004f90 <prvProcessTimerOrBlockTask+0x98>)
 8004f6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f6e:	601a      	str	r2, [r3, #0]
 8004f70:	f3bf 8f4f 	dsb	sy
 8004f74:	f3bf 8f6f 	isb	sy
}
 8004f78:	e001      	b.n	8004f7e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004f7a:	f7ff f8e9 	bl	8004150 <xTaskResumeAll>
}
 8004f7e:	bf00      	nop
 8004f80:	3710      	adds	r7, #16
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	20000db8 	.word	0x20000db8
 8004f8c:	20000dbc 	.word	0x20000dbc
 8004f90:	e000ed04 	.word	0xe000ed04

08004f94 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004f9c:	4b0e      	ldr	r3, [pc, #56]	@ (8004fd8 <prvGetNextExpireTime+0x44>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <prvGetNextExpireTime+0x16>
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	e000      	b.n	8004fac <prvGetNextExpireTime+0x18>
 8004faa:	2200      	movs	r2, #0
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d105      	bne.n	8004fc4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004fb8:	4b07      	ldr	r3, [pc, #28]	@ (8004fd8 <prvGetNextExpireTime+0x44>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	60fb      	str	r3, [r7, #12]
 8004fc2:	e001      	b.n	8004fc8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3714      	adds	r7, #20
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	20000db4 	.word	0x20000db4

08004fdc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004fe4:	f7ff f952 	bl	800428c <xTaskGetTickCount>
 8004fe8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004fea:	4b0b      	ldr	r3, [pc, #44]	@ (8005018 <prvSampleTimeNow+0x3c>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d205      	bcs.n	8005000 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004ff4:	f000 f93a 	bl	800526c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	601a      	str	r2, [r3, #0]
 8004ffe:	e002      	b.n	8005006 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005006:	4a04      	ldr	r2, [pc, #16]	@ (8005018 <prvSampleTimeNow+0x3c>)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800500c:	68fb      	ldr	r3, [r7, #12]
}
 800500e:	4618      	mov	r0, r3
 8005010:	3710      	adds	r7, #16
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	20000dc4 	.word	0x20000dc4

0800501c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b086      	sub	sp, #24
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
 8005028:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800502a:	2300      	movs	r3, #0
 800502c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	68ba      	ldr	r2, [r7, #8]
 8005032:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800503a:	68ba      	ldr	r2, [r7, #8]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	429a      	cmp	r2, r3
 8005040:	d812      	bhi.n	8005068 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	1ad2      	subs	r2, r2, r3
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	429a      	cmp	r2, r3
 800504e:	d302      	bcc.n	8005056 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005050:	2301      	movs	r3, #1
 8005052:	617b      	str	r3, [r7, #20]
 8005054:	e01b      	b.n	800508e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005056:	4b10      	ldr	r3, [pc, #64]	@ (8005098 <prvInsertTimerInActiveList+0x7c>)
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	3304      	adds	r3, #4
 800505e:	4619      	mov	r1, r3
 8005060:	4610      	mov	r0, r2
 8005062:	f7fd fc6c 	bl	800293e <vListInsert>
 8005066:	e012      	b.n	800508e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	429a      	cmp	r2, r3
 800506e:	d206      	bcs.n	800507e <prvInsertTimerInActiveList+0x62>
 8005070:	68ba      	ldr	r2, [r7, #8]
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	429a      	cmp	r2, r3
 8005076:	d302      	bcc.n	800507e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005078:	2301      	movs	r3, #1
 800507a:	617b      	str	r3, [r7, #20]
 800507c:	e007      	b.n	800508e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800507e:	4b07      	ldr	r3, [pc, #28]	@ (800509c <prvInsertTimerInActiveList+0x80>)
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	3304      	adds	r3, #4
 8005086:	4619      	mov	r1, r3
 8005088:	4610      	mov	r0, r2
 800508a:	f7fd fc58 	bl	800293e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800508e:	697b      	ldr	r3, [r7, #20]
}
 8005090:	4618      	mov	r0, r3
 8005092:	3718      	adds	r7, #24
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	20000db8 	.word	0x20000db8
 800509c:	20000db4 	.word	0x20000db4

080050a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b08e      	sub	sp, #56	@ 0x38
 80050a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80050a6:	e0ce      	b.n	8005246 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	da19      	bge.n	80050e2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80050ae:	1d3b      	adds	r3, r7, #4
 80050b0:	3304      	adds	r3, #4
 80050b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80050b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10b      	bne.n	80050d2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80050ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050be:	f383 8811 	msr	BASEPRI, r3
 80050c2:	f3bf 8f6f 	isb	sy
 80050c6:	f3bf 8f4f 	dsb	sy
 80050ca:	61fb      	str	r3, [r7, #28]
}
 80050cc:	bf00      	nop
 80050ce:	bf00      	nop
 80050d0:	e7fd      	b.n	80050ce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80050d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050d8:	6850      	ldr	r0, [r2, #4]
 80050da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050dc:	6892      	ldr	r2, [r2, #8]
 80050de:	4611      	mov	r1, r2
 80050e0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	f2c0 80ae 	blt.w	8005246 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80050ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d004      	beq.n	8005100 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80050f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050f8:	3304      	adds	r3, #4
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7fd fc58 	bl	80029b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005100:	463b      	mov	r3, r7
 8005102:	4618      	mov	r0, r3
 8005104:	f7ff ff6a 	bl	8004fdc <prvSampleTimeNow>
 8005108:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2b09      	cmp	r3, #9
 800510e:	f200 8097 	bhi.w	8005240 <prvProcessReceivedCommands+0x1a0>
 8005112:	a201      	add	r2, pc, #4	@ (adr r2, 8005118 <prvProcessReceivedCommands+0x78>)
 8005114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005118:	08005141 	.word	0x08005141
 800511c:	08005141 	.word	0x08005141
 8005120:	08005141 	.word	0x08005141
 8005124:	080051b7 	.word	0x080051b7
 8005128:	080051cb 	.word	0x080051cb
 800512c:	08005217 	.word	0x08005217
 8005130:	08005141 	.word	0x08005141
 8005134:	08005141 	.word	0x08005141
 8005138:	080051b7 	.word	0x080051b7
 800513c:	080051cb 	.word	0x080051cb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005142:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005146:	f043 0301 	orr.w	r3, r3, #1
 800514a:	b2da      	uxtb	r2, r3
 800514c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800514e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005152:	68ba      	ldr	r2, [r7, #8]
 8005154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005156:	699b      	ldr	r3, [r3, #24]
 8005158:	18d1      	adds	r1, r2, r3
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800515e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005160:	f7ff ff5c 	bl	800501c <prvInsertTimerInActiveList>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d06c      	beq.n	8005244 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800516a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800516c:	6a1b      	ldr	r3, [r3, #32]
 800516e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005170:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005174:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005178:	f003 0304 	and.w	r3, r3, #4
 800517c:	2b00      	cmp	r3, #0
 800517e:	d061      	beq.n	8005244 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005180:	68ba      	ldr	r2, [r7, #8]
 8005182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	441a      	add	r2, r3
 8005188:	2300      	movs	r3, #0
 800518a:	9300      	str	r3, [sp, #0]
 800518c:	2300      	movs	r3, #0
 800518e:	2100      	movs	r1, #0
 8005190:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005192:	f7ff fe01 	bl	8004d98 <xTimerGenericCommand>
 8005196:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005198:	6a3b      	ldr	r3, [r7, #32]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d152      	bne.n	8005244 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800519e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051a2:	f383 8811 	msr	BASEPRI, r3
 80051a6:	f3bf 8f6f 	isb	sy
 80051aa:	f3bf 8f4f 	dsb	sy
 80051ae:	61bb      	str	r3, [r7, #24]
}
 80051b0:	bf00      	nop
 80051b2:	bf00      	nop
 80051b4:	e7fd      	b.n	80051b2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80051b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80051bc:	f023 0301 	bic.w	r3, r3, #1
 80051c0:	b2da      	uxtb	r2, r3
 80051c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051c4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80051c8:	e03d      	b.n	8005246 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80051ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80051d0:	f043 0301 	orr.w	r3, r3, #1
 80051d4:	b2da      	uxtb	r2, r3
 80051d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051d8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80051dc:	68ba      	ldr	r2, [r7, #8]
 80051de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051e0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80051e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10b      	bne.n	8005202 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80051ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ee:	f383 8811 	msr	BASEPRI, r3
 80051f2:	f3bf 8f6f 	isb	sy
 80051f6:	f3bf 8f4f 	dsb	sy
 80051fa:	617b      	str	r3, [r7, #20]
}
 80051fc:	bf00      	nop
 80051fe:	bf00      	nop
 8005200:	e7fd      	b.n	80051fe <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005204:	699a      	ldr	r2, [r3, #24]
 8005206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005208:	18d1      	adds	r1, r2, r3
 800520a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800520e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005210:	f7ff ff04 	bl	800501c <prvInsertTimerInActiveList>
					break;
 8005214:	e017      	b.n	8005246 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005218:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800521c:	f003 0302 	and.w	r3, r3, #2
 8005220:	2b00      	cmp	r3, #0
 8005222:	d103      	bne.n	800522c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005224:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005226:	f000 fbe7 	bl	80059f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800522a:	e00c      	b.n	8005246 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800522c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800522e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005232:	f023 0301 	bic.w	r3, r3, #1
 8005236:	b2da      	uxtb	r2, r3
 8005238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800523a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800523e:	e002      	b.n	8005246 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005240:	bf00      	nop
 8005242:	e000      	b.n	8005246 <prvProcessReceivedCommands+0x1a6>
					break;
 8005244:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005246:	4b08      	ldr	r3, [pc, #32]	@ (8005268 <prvProcessReceivedCommands+0x1c8>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	1d39      	adds	r1, r7, #4
 800524c:	2200      	movs	r2, #0
 800524e:	4618      	mov	r0, r3
 8005250:	f7fd ffbc 	bl	80031cc <xQueueReceive>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	f47f af26 	bne.w	80050a8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800525c:	bf00      	nop
 800525e:	bf00      	nop
 8005260:	3730      	adds	r7, #48	@ 0x30
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	20000dbc 	.word	0x20000dbc

0800526c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b088      	sub	sp, #32
 8005270:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005272:	e049      	b.n	8005308 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005274:	4b2e      	ldr	r3, [pc, #184]	@ (8005330 <prvSwitchTimerLists+0xc4>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800527e:	4b2c      	ldr	r3, [pc, #176]	@ (8005330 <prvSwitchTimerLists+0xc4>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	3304      	adds	r3, #4
 800528c:	4618      	mov	r0, r3
 800528e:	f7fd fb8f 	bl	80029b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	68f8      	ldr	r0, [r7, #12]
 8005298:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80052a0:	f003 0304 	and.w	r3, r3, #4
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d02f      	beq.n	8005308 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	699b      	ldr	r3, [r3, #24]
 80052ac:	693a      	ldr	r2, [r7, #16]
 80052ae:	4413      	add	r3, r2
 80052b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80052b2:	68ba      	ldr	r2, [r7, #8]
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d90e      	bls.n	80052d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	68ba      	ldr	r2, [r7, #8]
 80052be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80052c6:	4b1a      	ldr	r3, [pc, #104]	@ (8005330 <prvSwitchTimerLists+0xc4>)
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	3304      	adds	r3, #4
 80052ce:	4619      	mov	r1, r3
 80052d0:	4610      	mov	r0, r2
 80052d2:	f7fd fb34 	bl	800293e <vListInsert>
 80052d6:	e017      	b.n	8005308 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80052d8:	2300      	movs	r3, #0
 80052da:	9300      	str	r3, [sp, #0]
 80052dc:	2300      	movs	r3, #0
 80052de:	693a      	ldr	r2, [r7, #16]
 80052e0:	2100      	movs	r1, #0
 80052e2:	68f8      	ldr	r0, [r7, #12]
 80052e4:	f7ff fd58 	bl	8004d98 <xTimerGenericCommand>
 80052e8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10b      	bne.n	8005308 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80052f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052f4:	f383 8811 	msr	BASEPRI, r3
 80052f8:	f3bf 8f6f 	isb	sy
 80052fc:	f3bf 8f4f 	dsb	sy
 8005300:	603b      	str	r3, [r7, #0]
}
 8005302:	bf00      	nop
 8005304:	bf00      	nop
 8005306:	e7fd      	b.n	8005304 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005308:	4b09      	ldr	r3, [pc, #36]	@ (8005330 <prvSwitchTimerLists+0xc4>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1b0      	bne.n	8005274 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005312:	4b07      	ldr	r3, [pc, #28]	@ (8005330 <prvSwitchTimerLists+0xc4>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005318:	4b06      	ldr	r3, [pc, #24]	@ (8005334 <prvSwitchTimerLists+0xc8>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a04      	ldr	r2, [pc, #16]	@ (8005330 <prvSwitchTimerLists+0xc4>)
 800531e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005320:	4a04      	ldr	r2, [pc, #16]	@ (8005334 <prvSwitchTimerLists+0xc8>)
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	6013      	str	r3, [r2, #0]
}
 8005326:	bf00      	nop
 8005328:	3718      	adds	r7, #24
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	20000db4 	.word	0x20000db4
 8005334:	20000db8 	.word	0x20000db8

08005338 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800533e:	f000 f96b 	bl	8005618 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005342:	4b15      	ldr	r3, [pc, #84]	@ (8005398 <prvCheckForValidListAndQueue+0x60>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d120      	bne.n	800538c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800534a:	4814      	ldr	r0, [pc, #80]	@ (800539c <prvCheckForValidListAndQueue+0x64>)
 800534c:	f7fd faa6 	bl	800289c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005350:	4813      	ldr	r0, [pc, #76]	@ (80053a0 <prvCheckForValidListAndQueue+0x68>)
 8005352:	f7fd faa3 	bl	800289c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005356:	4b13      	ldr	r3, [pc, #76]	@ (80053a4 <prvCheckForValidListAndQueue+0x6c>)
 8005358:	4a10      	ldr	r2, [pc, #64]	@ (800539c <prvCheckForValidListAndQueue+0x64>)
 800535a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800535c:	4b12      	ldr	r3, [pc, #72]	@ (80053a8 <prvCheckForValidListAndQueue+0x70>)
 800535e:	4a10      	ldr	r2, [pc, #64]	@ (80053a0 <prvCheckForValidListAndQueue+0x68>)
 8005360:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005362:	2300      	movs	r3, #0
 8005364:	9300      	str	r3, [sp, #0]
 8005366:	4b11      	ldr	r3, [pc, #68]	@ (80053ac <prvCheckForValidListAndQueue+0x74>)
 8005368:	4a11      	ldr	r2, [pc, #68]	@ (80053b0 <prvCheckForValidListAndQueue+0x78>)
 800536a:	2110      	movs	r1, #16
 800536c:	200a      	movs	r0, #10
 800536e:	f7fd fbb3 	bl	8002ad8 <xQueueGenericCreateStatic>
 8005372:	4603      	mov	r3, r0
 8005374:	4a08      	ldr	r2, [pc, #32]	@ (8005398 <prvCheckForValidListAndQueue+0x60>)
 8005376:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005378:	4b07      	ldr	r3, [pc, #28]	@ (8005398 <prvCheckForValidListAndQueue+0x60>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d005      	beq.n	800538c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005380:	4b05      	ldr	r3, [pc, #20]	@ (8005398 <prvCheckForValidListAndQueue+0x60>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	490b      	ldr	r1, [pc, #44]	@ (80053b4 <prvCheckForValidListAndQueue+0x7c>)
 8005386:	4618      	mov	r0, r3
 8005388:	f7fe fae0 	bl	800394c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800538c:	f000 f976 	bl	800567c <vPortExitCritical>
}
 8005390:	bf00      	nop
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	20000dbc 	.word	0x20000dbc
 800539c:	20000d8c 	.word	0x20000d8c
 80053a0:	20000da0 	.word	0x20000da0
 80053a4:	20000db4 	.word	0x20000db4
 80053a8:	20000db8 	.word	0x20000db8
 80053ac:	20000e68 	.word	0x20000e68
 80053b0:	20000dc8 	.word	0x20000dc8
 80053b4:	08006718 	.word	0x08006718

080053b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80053b8:	b480      	push	{r7}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	3b04      	subs	r3, #4
 80053c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80053d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	3b04      	subs	r3, #4
 80053d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	f023 0201 	bic.w	r2, r3, #1
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	3b04      	subs	r3, #4
 80053e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80053e8:	4a0c      	ldr	r2, [pc, #48]	@ (800541c <pxPortInitialiseStack+0x64>)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	3b14      	subs	r3, #20
 80053f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	3b04      	subs	r3, #4
 80053fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f06f 0202 	mvn.w	r2, #2
 8005406:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	3b20      	subs	r3, #32
 800540c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800540e:	68fb      	ldr	r3, [r7, #12]
}
 8005410:	4618      	mov	r0, r3
 8005412:	3714      	adds	r7, #20
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr
 800541c:	08005421 	.word	0x08005421

08005420 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005426:	2300      	movs	r3, #0
 8005428:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800542a:	4b13      	ldr	r3, [pc, #76]	@ (8005478 <prvTaskExitError+0x58>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005432:	d00b      	beq.n	800544c <prvTaskExitError+0x2c>
	__asm volatile
 8005434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005438:	f383 8811 	msr	BASEPRI, r3
 800543c:	f3bf 8f6f 	isb	sy
 8005440:	f3bf 8f4f 	dsb	sy
 8005444:	60fb      	str	r3, [r7, #12]
}
 8005446:	bf00      	nop
 8005448:	bf00      	nop
 800544a:	e7fd      	b.n	8005448 <prvTaskExitError+0x28>
	__asm volatile
 800544c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005450:	f383 8811 	msr	BASEPRI, r3
 8005454:	f3bf 8f6f 	isb	sy
 8005458:	f3bf 8f4f 	dsb	sy
 800545c:	60bb      	str	r3, [r7, #8]
}
 800545e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005460:	bf00      	nop
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d0fc      	beq.n	8005462 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005468:	bf00      	nop
 800546a:	bf00      	nop
 800546c:	3714      	adds	r7, #20
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	2000000c 	.word	0x2000000c
 800547c:	00000000 	.word	0x00000000

08005480 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005480:	4b07      	ldr	r3, [pc, #28]	@ (80054a0 <pxCurrentTCBConst2>)
 8005482:	6819      	ldr	r1, [r3, #0]
 8005484:	6808      	ldr	r0, [r1, #0]
 8005486:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800548a:	f380 8809 	msr	PSP, r0
 800548e:	f3bf 8f6f 	isb	sy
 8005492:	f04f 0000 	mov.w	r0, #0
 8005496:	f380 8811 	msr	BASEPRI, r0
 800549a:	4770      	bx	lr
 800549c:	f3af 8000 	nop.w

080054a0 <pxCurrentTCBConst2>:
 80054a0:	2000088c 	.word	0x2000088c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80054a4:	bf00      	nop
 80054a6:	bf00      	nop

080054a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80054a8:	4808      	ldr	r0, [pc, #32]	@ (80054cc <prvPortStartFirstTask+0x24>)
 80054aa:	6800      	ldr	r0, [r0, #0]
 80054ac:	6800      	ldr	r0, [r0, #0]
 80054ae:	f380 8808 	msr	MSP, r0
 80054b2:	f04f 0000 	mov.w	r0, #0
 80054b6:	f380 8814 	msr	CONTROL, r0
 80054ba:	b662      	cpsie	i
 80054bc:	b661      	cpsie	f
 80054be:	f3bf 8f4f 	dsb	sy
 80054c2:	f3bf 8f6f 	isb	sy
 80054c6:	df00      	svc	0
 80054c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80054ca:	bf00      	nop
 80054cc:	e000ed08 	.word	0xe000ed08

080054d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b086      	sub	sp, #24
 80054d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80054d6:	4b47      	ldr	r3, [pc, #284]	@ (80055f4 <xPortStartScheduler+0x124>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a47      	ldr	r2, [pc, #284]	@ (80055f8 <xPortStartScheduler+0x128>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d10b      	bne.n	80054f8 <xPortStartScheduler+0x28>
	__asm volatile
 80054e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054e4:	f383 8811 	msr	BASEPRI, r3
 80054e8:	f3bf 8f6f 	isb	sy
 80054ec:	f3bf 8f4f 	dsb	sy
 80054f0:	613b      	str	r3, [r7, #16]
}
 80054f2:	bf00      	nop
 80054f4:	bf00      	nop
 80054f6:	e7fd      	b.n	80054f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80054f8:	4b3e      	ldr	r3, [pc, #248]	@ (80055f4 <xPortStartScheduler+0x124>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a3f      	ldr	r2, [pc, #252]	@ (80055fc <xPortStartScheduler+0x12c>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d10b      	bne.n	800551a <xPortStartScheduler+0x4a>
	__asm volatile
 8005502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005506:	f383 8811 	msr	BASEPRI, r3
 800550a:	f3bf 8f6f 	isb	sy
 800550e:	f3bf 8f4f 	dsb	sy
 8005512:	60fb      	str	r3, [r7, #12]
}
 8005514:	bf00      	nop
 8005516:	bf00      	nop
 8005518:	e7fd      	b.n	8005516 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800551a:	4b39      	ldr	r3, [pc, #228]	@ (8005600 <xPortStartScheduler+0x130>)
 800551c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	b2db      	uxtb	r3, r3
 8005524:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	22ff      	movs	r2, #255	@ 0xff
 800552a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	b2db      	uxtb	r3, r3
 8005532:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005534:	78fb      	ldrb	r3, [r7, #3]
 8005536:	b2db      	uxtb	r3, r3
 8005538:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800553c:	b2da      	uxtb	r2, r3
 800553e:	4b31      	ldr	r3, [pc, #196]	@ (8005604 <xPortStartScheduler+0x134>)
 8005540:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005542:	4b31      	ldr	r3, [pc, #196]	@ (8005608 <xPortStartScheduler+0x138>)
 8005544:	2207      	movs	r2, #7
 8005546:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005548:	e009      	b.n	800555e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800554a:	4b2f      	ldr	r3, [pc, #188]	@ (8005608 <xPortStartScheduler+0x138>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	3b01      	subs	r3, #1
 8005550:	4a2d      	ldr	r2, [pc, #180]	@ (8005608 <xPortStartScheduler+0x138>)
 8005552:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005554:	78fb      	ldrb	r3, [r7, #3]
 8005556:	b2db      	uxtb	r3, r3
 8005558:	005b      	lsls	r3, r3, #1
 800555a:	b2db      	uxtb	r3, r3
 800555c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800555e:	78fb      	ldrb	r3, [r7, #3]
 8005560:	b2db      	uxtb	r3, r3
 8005562:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005566:	2b80      	cmp	r3, #128	@ 0x80
 8005568:	d0ef      	beq.n	800554a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800556a:	4b27      	ldr	r3, [pc, #156]	@ (8005608 <xPortStartScheduler+0x138>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f1c3 0307 	rsb	r3, r3, #7
 8005572:	2b04      	cmp	r3, #4
 8005574:	d00b      	beq.n	800558e <xPortStartScheduler+0xbe>
	__asm volatile
 8005576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800557a:	f383 8811 	msr	BASEPRI, r3
 800557e:	f3bf 8f6f 	isb	sy
 8005582:	f3bf 8f4f 	dsb	sy
 8005586:	60bb      	str	r3, [r7, #8]
}
 8005588:	bf00      	nop
 800558a:	bf00      	nop
 800558c:	e7fd      	b.n	800558a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800558e:	4b1e      	ldr	r3, [pc, #120]	@ (8005608 <xPortStartScheduler+0x138>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	021b      	lsls	r3, r3, #8
 8005594:	4a1c      	ldr	r2, [pc, #112]	@ (8005608 <xPortStartScheduler+0x138>)
 8005596:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005598:	4b1b      	ldr	r3, [pc, #108]	@ (8005608 <xPortStartScheduler+0x138>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80055a0:	4a19      	ldr	r2, [pc, #100]	@ (8005608 <xPortStartScheduler+0x138>)
 80055a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	b2da      	uxtb	r2, r3
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80055ac:	4b17      	ldr	r3, [pc, #92]	@ (800560c <xPortStartScheduler+0x13c>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a16      	ldr	r2, [pc, #88]	@ (800560c <xPortStartScheduler+0x13c>)
 80055b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80055b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80055b8:	4b14      	ldr	r3, [pc, #80]	@ (800560c <xPortStartScheduler+0x13c>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a13      	ldr	r2, [pc, #76]	@ (800560c <xPortStartScheduler+0x13c>)
 80055be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80055c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80055c4:	f000 f8da 	bl	800577c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80055c8:	4b11      	ldr	r3, [pc, #68]	@ (8005610 <xPortStartScheduler+0x140>)
 80055ca:	2200      	movs	r2, #0
 80055cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80055ce:	f000 f8f9 	bl	80057c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80055d2:	4b10      	ldr	r3, [pc, #64]	@ (8005614 <xPortStartScheduler+0x144>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a0f      	ldr	r2, [pc, #60]	@ (8005614 <xPortStartScheduler+0x144>)
 80055d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80055dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80055de:	f7ff ff63 	bl	80054a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80055e2:	f7fe ff2f 	bl	8004444 <vTaskSwitchContext>
	prvTaskExitError();
 80055e6:	f7ff ff1b 	bl	8005420 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3718      	adds	r7, #24
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	e000ed00 	.word	0xe000ed00
 80055f8:	410fc271 	.word	0x410fc271
 80055fc:	410fc270 	.word	0x410fc270
 8005600:	e000e400 	.word	0xe000e400
 8005604:	20000eb8 	.word	0x20000eb8
 8005608:	20000ebc 	.word	0x20000ebc
 800560c:	e000ed20 	.word	0xe000ed20
 8005610:	2000000c 	.word	0x2000000c
 8005614:	e000ef34 	.word	0xe000ef34

08005618 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
	__asm volatile
 800561e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005622:	f383 8811 	msr	BASEPRI, r3
 8005626:	f3bf 8f6f 	isb	sy
 800562a:	f3bf 8f4f 	dsb	sy
 800562e:	607b      	str	r3, [r7, #4]
}
 8005630:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005632:	4b10      	ldr	r3, [pc, #64]	@ (8005674 <vPortEnterCritical+0x5c>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	3301      	adds	r3, #1
 8005638:	4a0e      	ldr	r2, [pc, #56]	@ (8005674 <vPortEnterCritical+0x5c>)
 800563a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800563c:	4b0d      	ldr	r3, [pc, #52]	@ (8005674 <vPortEnterCritical+0x5c>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2b01      	cmp	r3, #1
 8005642:	d110      	bne.n	8005666 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005644:	4b0c      	ldr	r3, [pc, #48]	@ (8005678 <vPortEnterCritical+0x60>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	b2db      	uxtb	r3, r3
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00b      	beq.n	8005666 <vPortEnterCritical+0x4e>
	__asm volatile
 800564e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005652:	f383 8811 	msr	BASEPRI, r3
 8005656:	f3bf 8f6f 	isb	sy
 800565a:	f3bf 8f4f 	dsb	sy
 800565e:	603b      	str	r3, [r7, #0]
}
 8005660:	bf00      	nop
 8005662:	bf00      	nop
 8005664:	e7fd      	b.n	8005662 <vPortEnterCritical+0x4a>
	}
}
 8005666:	bf00      	nop
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	2000000c 	.word	0x2000000c
 8005678:	e000ed04 	.word	0xe000ed04

0800567c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005682:	4b12      	ldr	r3, [pc, #72]	@ (80056cc <vPortExitCritical+0x50>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d10b      	bne.n	80056a2 <vPortExitCritical+0x26>
	__asm volatile
 800568a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800568e:	f383 8811 	msr	BASEPRI, r3
 8005692:	f3bf 8f6f 	isb	sy
 8005696:	f3bf 8f4f 	dsb	sy
 800569a:	607b      	str	r3, [r7, #4]
}
 800569c:	bf00      	nop
 800569e:	bf00      	nop
 80056a0:	e7fd      	b.n	800569e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80056a2:	4b0a      	ldr	r3, [pc, #40]	@ (80056cc <vPortExitCritical+0x50>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	3b01      	subs	r3, #1
 80056a8:	4a08      	ldr	r2, [pc, #32]	@ (80056cc <vPortExitCritical+0x50>)
 80056aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80056ac:	4b07      	ldr	r3, [pc, #28]	@ (80056cc <vPortExitCritical+0x50>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d105      	bne.n	80056c0 <vPortExitCritical+0x44>
 80056b4:	2300      	movs	r3, #0
 80056b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	f383 8811 	msr	BASEPRI, r3
}
 80056be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80056c0:	bf00      	nop
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr
 80056cc:	2000000c 	.word	0x2000000c

080056d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80056d0:	f3ef 8009 	mrs	r0, PSP
 80056d4:	f3bf 8f6f 	isb	sy
 80056d8:	4b15      	ldr	r3, [pc, #84]	@ (8005730 <pxCurrentTCBConst>)
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	f01e 0f10 	tst.w	lr, #16
 80056e0:	bf08      	it	eq
 80056e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80056e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056ea:	6010      	str	r0, [r2, #0]
 80056ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80056f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80056f4:	f380 8811 	msr	BASEPRI, r0
 80056f8:	f3bf 8f4f 	dsb	sy
 80056fc:	f3bf 8f6f 	isb	sy
 8005700:	f7fe fea0 	bl	8004444 <vTaskSwitchContext>
 8005704:	f04f 0000 	mov.w	r0, #0
 8005708:	f380 8811 	msr	BASEPRI, r0
 800570c:	bc09      	pop	{r0, r3}
 800570e:	6819      	ldr	r1, [r3, #0]
 8005710:	6808      	ldr	r0, [r1, #0]
 8005712:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005716:	f01e 0f10 	tst.w	lr, #16
 800571a:	bf08      	it	eq
 800571c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005720:	f380 8809 	msr	PSP, r0
 8005724:	f3bf 8f6f 	isb	sy
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	f3af 8000 	nop.w

08005730 <pxCurrentTCBConst>:
 8005730:	2000088c 	.word	0x2000088c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005734:	bf00      	nop
 8005736:	bf00      	nop

08005738 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
	__asm volatile
 800573e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005742:	f383 8811 	msr	BASEPRI, r3
 8005746:	f3bf 8f6f 	isb	sy
 800574a:	f3bf 8f4f 	dsb	sy
 800574e:	607b      	str	r3, [r7, #4]
}
 8005750:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005752:	f7fe fdbd 	bl	80042d0 <xTaskIncrementTick>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d003      	beq.n	8005764 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800575c:	4b06      	ldr	r3, [pc, #24]	@ (8005778 <xPortSysTickHandler+0x40>)
 800575e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005762:	601a      	str	r2, [r3, #0]
 8005764:	2300      	movs	r3, #0
 8005766:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	f383 8811 	msr	BASEPRI, r3
}
 800576e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005770:	bf00      	nop
 8005772:	3708      	adds	r7, #8
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	e000ed04 	.word	0xe000ed04

0800577c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800577c:	b480      	push	{r7}
 800577e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005780:	4b0b      	ldr	r3, [pc, #44]	@ (80057b0 <vPortSetupTimerInterrupt+0x34>)
 8005782:	2200      	movs	r2, #0
 8005784:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005786:	4b0b      	ldr	r3, [pc, #44]	@ (80057b4 <vPortSetupTimerInterrupt+0x38>)
 8005788:	2200      	movs	r2, #0
 800578a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800578c:	4b0a      	ldr	r3, [pc, #40]	@ (80057b8 <vPortSetupTimerInterrupt+0x3c>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a0a      	ldr	r2, [pc, #40]	@ (80057bc <vPortSetupTimerInterrupt+0x40>)
 8005792:	fba2 2303 	umull	r2, r3, r2, r3
 8005796:	099b      	lsrs	r3, r3, #6
 8005798:	4a09      	ldr	r2, [pc, #36]	@ (80057c0 <vPortSetupTimerInterrupt+0x44>)
 800579a:	3b01      	subs	r3, #1
 800579c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800579e:	4b04      	ldr	r3, [pc, #16]	@ (80057b0 <vPortSetupTimerInterrupt+0x34>)
 80057a0:	2207      	movs	r2, #7
 80057a2:	601a      	str	r2, [r3, #0]
}
 80057a4:	bf00      	nop
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	e000e010 	.word	0xe000e010
 80057b4:	e000e018 	.word	0xe000e018
 80057b8:	20000000 	.word	0x20000000
 80057bc:	10624dd3 	.word	0x10624dd3
 80057c0:	e000e014 	.word	0xe000e014

080057c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80057c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80057d4 <vPortEnableVFP+0x10>
 80057c8:	6801      	ldr	r1, [r0, #0]
 80057ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80057ce:	6001      	str	r1, [r0, #0]
 80057d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80057d2:	bf00      	nop
 80057d4:	e000ed88 	.word	0xe000ed88

080057d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80057de:	f3ef 8305 	mrs	r3, IPSR
 80057e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2b0f      	cmp	r3, #15
 80057e8:	d915      	bls.n	8005816 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80057ea:	4a18      	ldr	r2, [pc, #96]	@ (800584c <vPortValidateInterruptPriority+0x74>)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	4413      	add	r3, r2
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80057f4:	4b16      	ldr	r3, [pc, #88]	@ (8005850 <vPortValidateInterruptPriority+0x78>)
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	7afa      	ldrb	r2, [r7, #11]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d20b      	bcs.n	8005816 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80057fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005802:	f383 8811 	msr	BASEPRI, r3
 8005806:	f3bf 8f6f 	isb	sy
 800580a:	f3bf 8f4f 	dsb	sy
 800580e:	607b      	str	r3, [r7, #4]
}
 8005810:	bf00      	nop
 8005812:	bf00      	nop
 8005814:	e7fd      	b.n	8005812 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005816:	4b0f      	ldr	r3, [pc, #60]	@ (8005854 <vPortValidateInterruptPriority+0x7c>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800581e:	4b0e      	ldr	r3, [pc, #56]	@ (8005858 <vPortValidateInterruptPriority+0x80>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	429a      	cmp	r2, r3
 8005824:	d90b      	bls.n	800583e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800582a:	f383 8811 	msr	BASEPRI, r3
 800582e:	f3bf 8f6f 	isb	sy
 8005832:	f3bf 8f4f 	dsb	sy
 8005836:	603b      	str	r3, [r7, #0]
}
 8005838:	bf00      	nop
 800583a:	bf00      	nop
 800583c:	e7fd      	b.n	800583a <vPortValidateInterruptPriority+0x62>
	}
 800583e:	bf00      	nop
 8005840:	3714      	adds	r7, #20
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	e000e3f0 	.word	0xe000e3f0
 8005850:	20000eb8 	.word	0x20000eb8
 8005854:	e000ed0c 	.word	0xe000ed0c
 8005858:	20000ebc 	.word	0x20000ebc

0800585c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b08a      	sub	sp, #40	@ 0x28
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005864:	2300      	movs	r3, #0
 8005866:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005868:	f7fe fc64 	bl	8004134 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800586c:	4b5c      	ldr	r3, [pc, #368]	@ (80059e0 <pvPortMalloc+0x184>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d101      	bne.n	8005878 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005874:	f000 f924 	bl	8005ac0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005878:	4b5a      	ldr	r3, [pc, #360]	@ (80059e4 <pvPortMalloc+0x188>)
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4013      	ands	r3, r2
 8005880:	2b00      	cmp	r3, #0
 8005882:	f040 8095 	bne.w	80059b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d01e      	beq.n	80058ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800588c:	2208      	movs	r2, #8
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4413      	add	r3, r2
 8005892:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f003 0307 	and.w	r3, r3, #7
 800589a:	2b00      	cmp	r3, #0
 800589c:	d015      	beq.n	80058ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f023 0307 	bic.w	r3, r3, #7
 80058a4:	3308      	adds	r3, #8
 80058a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f003 0307 	and.w	r3, r3, #7
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00b      	beq.n	80058ca <pvPortMalloc+0x6e>
	__asm volatile
 80058b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058b6:	f383 8811 	msr	BASEPRI, r3
 80058ba:	f3bf 8f6f 	isb	sy
 80058be:	f3bf 8f4f 	dsb	sy
 80058c2:	617b      	str	r3, [r7, #20]
}
 80058c4:	bf00      	nop
 80058c6:	bf00      	nop
 80058c8:	e7fd      	b.n	80058c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d06f      	beq.n	80059b0 <pvPortMalloc+0x154>
 80058d0:	4b45      	ldr	r3, [pc, #276]	@ (80059e8 <pvPortMalloc+0x18c>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d86a      	bhi.n	80059b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80058da:	4b44      	ldr	r3, [pc, #272]	@ (80059ec <pvPortMalloc+0x190>)
 80058dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80058de:	4b43      	ldr	r3, [pc, #268]	@ (80059ec <pvPortMalloc+0x190>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80058e4:	e004      	b.n	80058f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80058e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80058ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80058f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d903      	bls.n	8005902 <pvPortMalloc+0xa6>
 80058fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d1f1      	bne.n	80058e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005902:	4b37      	ldr	r3, [pc, #220]	@ (80059e0 <pvPortMalloc+0x184>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005908:	429a      	cmp	r2, r3
 800590a:	d051      	beq.n	80059b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800590c:	6a3b      	ldr	r3, [r7, #32]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2208      	movs	r2, #8
 8005912:	4413      	add	r3, r2
 8005914:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800591e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005920:	685a      	ldr	r2, [r3, #4]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	1ad2      	subs	r2, r2, r3
 8005926:	2308      	movs	r3, #8
 8005928:	005b      	lsls	r3, r3, #1
 800592a:	429a      	cmp	r2, r3
 800592c:	d920      	bls.n	8005970 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800592e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4413      	add	r3, r2
 8005934:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	f003 0307 	and.w	r3, r3, #7
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00b      	beq.n	8005958 <pvPortMalloc+0xfc>
	__asm volatile
 8005940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005944:	f383 8811 	msr	BASEPRI, r3
 8005948:	f3bf 8f6f 	isb	sy
 800594c:	f3bf 8f4f 	dsb	sy
 8005950:	613b      	str	r3, [r7, #16]
}
 8005952:	bf00      	nop
 8005954:	bf00      	nop
 8005956:	e7fd      	b.n	8005954 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800595a:	685a      	ldr	r2, [r3, #4]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	1ad2      	subs	r2, r2, r3
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800596a:	69b8      	ldr	r0, [r7, #24]
 800596c:	f000 f90a 	bl	8005b84 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005970:	4b1d      	ldr	r3, [pc, #116]	@ (80059e8 <pvPortMalloc+0x18c>)
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	4a1b      	ldr	r2, [pc, #108]	@ (80059e8 <pvPortMalloc+0x18c>)
 800597c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800597e:	4b1a      	ldr	r3, [pc, #104]	@ (80059e8 <pvPortMalloc+0x18c>)
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	4b1b      	ldr	r3, [pc, #108]	@ (80059f0 <pvPortMalloc+0x194>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	429a      	cmp	r2, r3
 8005988:	d203      	bcs.n	8005992 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800598a:	4b17      	ldr	r3, [pc, #92]	@ (80059e8 <pvPortMalloc+0x18c>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a18      	ldr	r2, [pc, #96]	@ (80059f0 <pvPortMalloc+0x194>)
 8005990:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005994:	685a      	ldr	r2, [r3, #4]
 8005996:	4b13      	ldr	r3, [pc, #76]	@ (80059e4 <pvPortMalloc+0x188>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	431a      	orrs	r2, r3
 800599c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800599e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80059a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a2:	2200      	movs	r2, #0
 80059a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80059a6:	4b13      	ldr	r3, [pc, #76]	@ (80059f4 <pvPortMalloc+0x198>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	3301      	adds	r3, #1
 80059ac:	4a11      	ldr	r2, [pc, #68]	@ (80059f4 <pvPortMalloc+0x198>)
 80059ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80059b0:	f7fe fbce 	bl	8004150 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	f003 0307 	and.w	r3, r3, #7
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00b      	beq.n	80059d6 <pvPortMalloc+0x17a>
	__asm volatile
 80059be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059c2:	f383 8811 	msr	BASEPRI, r3
 80059c6:	f3bf 8f6f 	isb	sy
 80059ca:	f3bf 8f4f 	dsb	sy
 80059ce:	60fb      	str	r3, [r7, #12]
}
 80059d0:	bf00      	nop
 80059d2:	bf00      	nop
 80059d4:	e7fd      	b.n	80059d2 <pvPortMalloc+0x176>
	return pvReturn;
 80059d6:	69fb      	ldr	r3, [r7, #28]
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3728      	adds	r7, #40	@ 0x28
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	20004ac8 	.word	0x20004ac8
 80059e4:	20004adc 	.word	0x20004adc
 80059e8:	20004acc 	.word	0x20004acc
 80059ec:	20004ac0 	.word	0x20004ac0
 80059f0:	20004ad0 	.word	0x20004ad0
 80059f4:	20004ad4 	.word	0x20004ad4

080059f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b086      	sub	sp, #24
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d04f      	beq.n	8005aaa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005a0a:	2308      	movs	r3, #8
 8005a0c:	425b      	negs	r3, r3
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	4413      	add	r3, r2
 8005a12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	685a      	ldr	r2, [r3, #4]
 8005a1c:	4b25      	ldr	r3, [pc, #148]	@ (8005ab4 <vPortFree+0xbc>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4013      	ands	r3, r2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d10b      	bne.n	8005a3e <vPortFree+0x46>
	__asm volatile
 8005a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a2a:	f383 8811 	msr	BASEPRI, r3
 8005a2e:	f3bf 8f6f 	isb	sy
 8005a32:	f3bf 8f4f 	dsb	sy
 8005a36:	60fb      	str	r3, [r7, #12]
}
 8005a38:	bf00      	nop
 8005a3a:	bf00      	nop
 8005a3c:	e7fd      	b.n	8005a3a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00b      	beq.n	8005a5e <vPortFree+0x66>
	__asm volatile
 8005a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a4a:	f383 8811 	msr	BASEPRI, r3
 8005a4e:	f3bf 8f6f 	isb	sy
 8005a52:	f3bf 8f4f 	dsb	sy
 8005a56:	60bb      	str	r3, [r7, #8]
}
 8005a58:	bf00      	nop
 8005a5a:	bf00      	nop
 8005a5c:	e7fd      	b.n	8005a5a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	685a      	ldr	r2, [r3, #4]
 8005a62:	4b14      	ldr	r3, [pc, #80]	@ (8005ab4 <vPortFree+0xbc>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4013      	ands	r3, r2
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d01e      	beq.n	8005aaa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d11a      	bne.n	8005aaa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	685a      	ldr	r2, [r3, #4]
 8005a78:	4b0e      	ldr	r3, [pc, #56]	@ (8005ab4 <vPortFree+0xbc>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	43db      	mvns	r3, r3
 8005a7e:	401a      	ands	r2, r3
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005a84:	f7fe fb56 	bl	8004134 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	685a      	ldr	r2, [r3, #4]
 8005a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8005ab8 <vPortFree+0xc0>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4413      	add	r3, r2
 8005a92:	4a09      	ldr	r2, [pc, #36]	@ (8005ab8 <vPortFree+0xc0>)
 8005a94:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005a96:	6938      	ldr	r0, [r7, #16]
 8005a98:	f000 f874 	bl	8005b84 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005a9c:	4b07      	ldr	r3, [pc, #28]	@ (8005abc <vPortFree+0xc4>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	4a06      	ldr	r2, [pc, #24]	@ (8005abc <vPortFree+0xc4>)
 8005aa4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005aa6:	f7fe fb53 	bl	8004150 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005aaa:	bf00      	nop
 8005aac:	3718      	adds	r7, #24
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	20004adc 	.word	0x20004adc
 8005ab8:	20004acc 	.word	0x20004acc
 8005abc:	20004ad8 	.word	0x20004ad8

08005ac0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b085      	sub	sp, #20
 8005ac4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005ac6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005aca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005acc:	4b27      	ldr	r3, [pc, #156]	@ (8005b6c <prvHeapInit+0xac>)
 8005ace:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f003 0307 	and.w	r3, r3, #7
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00c      	beq.n	8005af4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	3307      	adds	r3, #7
 8005ade:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f023 0307 	bic.w	r3, r3, #7
 8005ae6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005ae8:	68ba      	ldr	r2, [r7, #8]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	4a1f      	ldr	r2, [pc, #124]	@ (8005b6c <prvHeapInit+0xac>)
 8005af0:	4413      	add	r3, r2
 8005af2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005af8:	4a1d      	ldr	r2, [pc, #116]	@ (8005b70 <prvHeapInit+0xb0>)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005afe:	4b1c      	ldr	r3, [pc, #112]	@ (8005b70 <prvHeapInit+0xb0>)
 8005b00:	2200      	movs	r2, #0
 8005b02:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	68ba      	ldr	r2, [r7, #8]
 8005b08:	4413      	add	r3, r2
 8005b0a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005b0c:	2208      	movs	r2, #8
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	1a9b      	subs	r3, r3, r2
 8005b12:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f023 0307 	bic.w	r3, r3, #7
 8005b1a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	4a15      	ldr	r2, [pc, #84]	@ (8005b74 <prvHeapInit+0xb4>)
 8005b20:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005b22:	4b14      	ldr	r3, [pc, #80]	@ (8005b74 <prvHeapInit+0xb4>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2200      	movs	r2, #0
 8005b28:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005b2a:	4b12      	ldr	r3, [pc, #72]	@ (8005b74 <prvHeapInit+0xb4>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	1ad2      	subs	r2, r2, r3
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005b40:	4b0c      	ldr	r3, [pc, #48]	@ (8005b74 <prvHeapInit+0xb4>)
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	4a0a      	ldr	r2, [pc, #40]	@ (8005b78 <prvHeapInit+0xb8>)
 8005b4e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	4a09      	ldr	r2, [pc, #36]	@ (8005b7c <prvHeapInit+0xbc>)
 8005b56:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005b58:	4b09      	ldr	r3, [pc, #36]	@ (8005b80 <prvHeapInit+0xc0>)
 8005b5a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005b5e:	601a      	str	r2, [r3, #0]
}
 8005b60:	bf00      	nop
 8005b62:	3714      	adds	r7, #20
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr
 8005b6c:	20000ec0 	.word	0x20000ec0
 8005b70:	20004ac0 	.word	0x20004ac0
 8005b74:	20004ac8 	.word	0x20004ac8
 8005b78:	20004ad0 	.word	0x20004ad0
 8005b7c:	20004acc 	.word	0x20004acc
 8005b80:	20004adc 	.word	0x20004adc

08005b84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005b84:	b480      	push	{r7}
 8005b86:	b085      	sub	sp, #20
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005b8c:	4b28      	ldr	r3, [pc, #160]	@ (8005c30 <prvInsertBlockIntoFreeList+0xac>)
 8005b8e:	60fb      	str	r3, [r7, #12]
 8005b90:	e002      	b.n	8005b98 <prvInsertBlockIntoFreeList+0x14>
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	60fb      	str	r3, [r7, #12]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d8f7      	bhi.n	8005b92 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	68ba      	ldr	r2, [r7, #8]
 8005bac:	4413      	add	r3, r2
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d108      	bne.n	8005bc6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	685a      	ldr	r2, [r3, #4]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	441a      	add	r2, r3
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	68ba      	ldr	r2, [r7, #8]
 8005bd0:	441a      	add	r2, r3
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d118      	bne.n	8005c0c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	4b15      	ldr	r3, [pc, #84]	@ (8005c34 <prvInsertBlockIntoFreeList+0xb0>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d00d      	beq.n	8005c02 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	685a      	ldr	r2, [r3, #4]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	441a      	add	r2, r3
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	601a      	str	r2, [r3, #0]
 8005c00:	e008      	b.n	8005c14 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005c02:	4b0c      	ldr	r3, [pc, #48]	@ (8005c34 <prvInsertBlockIntoFreeList+0xb0>)
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	601a      	str	r2, [r3, #0]
 8005c0a:	e003      	b.n	8005c14 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d002      	beq.n	8005c22 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c22:	bf00      	nop
 8005c24:	3714      	adds	r7, #20
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr
 8005c2e:	bf00      	nop
 8005c30:	20004ac0 	.word	0x20004ac0
 8005c34:	20004ac8 	.word	0x20004ac8

08005c38 <std>:
 8005c38:	2300      	movs	r3, #0
 8005c3a:	b510      	push	{r4, lr}
 8005c3c:	4604      	mov	r4, r0
 8005c3e:	e9c0 3300 	strd	r3, r3, [r0]
 8005c42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c46:	6083      	str	r3, [r0, #8]
 8005c48:	8181      	strh	r1, [r0, #12]
 8005c4a:	6643      	str	r3, [r0, #100]	@ 0x64
 8005c4c:	81c2      	strh	r2, [r0, #14]
 8005c4e:	6183      	str	r3, [r0, #24]
 8005c50:	4619      	mov	r1, r3
 8005c52:	2208      	movs	r2, #8
 8005c54:	305c      	adds	r0, #92	@ 0x5c
 8005c56:	f000 f9e7 	bl	8006028 <memset>
 8005c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8005c90 <std+0x58>)
 8005c5c:	6263      	str	r3, [r4, #36]	@ 0x24
 8005c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8005c94 <std+0x5c>)
 8005c60:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005c62:	4b0d      	ldr	r3, [pc, #52]	@ (8005c98 <std+0x60>)
 8005c64:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005c66:	4b0d      	ldr	r3, [pc, #52]	@ (8005c9c <std+0x64>)
 8005c68:	6323      	str	r3, [r4, #48]	@ 0x30
 8005c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ca0 <std+0x68>)
 8005c6c:	6224      	str	r4, [r4, #32]
 8005c6e:	429c      	cmp	r4, r3
 8005c70:	d006      	beq.n	8005c80 <std+0x48>
 8005c72:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005c76:	4294      	cmp	r4, r2
 8005c78:	d002      	beq.n	8005c80 <std+0x48>
 8005c7a:	33d0      	adds	r3, #208	@ 0xd0
 8005c7c:	429c      	cmp	r4, r3
 8005c7e:	d105      	bne.n	8005c8c <std+0x54>
 8005c80:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c88:	f000 ba9c 	b.w	80061c4 <__retarget_lock_init_recursive>
 8005c8c:	bd10      	pop	{r4, pc}
 8005c8e:	bf00      	nop
 8005c90:	08005e79 	.word	0x08005e79
 8005c94:	08005e9b 	.word	0x08005e9b
 8005c98:	08005ed3 	.word	0x08005ed3
 8005c9c:	08005ef7 	.word	0x08005ef7
 8005ca0:	20004ae0 	.word	0x20004ae0

08005ca4 <stdio_exit_handler>:
 8005ca4:	4a02      	ldr	r2, [pc, #8]	@ (8005cb0 <stdio_exit_handler+0xc>)
 8005ca6:	4903      	ldr	r1, [pc, #12]	@ (8005cb4 <stdio_exit_handler+0x10>)
 8005ca8:	4803      	ldr	r0, [pc, #12]	@ (8005cb8 <stdio_exit_handler+0x14>)
 8005caa:	f000 b869 	b.w	8005d80 <_fwalk_sglue>
 8005cae:	bf00      	nop
 8005cb0:	20000010 	.word	0x20000010
 8005cb4:	080064e1 	.word	0x080064e1
 8005cb8:	20000020 	.word	0x20000020

08005cbc <cleanup_stdio>:
 8005cbc:	6841      	ldr	r1, [r0, #4]
 8005cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8005cf0 <cleanup_stdio+0x34>)
 8005cc0:	4299      	cmp	r1, r3
 8005cc2:	b510      	push	{r4, lr}
 8005cc4:	4604      	mov	r4, r0
 8005cc6:	d001      	beq.n	8005ccc <cleanup_stdio+0x10>
 8005cc8:	f000 fc0a 	bl	80064e0 <_fflush_r>
 8005ccc:	68a1      	ldr	r1, [r4, #8]
 8005cce:	4b09      	ldr	r3, [pc, #36]	@ (8005cf4 <cleanup_stdio+0x38>)
 8005cd0:	4299      	cmp	r1, r3
 8005cd2:	d002      	beq.n	8005cda <cleanup_stdio+0x1e>
 8005cd4:	4620      	mov	r0, r4
 8005cd6:	f000 fc03 	bl	80064e0 <_fflush_r>
 8005cda:	68e1      	ldr	r1, [r4, #12]
 8005cdc:	4b06      	ldr	r3, [pc, #24]	@ (8005cf8 <cleanup_stdio+0x3c>)
 8005cde:	4299      	cmp	r1, r3
 8005ce0:	d004      	beq.n	8005cec <cleanup_stdio+0x30>
 8005ce2:	4620      	mov	r0, r4
 8005ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ce8:	f000 bbfa 	b.w	80064e0 <_fflush_r>
 8005cec:	bd10      	pop	{r4, pc}
 8005cee:	bf00      	nop
 8005cf0:	20004ae0 	.word	0x20004ae0
 8005cf4:	20004b48 	.word	0x20004b48
 8005cf8:	20004bb0 	.word	0x20004bb0

08005cfc <global_stdio_init.part.0>:
 8005cfc:	b510      	push	{r4, lr}
 8005cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8005d2c <global_stdio_init.part.0+0x30>)
 8005d00:	4c0b      	ldr	r4, [pc, #44]	@ (8005d30 <global_stdio_init.part.0+0x34>)
 8005d02:	4a0c      	ldr	r2, [pc, #48]	@ (8005d34 <global_stdio_init.part.0+0x38>)
 8005d04:	601a      	str	r2, [r3, #0]
 8005d06:	4620      	mov	r0, r4
 8005d08:	2200      	movs	r2, #0
 8005d0a:	2104      	movs	r1, #4
 8005d0c:	f7ff ff94 	bl	8005c38 <std>
 8005d10:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005d14:	2201      	movs	r2, #1
 8005d16:	2109      	movs	r1, #9
 8005d18:	f7ff ff8e 	bl	8005c38 <std>
 8005d1c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005d20:	2202      	movs	r2, #2
 8005d22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d26:	2112      	movs	r1, #18
 8005d28:	f7ff bf86 	b.w	8005c38 <std>
 8005d2c:	20004c18 	.word	0x20004c18
 8005d30:	20004ae0 	.word	0x20004ae0
 8005d34:	08005ca5 	.word	0x08005ca5

08005d38 <__sfp_lock_acquire>:
 8005d38:	4801      	ldr	r0, [pc, #4]	@ (8005d40 <__sfp_lock_acquire+0x8>)
 8005d3a:	f000 ba44 	b.w	80061c6 <__retarget_lock_acquire_recursive>
 8005d3e:	bf00      	nop
 8005d40:	20004c21 	.word	0x20004c21

08005d44 <__sfp_lock_release>:
 8005d44:	4801      	ldr	r0, [pc, #4]	@ (8005d4c <__sfp_lock_release+0x8>)
 8005d46:	f000 ba3f 	b.w	80061c8 <__retarget_lock_release_recursive>
 8005d4a:	bf00      	nop
 8005d4c:	20004c21 	.word	0x20004c21

08005d50 <__sinit>:
 8005d50:	b510      	push	{r4, lr}
 8005d52:	4604      	mov	r4, r0
 8005d54:	f7ff fff0 	bl	8005d38 <__sfp_lock_acquire>
 8005d58:	6a23      	ldr	r3, [r4, #32]
 8005d5a:	b11b      	cbz	r3, 8005d64 <__sinit+0x14>
 8005d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d60:	f7ff bff0 	b.w	8005d44 <__sfp_lock_release>
 8005d64:	4b04      	ldr	r3, [pc, #16]	@ (8005d78 <__sinit+0x28>)
 8005d66:	6223      	str	r3, [r4, #32]
 8005d68:	4b04      	ldr	r3, [pc, #16]	@ (8005d7c <__sinit+0x2c>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d1f5      	bne.n	8005d5c <__sinit+0xc>
 8005d70:	f7ff ffc4 	bl	8005cfc <global_stdio_init.part.0>
 8005d74:	e7f2      	b.n	8005d5c <__sinit+0xc>
 8005d76:	bf00      	nop
 8005d78:	08005cbd 	.word	0x08005cbd
 8005d7c:	20004c18 	.word	0x20004c18

08005d80 <_fwalk_sglue>:
 8005d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d84:	4607      	mov	r7, r0
 8005d86:	4688      	mov	r8, r1
 8005d88:	4614      	mov	r4, r2
 8005d8a:	2600      	movs	r6, #0
 8005d8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d90:	f1b9 0901 	subs.w	r9, r9, #1
 8005d94:	d505      	bpl.n	8005da2 <_fwalk_sglue+0x22>
 8005d96:	6824      	ldr	r4, [r4, #0]
 8005d98:	2c00      	cmp	r4, #0
 8005d9a:	d1f7      	bne.n	8005d8c <_fwalk_sglue+0xc>
 8005d9c:	4630      	mov	r0, r6
 8005d9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005da2:	89ab      	ldrh	r3, [r5, #12]
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d907      	bls.n	8005db8 <_fwalk_sglue+0x38>
 8005da8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005dac:	3301      	adds	r3, #1
 8005dae:	d003      	beq.n	8005db8 <_fwalk_sglue+0x38>
 8005db0:	4629      	mov	r1, r5
 8005db2:	4638      	mov	r0, r7
 8005db4:	47c0      	blx	r8
 8005db6:	4306      	orrs	r6, r0
 8005db8:	3568      	adds	r5, #104	@ 0x68
 8005dba:	e7e9      	b.n	8005d90 <_fwalk_sglue+0x10>

08005dbc <_puts_r>:
 8005dbc:	6a03      	ldr	r3, [r0, #32]
 8005dbe:	b570      	push	{r4, r5, r6, lr}
 8005dc0:	6884      	ldr	r4, [r0, #8]
 8005dc2:	4605      	mov	r5, r0
 8005dc4:	460e      	mov	r6, r1
 8005dc6:	b90b      	cbnz	r3, 8005dcc <_puts_r+0x10>
 8005dc8:	f7ff ffc2 	bl	8005d50 <__sinit>
 8005dcc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005dce:	07db      	lsls	r3, r3, #31
 8005dd0:	d405      	bmi.n	8005dde <_puts_r+0x22>
 8005dd2:	89a3      	ldrh	r3, [r4, #12]
 8005dd4:	0598      	lsls	r0, r3, #22
 8005dd6:	d402      	bmi.n	8005dde <_puts_r+0x22>
 8005dd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005dda:	f000 f9f4 	bl	80061c6 <__retarget_lock_acquire_recursive>
 8005dde:	89a3      	ldrh	r3, [r4, #12]
 8005de0:	0719      	lsls	r1, r3, #28
 8005de2:	d502      	bpl.n	8005dea <_puts_r+0x2e>
 8005de4:	6923      	ldr	r3, [r4, #16]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d135      	bne.n	8005e56 <_puts_r+0x9a>
 8005dea:	4621      	mov	r1, r4
 8005dec:	4628      	mov	r0, r5
 8005dee:	f000 f8c5 	bl	8005f7c <__swsetup_r>
 8005df2:	b380      	cbz	r0, 8005e56 <_puts_r+0x9a>
 8005df4:	f04f 35ff 	mov.w	r5, #4294967295
 8005df8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005dfa:	07da      	lsls	r2, r3, #31
 8005dfc:	d405      	bmi.n	8005e0a <_puts_r+0x4e>
 8005dfe:	89a3      	ldrh	r3, [r4, #12]
 8005e00:	059b      	lsls	r3, r3, #22
 8005e02:	d402      	bmi.n	8005e0a <_puts_r+0x4e>
 8005e04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e06:	f000 f9df 	bl	80061c8 <__retarget_lock_release_recursive>
 8005e0a:	4628      	mov	r0, r5
 8005e0c:	bd70      	pop	{r4, r5, r6, pc}
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	da04      	bge.n	8005e1c <_puts_r+0x60>
 8005e12:	69a2      	ldr	r2, [r4, #24]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	dc17      	bgt.n	8005e48 <_puts_r+0x8c>
 8005e18:	290a      	cmp	r1, #10
 8005e1a:	d015      	beq.n	8005e48 <_puts_r+0x8c>
 8005e1c:	6823      	ldr	r3, [r4, #0]
 8005e1e:	1c5a      	adds	r2, r3, #1
 8005e20:	6022      	str	r2, [r4, #0]
 8005e22:	7019      	strb	r1, [r3, #0]
 8005e24:	68a3      	ldr	r3, [r4, #8]
 8005e26:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	60a3      	str	r3, [r4, #8]
 8005e2e:	2900      	cmp	r1, #0
 8005e30:	d1ed      	bne.n	8005e0e <_puts_r+0x52>
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	da11      	bge.n	8005e5a <_puts_r+0x9e>
 8005e36:	4622      	mov	r2, r4
 8005e38:	210a      	movs	r1, #10
 8005e3a:	4628      	mov	r0, r5
 8005e3c:	f000 f85f 	bl	8005efe <__swbuf_r>
 8005e40:	3001      	adds	r0, #1
 8005e42:	d0d7      	beq.n	8005df4 <_puts_r+0x38>
 8005e44:	250a      	movs	r5, #10
 8005e46:	e7d7      	b.n	8005df8 <_puts_r+0x3c>
 8005e48:	4622      	mov	r2, r4
 8005e4a:	4628      	mov	r0, r5
 8005e4c:	f000 f857 	bl	8005efe <__swbuf_r>
 8005e50:	3001      	adds	r0, #1
 8005e52:	d1e7      	bne.n	8005e24 <_puts_r+0x68>
 8005e54:	e7ce      	b.n	8005df4 <_puts_r+0x38>
 8005e56:	3e01      	subs	r6, #1
 8005e58:	e7e4      	b.n	8005e24 <_puts_r+0x68>
 8005e5a:	6823      	ldr	r3, [r4, #0]
 8005e5c:	1c5a      	adds	r2, r3, #1
 8005e5e:	6022      	str	r2, [r4, #0]
 8005e60:	220a      	movs	r2, #10
 8005e62:	701a      	strb	r2, [r3, #0]
 8005e64:	e7ee      	b.n	8005e44 <_puts_r+0x88>
	...

08005e68 <puts>:
 8005e68:	4b02      	ldr	r3, [pc, #8]	@ (8005e74 <puts+0xc>)
 8005e6a:	4601      	mov	r1, r0
 8005e6c:	6818      	ldr	r0, [r3, #0]
 8005e6e:	f7ff bfa5 	b.w	8005dbc <_puts_r>
 8005e72:	bf00      	nop
 8005e74:	2000001c 	.word	0x2000001c

08005e78 <__sread>:
 8005e78:	b510      	push	{r4, lr}
 8005e7a:	460c      	mov	r4, r1
 8005e7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e80:	f000 f952 	bl	8006128 <_read_r>
 8005e84:	2800      	cmp	r0, #0
 8005e86:	bfab      	itete	ge
 8005e88:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005e8a:	89a3      	ldrhlt	r3, [r4, #12]
 8005e8c:	181b      	addge	r3, r3, r0
 8005e8e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005e92:	bfac      	ite	ge
 8005e94:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005e96:	81a3      	strhlt	r3, [r4, #12]
 8005e98:	bd10      	pop	{r4, pc}

08005e9a <__swrite>:
 8005e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e9e:	461f      	mov	r7, r3
 8005ea0:	898b      	ldrh	r3, [r1, #12]
 8005ea2:	05db      	lsls	r3, r3, #23
 8005ea4:	4605      	mov	r5, r0
 8005ea6:	460c      	mov	r4, r1
 8005ea8:	4616      	mov	r6, r2
 8005eaa:	d505      	bpl.n	8005eb8 <__swrite+0x1e>
 8005eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005eb0:	2302      	movs	r3, #2
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f000 f926 	bl	8006104 <_lseek_r>
 8005eb8:	89a3      	ldrh	r3, [r4, #12]
 8005eba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ebe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ec2:	81a3      	strh	r3, [r4, #12]
 8005ec4:	4632      	mov	r2, r6
 8005ec6:	463b      	mov	r3, r7
 8005ec8:	4628      	mov	r0, r5
 8005eca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ece:	f000 b93d 	b.w	800614c <_write_r>

08005ed2 <__sseek>:
 8005ed2:	b510      	push	{r4, lr}
 8005ed4:	460c      	mov	r4, r1
 8005ed6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005eda:	f000 f913 	bl	8006104 <_lseek_r>
 8005ede:	1c43      	adds	r3, r0, #1
 8005ee0:	89a3      	ldrh	r3, [r4, #12]
 8005ee2:	bf15      	itete	ne
 8005ee4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005ee6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005eea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005eee:	81a3      	strheq	r3, [r4, #12]
 8005ef0:	bf18      	it	ne
 8005ef2:	81a3      	strhne	r3, [r4, #12]
 8005ef4:	bd10      	pop	{r4, pc}

08005ef6 <__sclose>:
 8005ef6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005efa:	f000 b89d 	b.w	8006038 <_close_r>

08005efe <__swbuf_r>:
 8005efe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f00:	460e      	mov	r6, r1
 8005f02:	4614      	mov	r4, r2
 8005f04:	4605      	mov	r5, r0
 8005f06:	b118      	cbz	r0, 8005f10 <__swbuf_r+0x12>
 8005f08:	6a03      	ldr	r3, [r0, #32]
 8005f0a:	b90b      	cbnz	r3, 8005f10 <__swbuf_r+0x12>
 8005f0c:	f7ff ff20 	bl	8005d50 <__sinit>
 8005f10:	69a3      	ldr	r3, [r4, #24]
 8005f12:	60a3      	str	r3, [r4, #8]
 8005f14:	89a3      	ldrh	r3, [r4, #12]
 8005f16:	071a      	lsls	r2, r3, #28
 8005f18:	d501      	bpl.n	8005f1e <__swbuf_r+0x20>
 8005f1a:	6923      	ldr	r3, [r4, #16]
 8005f1c:	b943      	cbnz	r3, 8005f30 <__swbuf_r+0x32>
 8005f1e:	4621      	mov	r1, r4
 8005f20:	4628      	mov	r0, r5
 8005f22:	f000 f82b 	bl	8005f7c <__swsetup_r>
 8005f26:	b118      	cbz	r0, 8005f30 <__swbuf_r+0x32>
 8005f28:	f04f 37ff 	mov.w	r7, #4294967295
 8005f2c:	4638      	mov	r0, r7
 8005f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f30:	6823      	ldr	r3, [r4, #0]
 8005f32:	6922      	ldr	r2, [r4, #16]
 8005f34:	1a98      	subs	r0, r3, r2
 8005f36:	6963      	ldr	r3, [r4, #20]
 8005f38:	b2f6      	uxtb	r6, r6
 8005f3a:	4283      	cmp	r3, r0
 8005f3c:	4637      	mov	r7, r6
 8005f3e:	dc05      	bgt.n	8005f4c <__swbuf_r+0x4e>
 8005f40:	4621      	mov	r1, r4
 8005f42:	4628      	mov	r0, r5
 8005f44:	f000 facc 	bl	80064e0 <_fflush_r>
 8005f48:	2800      	cmp	r0, #0
 8005f4a:	d1ed      	bne.n	8005f28 <__swbuf_r+0x2a>
 8005f4c:	68a3      	ldr	r3, [r4, #8]
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	60a3      	str	r3, [r4, #8]
 8005f52:	6823      	ldr	r3, [r4, #0]
 8005f54:	1c5a      	adds	r2, r3, #1
 8005f56:	6022      	str	r2, [r4, #0]
 8005f58:	701e      	strb	r6, [r3, #0]
 8005f5a:	6962      	ldr	r2, [r4, #20]
 8005f5c:	1c43      	adds	r3, r0, #1
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d004      	beq.n	8005f6c <__swbuf_r+0x6e>
 8005f62:	89a3      	ldrh	r3, [r4, #12]
 8005f64:	07db      	lsls	r3, r3, #31
 8005f66:	d5e1      	bpl.n	8005f2c <__swbuf_r+0x2e>
 8005f68:	2e0a      	cmp	r6, #10
 8005f6a:	d1df      	bne.n	8005f2c <__swbuf_r+0x2e>
 8005f6c:	4621      	mov	r1, r4
 8005f6e:	4628      	mov	r0, r5
 8005f70:	f000 fab6 	bl	80064e0 <_fflush_r>
 8005f74:	2800      	cmp	r0, #0
 8005f76:	d0d9      	beq.n	8005f2c <__swbuf_r+0x2e>
 8005f78:	e7d6      	b.n	8005f28 <__swbuf_r+0x2a>
	...

08005f7c <__swsetup_r>:
 8005f7c:	b538      	push	{r3, r4, r5, lr}
 8005f7e:	4b29      	ldr	r3, [pc, #164]	@ (8006024 <__swsetup_r+0xa8>)
 8005f80:	4605      	mov	r5, r0
 8005f82:	6818      	ldr	r0, [r3, #0]
 8005f84:	460c      	mov	r4, r1
 8005f86:	b118      	cbz	r0, 8005f90 <__swsetup_r+0x14>
 8005f88:	6a03      	ldr	r3, [r0, #32]
 8005f8a:	b90b      	cbnz	r3, 8005f90 <__swsetup_r+0x14>
 8005f8c:	f7ff fee0 	bl	8005d50 <__sinit>
 8005f90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f94:	0719      	lsls	r1, r3, #28
 8005f96:	d422      	bmi.n	8005fde <__swsetup_r+0x62>
 8005f98:	06da      	lsls	r2, r3, #27
 8005f9a:	d407      	bmi.n	8005fac <__swsetup_r+0x30>
 8005f9c:	2209      	movs	r2, #9
 8005f9e:	602a      	str	r2, [r5, #0]
 8005fa0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005fa4:	81a3      	strh	r3, [r4, #12]
 8005fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8005faa:	e033      	b.n	8006014 <__swsetup_r+0x98>
 8005fac:	0758      	lsls	r0, r3, #29
 8005fae:	d512      	bpl.n	8005fd6 <__swsetup_r+0x5a>
 8005fb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005fb2:	b141      	cbz	r1, 8005fc6 <__swsetup_r+0x4a>
 8005fb4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005fb8:	4299      	cmp	r1, r3
 8005fba:	d002      	beq.n	8005fc2 <__swsetup_r+0x46>
 8005fbc:	4628      	mov	r0, r5
 8005fbe:	f000 f913 	bl	80061e8 <_free_r>
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	6363      	str	r3, [r4, #52]	@ 0x34
 8005fc6:	89a3      	ldrh	r3, [r4, #12]
 8005fc8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005fcc:	81a3      	strh	r3, [r4, #12]
 8005fce:	2300      	movs	r3, #0
 8005fd0:	6063      	str	r3, [r4, #4]
 8005fd2:	6923      	ldr	r3, [r4, #16]
 8005fd4:	6023      	str	r3, [r4, #0]
 8005fd6:	89a3      	ldrh	r3, [r4, #12]
 8005fd8:	f043 0308 	orr.w	r3, r3, #8
 8005fdc:	81a3      	strh	r3, [r4, #12]
 8005fde:	6923      	ldr	r3, [r4, #16]
 8005fe0:	b94b      	cbnz	r3, 8005ff6 <__swsetup_r+0x7a>
 8005fe2:	89a3      	ldrh	r3, [r4, #12]
 8005fe4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005fe8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fec:	d003      	beq.n	8005ff6 <__swsetup_r+0x7a>
 8005fee:	4621      	mov	r1, r4
 8005ff0:	4628      	mov	r0, r5
 8005ff2:	f000 fac3 	bl	800657c <__smakebuf_r>
 8005ff6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ffa:	f013 0201 	ands.w	r2, r3, #1
 8005ffe:	d00a      	beq.n	8006016 <__swsetup_r+0x9a>
 8006000:	2200      	movs	r2, #0
 8006002:	60a2      	str	r2, [r4, #8]
 8006004:	6962      	ldr	r2, [r4, #20]
 8006006:	4252      	negs	r2, r2
 8006008:	61a2      	str	r2, [r4, #24]
 800600a:	6922      	ldr	r2, [r4, #16]
 800600c:	b942      	cbnz	r2, 8006020 <__swsetup_r+0xa4>
 800600e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006012:	d1c5      	bne.n	8005fa0 <__swsetup_r+0x24>
 8006014:	bd38      	pop	{r3, r4, r5, pc}
 8006016:	0799      	lsls	r1, r3, #30
 8006018:	bf58      	it	pl
 800601a:	6962      	ldrpl	r2, [r4, #20]
 800601c:	60a2      	str	r2, [r4, #8]
 800601e:	e7f4      	b.n	800600a <__swsetup_r+0x8e>
 8006020:	2000      	movs	r0, #0
 8006022:	e7f7      	b.n	8006014 <__swsetup_r+0x98>
 8006024:	2000001c 	.word	0x2000001c

08006028 <memset>:
 8006028:	4402      	add	r2, r0
 800602a:	4603      	mov	r3, r0
 800602c:	4293      	cmp	r3, r2
 800602e:	d100      	bne.n	8006032 <memset+0xa>
 8006030:	4770      	bx	lr
 8006032:	f803 1b01 	strb.w	r1, [r3], #1
 8006036:	e7f9      	b.n	800602c <memset+0x4>

08006038 <_close_r>:
 8006038:	b538      	push	{r3, r4, r5, lr}
 800603a:	4d06      	ldr	r5, [pc, #24]	@ (8006054 <_close_r+0x1c>)
 800603c:	2300      	movs	r3, #0
 800603e:	4604      	mov	r4, r0
 8006040:	4608      	mov	r0, r1
 8006042:	602b      	str	r3, [r5, #0]
 8006044:	f7fa fe65 	bl	8000d12 <_close>
 8006048:	1c43      	adds	r3, r0, #1
 800604a:	d102      	bne.n	8006052 <_close_r+0x1a>
 800604c:	682b      	ldr	r3, [r5, #0]
 800604e:	b103      	cbz	r3, 8006052 <_close_r+0x1a>
 8006050:	6023      	str	r3, [r4, #0]
 8006052:	bd38      	pop	{r3, r4, r5, pc}
 8006054:	20004c1c 	.word	0x20004c1c

08006058 <_reclaim_reent>:
 8006058:	4b29      	ldr	r3, [pc, #164]	@ (8006100 <_reclaim_reent+0xa8>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4283      	cmp	r3, r0
 800605e:	b570      	push	{r4, r5, r6, lr}
 8006060:	4604      	mov	r4, r0
 8006062:	d04b      	beq.n	80060fc <_reclaim_reent+0xa4>
 8006064:	69c3      	ldr	r3, [r0, #28]
 8006066:	b1ab      	cbz	r3, 8006094 <_reclaim_reent+0x3c>
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	b16b      	cbz	r3, 8006088 <_reclaim_reent+0x30>
 800606c:	2500      	movs	r5, #0
 800606e:	69e3      	ldr	r3, [r4, #28]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	5959      	ldr	r1, [r3, r5]
 8006074:	2900      	cmp	r1, #0
 8006076:	d13b      	bne.n	80060f0 <_reclaim_reent+0x98>
 8006078:	3504      	adds	r5, #4
 800607a:	2d80      	cmp	r5, #128	@ 0x80
 800607c:	d1f7      	bne.n	800606e <_reclaim_reent+0x16>
 800607e:	69e3      	ldr	r3, [r4, #28]
 8006080:	4620      	mov	r0, r4
 8006082:	68d9      	ldr	r1, [r3, #12]
 8006084:	f000 f8b0 	bl	80061e8 <_free_r>
 8006088:	69e3      	ldr	r3, [r4, #28]
 800608a:	6819      	ldr	r1, [r3, #0]
 800608c:	b111      	cbz	r1, 8006094 <_reclaim_reent+0x3c>
 800608e:	4620      	mov	r0, r4
 8006090:	f000 f8aa 	bl	80061e8 <_free_r>
 8006094:	6961      	ldr	r1, [r4, #20]
 8006096:	b111      	cbz	r1, 800609e <_reclaim_reent+0x46>
 8006098:	4620      	mov	r0, r4
 800609a:	f000 f8a5 	bl	80061e8 <_free_r>
 800609e:	69e1      	ldr	r1, [r4, #28]
 80060a0:	b111      	cbz	r1, 80060a8 <_reclaim_reent+0x50>
 80060a2:	4620      	mov	r0, r4
 80060a4:	f000 f8a0 	bl	80061e8 <_free_r>
 80060a8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80060aa:	b111      	cbz	r1, 80060b2 <_reclaim_reent+0x5a>
 80060ac:	4620      	mov	r0, r4
 80060ae:	f000 f89b 	bl	80061e8 <_free_r>
 80060b2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80060b4:	b111      	cbz	r1, 80060bc <_reclaim_reent+0x64>
 80060b6:	4620      	mov	r0, r4
 80060b8:	f000 f896 	bl	80061e8 <_free_r>
 80060bc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80060be:	b111      	cbz	r1, 80060c6 <_reclaim_reent+0x6e>
 80060c0:	4620      	mov	r0, r4
 80060c2:	f000 f891 	bl	80061e8 <_free_r>
 80060c6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80060c8:	b111      	cbz	r1, 80060d0 <_reclaim_reent+0x78>
 80060ca:	4620      	mov	r0, r4
 80060cc:	f000 f88c 	bl	80061e8 <_free_r>
 80060d0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80060d2:	b111      	cbz	r1, 80060da <_reclaim_reent+0x82>
 80060d4:	4620      	mov	r0, r4
 80060d6:	f000 f887 	bl	80061e8 <_free_r>
 80060da:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80060dc:	b111      	cbz	r1, 80060e4 <_reclaim_reent+0x8c>
 80060de:	4620      	mov	r0, r4
 80060e0:	f000 f882 	bl	80061e8 <_free_r>
 80060e4:	6a23      	ldr	r3, [r4, #32]
 80060e6:	b14b      	cbz	r3, 80060fc <_reclaim_reent+0xa4>
 80060e8:	4620      	mov	r0, r4
 80060ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80060ee:	4718      	bx	r3
 80060f0:	680e      	ldr	r6, [r1, #0]
 80060f2:	4620      	mov	r0, r4
 80060f4:	f000 f878 	bl	80061e8 <_free_r>
 80060f8:	4631      	mov	r1, r6
 80060fa:	e7bb      	b.n	8006074 <_reclaim_reent+0x1c>
 80060fc:	bd70      	pop	{r4, r5, r6, pc}
 80060fe:	bf00      	nop
 8006100:	2000001c 	.word	0x2000001c

08006104 <_lseek_r>:
 8006104:	b538      	push	{r3, r4, r5, lr}
 8006106:	4d07      	ldr	r5, [pc, #28]	@ (8006124 <_lseek_r+0x20>)
 8006108:	4604      	mov	r4, r0
 800610a:	4608      	mov	r0, r1
 800610c:	4611      	mov	r1, r2
 800610e:	2200      	movs	r2, #0
 8006110:	602a      	str	r2, [r5, #0]
 8006112:	461a      	mov	r2, r3
 8006114:	f7fa fe24 	bl	8000d60 <_lseek>
 8006118:	1c43      	adds	r3, r0, #1
 800611a:	d102      	bne.n	8006122 <_lseek_r+0x1e>
 800611c:	682b      	ldr	r3, [r5, #0]
 800611e:	b103      	cbz	r3, 8006122 <_lseek_r+0x1e>
 8006120:	6023      	str	r3, [r4, #0]
 8006122:	bd38      	pop	{r3, r4, r5, pc}
 8006124:	20004c1c 	.word	0x20004c1c

08006128 <_read_r>:
 8006128:	b538      	push	{r3, r4, r5, lr}
 800612a:	4d07      	ldr	r5, [pc, #28]	@ (8006148 <_read_r+0x20>)
 800612c:	4604      	mov	r4, r0
 800612e:	4608      	mov	r0, r1
 8006130:	4611      	mov	r1, r2
 8006132:	2200      	movs	r2, #0
 8006134:	602a      	str	r2, [r5, #0]
 8006136:	461a      	mov	r2, r3
 8006138:	f7fa fdb2 	bl	8000ca0 <_read>
 800613c:	1c43      	adds	r3, r0, #1
 800613e:	d102      	bne.n	8006146 <_read_r+0x1e>
 8006140:	682b      	ldr	r3, [r5, #0]
 8006142:	b103      	cbz	r3, 8006146 <_read_r+0x1e>
 8006144:	6023      	str	r3, [r4, #0]
 8006146:	bd38      	pop	{r3, r4, r5, pc}
 8006148:	20004c1c 	.word	0x20004c1c

0800614c <_write_r>:
 800614c:	b538      	push	{r3, r4, r5, lr}
 800614e:	4d07      	ldr	r5, [pc, #28]	@ (800616c <_write_r+0x20>)
 8006150:	4604      	mov	r4, r0
 8006152:	4608      	mov	r0, r1
 8006154:	4611      	mov	r1, r2
 8006156:	2200      	movs	r2, #0
 8006158:	602a      	str	r2, [r5, #0]
 800615a:	461a      	mov	r2, r3
 800615c:	f7fa fdbd 	bl	8000cda <_write>
 8006160:	1c43      	adds	r3, r0, #1
 8006162:	d102      	bne.n	800616a <_write_r+0x1e>
 8006164:	682b      	ldr	r3, [r5, #0]
 8006166:	b103      	cbz	r3, 800616a <_write_r+0x1e>
 8006168:	6023      	str	r3, [r4, #0]
 800616a:	bd38      	pop	{r3, r4, r5, pc}
 800616c:	20004c1c 	.word	0x20004c1c

08006170 <__errno>:
 8006170:	4b01      	ldr	r3, [pc, #4]	@ (8006178 <__errno+0x8>)
 8006172:	6818      	ldr	r0, [r3, #0]
 8006174:	4770      	bx	lr
 8006176:	bf00      	nop
 8006178:	2000001c 	.word	0x2000001c

0800617c <__libc_init_array>:
 800617c:	b570      	push	{r4, r5, r6, lr}
 800617e:	4d0d      	ldr	r5, [pc, #52]	@ (80061b4 <__libc_init_array+0x38>)
 8006180:	4c0d      	ldr	r4, [pc, #52]	@ (80061b8 <__libc_init_array+0x3c>)
 8006182:	1b64      	subs	r4, r4, r5
 8006184:	10a4      	asrs	r4, r4, #2
 8006186:	2600      	movs	r6, #0
 8006188:	42a6      	cmp	r6, r4
 800618a:	d109      	bne.n	80061a0 <__libc_init_array+0x24>
 800618c:	4d0b      	ldr	r5, [pc, #44]	@ (80061bc <__libc_init_array+0x40>)
 800618e:	4c0c      	ldr	r4, [pc, #48]	@ (80061c0 <__libc_init_array+0x44>)
 8006190:	f000 fa62 	bl	8006658 <_init>
 8006194:	1b64      	subs	r4, r4, r5
 8006196:	10a4      	asrs	r4, r4, #2
 8006198:	2600      	movs	r6, #0
 800619a:	42a6      	cmp	r6, r4
 800619c:	d105      	bne.n	80061aa <__libc_init_array+0x2e>
 800619e:	bd70      	pop	{r4, r5, r6, pc}
 80061a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80061a4:	4798      	blx	r3
 80061a6:	3601      	adds	r6, #1
 80061a8:	e7ee      	b.n	8006188 <__libc_init_array+0xc>
 80061aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80061ae:	4798      	blx	r3
 80061b0:	3601      	adds	r6, #1
 80061b2:	e7f2      	b.n	800619a <__libc_init_array+0x1e>
 80061b4:	08006810 	.word	0x08006810
 80061b8:	08006810 	.word	0x08006810
 80061bc:	08006810 	.word	0x08006810
 80061c0:	08006814 	.word	0x08006814

080061c4 <__retarget_lock_init_recursive>:
 80061c4:	4770      	bx	lr

080061c6 <__retarget_lock_acquire_recursive>:
 80061c6:	4770      	bx	lr

080061c8 <__retarget_lock_release_recursive>:
 80061c8:	4770      	bx	lr

080061ca <memcpy>:
 80061ca:	440a      	add	r2, r1
 80061cc:	4291      	cmp	r1, r2
 80061ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80061d2:	d100      	bne.n	80061d6 <memcpy+0xc>
 80061d4:	4770      	bx	lr
 80061d6:	b510      	push	{r4, lr}
 80061d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061e0:	4291      	cmp	r1, r2
 80061e2:	d1f9      	bne.n	80061d8 <memcpy+0xe>
 80061e4:	bd10      	pop	{r4, pc}
	...

080061e8 <_free_r>:
 80061e8:	b538      	push	{r3, r4, r5, lr}
 80061ea:	4605      	mov	r5, r0
 80061ec:	2900      	cmp	r1, #0
 80061ee:	d041      	beq.n	8006274 <_free_r+0x8c>
 80061f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061f4:	1f0c      	subs	r4, r1, #4
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	bfb8      	it	lt
 80061fa:	18e4      	addlt	r4, r4, r3
 80061fc:	f000 f8e0 	bl	80063c0 <__malloc_lock>
 8006200:	4a1d      	ldr	r2, [pc, #116]	@ (8006278 <_free_r+0x90>)
 8006202:	6813      	ldr	r3, [r2, #0]
 8006204:	b933      	cbnz	r3, 8006214 <_free_r+0x2c>
 8006206:	6063      	str	r3, [r4, #4]
 8006208:	6014      	str	r4, [r2, #0]
 800620a:	4628      	mov	r0, r5
 800620c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006210:	f000 b8dc 	b.w	80063cc <__malloc_unlock>
 8006214:	42a3      	cmp	r3, r4
 8006216:	d908      	bls.n	800622a <_free_r+0x42>
 8006218:	6820      	ldr	r0, [r4, #0]
 800621a:	1821      	adds	r1, r4, r0
 800621c:	428b      	cmp	r3, r1
 800621e:	bf01      	itttt	eq
 8006220:	6819      	ldreq	r1, [r3, #0]
 8006222:	685b      	ldreq	r3, [r3, #4]
 8006224:	1809      	addeq	r1, r1, r0
 8006226:	6021      	streq	r1, [r4, #0]
 8006228:	e7ed      	b.n	8006206 <_free_r+0x1e>
 800622a:	461a      	mov	r2, r3
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	b10b      	cbz	r3, 8006234 <_free_r+0x4c>
 8006230:	42a3      	cmp	r3, r4
 8006232:	d9fa      	bls.n	800622a <_free_r+0x42>
 8006234:	6811      	ldr	r1, [r2, #0]
 8006236:	1850      	adds	r0, r2, r1
 8006238:	42a0      	cmp	r0, r4
 800623a:	d10b      	bne.n	8006254 <_free_r+0x6c>
 800623c:	6820      	ldr	r0, [r4, #0]
 800623e:	4401      	add	r1, r0
 8006240:	1850      	adds	r0, r2, r1
 8006242:	4283      	cmp	r3, r0
 8006244:	6011      	str	r1, [r2, #0]
 8006246:	d1e0      	bne.n	800620a <_free_r+0x22>
 8006248:	6818      	ldr	r0, [r3, #0]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	6053      	str	r3, [r2, #4]
 800624e:	4408      	add	r0, r1
 8006250:	6010      	str	r0, [r2, #0]
 8006252:	e7da      	b.n	800620a <_free_r+0x22>
 8006254:	d902      	bls.n	800625c <_free_r+0x74>
 8006256:	230c      	movs	r3, #12
 8006258:	602b      	str	r3, [r5, #0]
 800625a:	e7d6      	b.n	800620a <_free_r+0x22>
 800625c:	6820      	ldr	r0, [r4, #0]
 800625e:	1821      	adds	r1, r4, r0
 8006260:	428b      	cmp	r3, r1
 8006262:	bf04      	itt	eq
 8006264:	6819      	ldreq	r1, [r3, #0]
 8006266:	685b      	ldreq	r3, [r3, #4]
 8006268:	6063      	str	r3, [r4, #4]
 800626a:	bf04      	itt	eq
 800626c:	1809      	addeq	r1, r1, r0
 800626e:	6021      	streq	r1, [r4, #0]
 8006270:	6054      	str	r4, [r2, #4]
 8006272:	e7ca      	b.n	800620a <_free_r+0x22>
 8006274:	bd38      	pop	{r3, r4, r5, pc}
 8006276:	bf00      	nop
 8006278:	20004c28 	.word	0x20004c28

0800627c <sbrk_aligned>:
 800627c:	b570      	push	{r4, r5, r6, lr}
 800627e:	4e0f      	ldr	r6, [pc, #60]	@ (80062bc <sbrk_aligned+0x40>)
 8006280:	460c      	mov	r4, r1
 8006282:	6831      	ldr	r1, [r6, #0]
 8006284:	4605      	mov	r5, r0
 8006286:	b911      	cbnz	r1, 800628e <sbrk_aligned+0x12>
 8006288:	f000 f9d6 	bl	8006638 <_sbrk_r>
 800628c:	6030      	str	r0, [r6, #0]
 800628e:	4621      	mov	r1, r4
 8006290:	4628      	mov	r0, r5
 8006292:	f000 f9d1 	bl	8006638 <_sbrk_r>
 8006296:	1c43      	adds	r3, r0, #1
 8006298:	d103      	bne.n	80062a2 <sbrk_aligned+0x26>
 800629a:	f04f 34ff 	mov.w	r4, #4294967295
 800629e:	4620      	mov	r0, r4
 80062a0:	bd70      	pop	{r4, r5, r6, pc}
 80062a2:	1cc4      	adds	r4, r0, #3
 80062a4:	f024 0403 	bic.w	r4, r4, #3
 80062a8:	42a0      	cmp	r0, r4
 80062aa:	d0f8      	beq.n	800629e <sbrk_aligned+0x22>
 80062ac:	1a21      	subs	r1, r4, r0
 80062ae:	4628      	mov	r0, r5
 80062b0:	f000 f9c2 	bl	8006638 <_sbrk_r>
 80062b4:	3001      	adds	r0, #1
 80062b6:	d1f2      	bne.n	800629e <sbrk_aligned+0x22>
 80062b8:	e7ef      	b.n	800629a <sbrk_aligned+0x1e>
 80062ba:	bf00      	nop
 80062bc:	20004c24 	.word	0x20004c24

080062c0 <_malloc_r>:
 80062c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062c4:	1ccd      	adds	r5, r1, #3
 80062c6:	f025 0503 	bic.w	r5, r5, #3
 80062ca:	3508      	adds	r5, #8
 80062cc:	2d0c      	cmp	r5, #12
 80062ce:	bf38      	it	cc
 80062d0:	250c      	movcc	r5, #12
 80062d2:	2d00      	cmp	r5, #0
 80062d4:	4606      	mov	r6, r0
 80062d6:	db01      	blt.n	80062dc <_malloc_r+0x1c>
 80062d8:	42a9      	cmp	r1, r5
 80062da:	d904      	bls.n	80062e6 <_malloc_r+0x26>
 80062dc:	230c      	movs	r3, #12
 80062de:	6033      	str	r3, [r6, #0]
 80062e0:	2000      	movs	r0, #0
 80062e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80063bc <_malloc_r+0xfc>
 80062ea:	f000 f869 	bl	80063c0 <__malloc_lock>
 80062ee:	f8d8 3000 	ldr.w	r3, [r8]
 80062f2:	461c      	mov	r4, r3
 80062f4:	bb44      	cbnz	r4, 8006348 <_malloc_r+0x88>
 80062f6:	4629      	mov	r1, r5
 80062f8:	4630      	mov	r0, r6
 80062fa:	f7ff ffbf 	bl	800627c <sbrk_aligned>
 80062fe:	1c43      	adds	r3, r0, #1
 8006300:	4604      	mov	r4, r0
 8006302:	d158      	bne.n	80063b6 <_malloc_r+0xf6>
 8006304:	f8d8 4000 	ldr.w	r4, [r8]
 8006308:	4627      	mov	r7, r4
 800630a:	2f00      	cmp	r7, #0
 800630c:	d143      	bne.n	8006396 <_malloc_r+0xd6>
 800630e:	2c00      	cmp	r4, #0
 8006310:	d04b      	beq.n	80063aa <_malloc_r+0xea>
 8006312:	6823      	ldr	r3, [r4, #0]
 8006314:	4639      	mov	r1, r7
 8006316:	4630      	mov	r0, r6
 8006318:	eb04 0903 	add.w	r9, r4, r3
 800631c:	f000 f98c 	bl	8006638 <_sbrk_r>
 8006320:	4581      	cmp	r9, r0
 8006322:	d142      	bne.n	80063aa <_malloc_r+0xea>
 8006324:	6821      	ldr	r1, [r4, #0]
 8006326:	1a6d      	subs	r5, r5, r1
 8006328:	4629      	mov	r1, r5
 800632a:	4630      	mov	r0, r6
 800632c:	f7ff ffa6 	bl	800627c <sbrk_aligned>
 8006330:	3001      	adds	r0, #1
 8006332:	d03a      	beq.n	80063aa <_malloc_r+0xea>
 8006334:	6823      	ldr	r3, [r4, #0]
 8006336:	442b      	add	r3, r5
 8006338:	6023      	str	r3, [r4, #0]
 800633a:	f8d8 3000 	ldr.w	r3, [r8]
 800633e:	685a      	ldr	r2, [r3, #4]
 8006340:	bb62      	cbnz	r2, 800639c <_malloc_r+0xdc>
 8006342:	f8c8 7000 	str.w	r7, [r8]
 8006346:	e00f      	b.n	8006368 <_malloc_r+0xa8>
 8006348:	6822      	ldr	r2, [r4, #0]
 800634a:	1b52      	subs	r2, r2, r5
 800634c:	d420      	bmi.n	8006390 <_malloc_r+0xd0>
 800634e:	2a0b      	cmp	r2, #11
 8006350:	d917      	bls.n	8006382 <_malloc_r+0xc2>
 8006352:	1961      	adds	r1, r4, r5
 8006354:	42a3      	cmp	r3, r4
 8006356:	6025      	str	r5, [r4, #0]
 8006358:	bf18      	it	ne
 800635a:	6059      	strne	r1, [r3, #4]
 800635c:	6863      	ldr	r3, [r4, #4]
 800635e:	bf08      	it	eq
 8006360:	f8c8 1000 	streq.w	r1, [r8]
 8006364:	5162      	str	r2, [r4, r5]
 8006366:	604b      	str	r3, [r1, #4]
 8006368:	4630      	mov	r0, r6
 800636a:	f000 f82f 	bl	80063cc <__malloc_unlock>
 800636e:	f104 000b 	add.w	r0, r4, #11
 8006372:	1d23      	adds	r3, r4, #4
 8006374:	f020 0007 	bic.w	r0, r0, #7
 8006378:	1ac2      	subs	r2, r0, r3
 800637a:	bf1c      	itt	ne
 800637c:	1a1b      	subne	r3, r3, r0
 800637e:	50a3      	strne	r3, [r4, r2]
 8006380:	e7af      	b.n	80062e2 <_malloc_r+0x22>
 8006382:	6862      	ldr	r2, [r4, #4]
 8006384:	42a3      	cmp	r3, r4
 8006386:	bf0c      	ite	eq
 8006388:	f8c8 2000 	streq.w	r2, [r8]
 800638c:	605a      	strne	r2, [r3, #4]
 800638e:	e7eb      	b.n	8006368 <_malloc_r+0xa8>
 8006390:	4623      	mov	r3, r4
 8006392:	6864      	ldr	r4, [r4, #4]
 8006394:	e7ae      	b.n	80062f4 <_malloc_r+0x34>
 8006396:	463c      	mov	r4, r7
 8006398:	687f      	ldr	r7, [r7, #4]
 800639a:	e7b6      	b.n	800630a <_malloc_r+0x4a>
 800639c:	461a      	mov	r2, r3
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	42a3      	cmp	r3, r4
 80063a2:	d1fb      	bne.n	800639c <_malloc_r+0xdc>
 80063a4:	2300      	movs	r3, #0
 80063a6:	6053      	str	r3, [r2, #4]
 80063a8:	e7de      	b.n	8006368 <_malloc_r+0xa8>
 80063aa:	230c      	movs	r3, #12
 80063ac:	6033      	str	r3, [r6, #0]
 80063ae:	4630      	mov	r0, r6
 80063b0:	f000 f80c 	bl	80063cc <__malloc_unlock>
 80063b4:	e794      	b.n	80062e0 <_malloc_r+0x20>
 80063b6:	6005      	str	r5, [r0, #0]
 80063b8:	e7d6      	b.n	8006368 <_malloc_r+0xa8>
 80063ba:	bf00      	nop
 80063bc:	20004c28 	.word	0x20004c28

080063c0 <__malloc_lock>:
 80063c0:	4801      	ldr	r0, [pc, #4]	@ (80063c8 <__malloc_lock+0x8>)
 80063c2:	f7ff bf00 	b.w	80061c6 <__retarget_lock_acquire_recursive>
 80063c6:	bf00      	nop
 80063c8:	20004c20 	.word	0x20004c20

080063cc <__malloc_unlock>:
 80063cc:	4801      	ldr	r0, [pc, #4]	@ (80063d4 <__malloc_unlock+0x8>)
 80063ce:	f7ff befb 	b.w	80061c8 <__retarget_lock_release_recursive>
 80063d2:	bf00      	nop
 80063d4:	20004c20 	.word	0x20004c20

080063d8 <__sflush_r>:
 80063d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80063dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063e0:	0716      	lsls	r6, r2, #28
 80063e2:	4605      	mov	r5, r0
 80063e4:	460c      	mov	r4, r1
 80063e6:	d454      	bmi.n	8006492 <__sflush_r+0xba>
 80063e8:	684b      	ldr	r3, [r1, #4]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	dc02      	bgt.n	80063f4 <__sflush_r+0x1c>
 80063ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	dd48      	ble.n	8006486 <__sflush_r+0xae>
 80063f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80063f6:	2e00      	cmp	r6, #0
 80063f8:	d045      	beq.n	8006486 <__sflush_r+0xae>
 80063fa:	2300      	movs	r3, #0
 80063fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006400:	682f      	ldr	r7, [r5, #0]
 8006402:	6a21      	ldr	r1, [r4, #32]
 8006404:	602b      	str	r3, [r5, #0]
 8006406:	d030      	beq.n	800646a <__sflush_r+0x92>
 8006408:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800640a:	89a3      	ldrh	r3, [r4, #12]
 800640c:	0759      	lsls	r1, r3, #29
 800640e:	d505      	bpl.n	800641c <__sflush_r+0x44>
 8006410:	6863      	ldr	r3, [r4, #4]
 8006412:	1ad2      	subs	r2, r2, r3
 8006414:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006416:	b10b      	cbz	r3, 800641c <__sflush_r+0x44>
 8006418:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800641a:	1ad2      	subs	r2, r2, r3
 800641c:	2300      	movs	r3, #0
 800641e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006420:	6a21      	ldr	r1, [r4, #32]
 8006422:	4628      	mov	r0, r5
 8006424:	47b0      	blx	r6
 8006426:	1c43      	adds	r3, r0, #1
 8006428:	89a3      	ldrh	r3, [r4, #12]
 800642a:	d106      	bne.n	800643a <__sflush_r+0x62>
 800642c:	6829      	ldr	r1, [r5, #0]
 800642e:	291d      	cmp	r1, #29
 8006430:	d82b      	bhi.n	800648a <__sflush_r+0xb2>
 8006432:	4a2a      	ldr	r2, [pc, #168]	@ (80064dc <__sflush_r+0x104>)
 8006434:	410a      	asrs	r2, r1
 8006436:	07d6      	lsls	r6, r2, #31
 8006438:	d427      	bmi.n	800648a <__sflush_r+0xb2>
 800643a:	2200      	movs	r2, #0
 800643c:	6062      	str	r2, [r4, #4]
 800643e:	04d9      	lsls	r1, r3, #19
 8006440:	6922      	ldr	r2, [r4, #16]
 8006442:	6022      	str	r2, [r4, #0]
 8006444:	d504      	bpl.n	8006450 <__sflush_r+0x78>
 8006446:	1c42      	adds	r2, r0, #1
 8006448:	d101      	bne.n	800644e <__sflush_r+0x76>
 800644a:	682b      	ldr	r3, [r5, #0]
 800644c:	b903      	cbnz	r3, 8006450 <__sflush_r+0x78>
 800644e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006450:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006452:	602f      	str	r7, [r5, #0]
 8006454:	b1b9      	cbz	r1, 8006486 <__sflush_r+0xae>
 8006456:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800645a:	4299      	cmp	r1, r3
 800645c:	d002      	beq.n	8006464 <__sflush_r+0x8c>
 800645e:	4628      	mov	r0, r5
 8006460:	f7ff fec2 	bl	80061e8 <_free_r>
 8006464:	2300      	movs	r3, #0
 8006466:	6363      	str	r3, [r4, #52]	@ 0x34
 8006468:	e00d      	b.n	8006486 <__sflush_r+0xae>
 800646a:	2301      	movs	r3, #1
 800646c:	4628      	mov	r0, r5
 800646e:	47b0      	blx	r6
 8006470:	4602      	mov	r2, r0
 8006472:	1c50      	adds	r0, r2, #1
 8006474:	d1c9      	bne.n	800640a <__sflush_r+0x32>
 8006476:	682b      	ldr	r3, [r5, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d0c6      	beq.n	800640a <__sflush_r+0x32>
 800647c:	2b1d      	cmp	r3, #29
 800647e:	d001      	beq.n	8006484 <__sflush_r+0xac>
 8006480:	2b16      	cmp	r3, #22
 8006482:	d11e      	bne.n	80064c2 <__sflush_r+0xea>
 8006484:	602f      	str	r7, [r5, #0]
 8006486:	2000      	movs	r0, #0
 8006488:	e022      	b.n	80064d0 <__sflush_r+0xf8>
 800648a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800648e:	b21b      	sxth	r3, r3
 8006490:	e01b      	b.n	80064ca <__sflush_r+0xf2>
 8006492:	690f      	ldr	r7, [r1, #16]
 8006494:	2f00      	cmp	r7, #0
 8006496:	d0f6      	beq.n	8006486 <__sflush_r+0xae>
 8006498:	0793      	lsls	r3, r2, #30
 800649a:	680e      	ldr	r6, [r1, #0]
 800649c:	bf08      	it	eq
 800649e:	694b      	ldreq	r3, [r1, #20]
 80064a0:	600f      	str	r7, [r1, #0]
 80064a2:	bf18      	it	ne
 80064a4:	2300      	movne	r3, #0
 80064a6:	eba6 0807 	sub.w	r8, r6, r7
 80064aa:	608b      	str	r3, [r1, #8]
 80064ac:	f1b8 0f00 	cmp.w	r8, #0
 80064b0:	dde9      	ble.n	8006486 <__sflush_r+0xae>
 80064b2:	6a21      	ldr	r1, [r4, #32]
 80064b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80064b6:	4643      	mov	r3, r8
 80064b8:	463a      	mov	r2, r7
 80064ba:	4628      	mov	r0, r5
 80064bc:	47b0      	blx	r6
 80064be:	2800      	cmp	r0, #0
 80064c0:	dc08      	bgt.n	80064d4 <__sflush_r+0xfc>
 80064c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064ca:	81a3      	strh	r3, [r4, #12]
 80064cc:	f04f 30ff 	mov.w	r0, #4294967295
 80064d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064d4:	4407      	add	r7, r0
 80064d6:	eba8 0800 	sub.w	r8, r8, r0
 80064da:	e7e7      	b.n	80064ac <__sflush_r+0xd4>
 80064dc:	dfbffffe 	.word	0xdfbffffe

080064e0 <_fflush_r>:
 80064e0:	b538      	push	{r3, r4, r5, lr}
 80064e2:	690b      	ldr	r3, [r1, #16]
 80064e4:	4605      	mov	r5, r0
 80064e6:	460c      	mov	r4, r1
 80064e8:	b913      	cbnz	r3, 80064f0 <_fflush_r+0x10>
 80064ea:	2500      	movs	r5, #0
 80064ec:	4628      	mov	r0, r5
 80064ee:	bd38      	pop	{r3, r4, r5, pc}
 80064f0:	b118      	cbz	r0, 80064fa <_fflush_r+0x1a>
 80064f2:	6a03      	ldr	r3, [r0, #32]
 80064f4:	b90b      	cbnz	r3, 80064fa <_fflush_r+0x1a>
 80064f6:	f7ff fc2b 	bl	8005d50 <__sinit>
 80064fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d0f3      	beq.n	80064ea <_fflush_r+0xa>
 8006502:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006504:	07d0      	lsls	r0, r2, #31
 8006506:	d404      	bmi.n	8006512 <_fflush_r+0x32>
 8006508:	0599      	lsls	r1, r3, #22
 800650a:	d402      	bmi.n	8006512 <_fflush_r+0x32>
 800650c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800650e:	f7ff fe5a 	bl	80061c6 <__retarget_lock_acquire_recursive>
 8006512:	4628      	mov	r0, r5
 8006514:	4621      	mov	r1, r4
 8006516:	f7ff ff5f 	bl	80063d8 <__sflush_r>
 800651a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800651c:	07da      	lsls	r2, r3, #31
 800651e:	4605      	mov	r5, r0
 8006520:	d4e4      	bmi.n	80064ec <_fflush_r+0xc>
 8006522:	89a3      	ldrh	r3, [r4, #12]
 8006524:	059b      	lsls	r3, r3, #22
 8006526:	d4e1      	bmi.n	80064ec <_fflush_r+0xc>
 8006528:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800652a:	f7ff fe4d 	bl	80061c8 <__retarget_lock_release_recursive>
 800652e:	e7dd      	b.n	80064ec <_fflush_r+0xc>

08006530 <__swhatbuf_r>:
 8006530:	b570      	push	{r4, r5, r6, lr}
 8006532:	460c      	mov	r4, r1
 8006534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006538:	2900      	cmp	r1, #0
 800653a:	b096      	sub	sp, #88	@ 0x58
 800653c:	4615      	mov	r5, r2
 800653e:	461e      	mov	r6, r3
 8006540:	da0d      	bge.n	800655e <__swhatbuf_r+0x2e>
 8006542:	89a3      	ldrh	r3, [r4, #12]
 8006544:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006548:	f04f 0100 	mov.w	r1, #0
 800654c:	bf14      	ite	ne
 800654e:	2340      	movne	r3, #64	@ 0x40
 8006550:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006554:	2000      	movs	r0, #0
 8006556:	6031      	str	r1, [r6, #0]
 8006558:	602b      	str	r3, [r5, #0]
 800655a:	b016      	add	sp, #88	@ 0x58
 800655c:	bd70      	pop	{r4, r5, r6, pc}
 800655e:	466a      	mov	r2, sp
 8006560:	f000 f848 	bl	80065f4 <_fstat_r>
 8006564:	2800      	cmp	r0, #0
 8006566:	dbec      	blt.n	8006542 <__swhatbuf_r+0x12>
 8006568:	9901      	ldr	r1, [sp, #4]
 800656a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800656e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006572:	4259      	negs	r1, r3
 8006574:	4159      	adcs	r1, r3
 8006576:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800657a:	e7eb      	b.n	8006554 <__swhatbuf_r+0x24>

0800657c <__smakebuf_r>:
 800657c:	898b      	ldrh	r3, [r1, #12]
 800657e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006580:	079d      	lsls	r5, r3, #30
 8006582:	4606      	mov	r6, r0
 8006584:	460c      	mov	r4, r1
 8006586:	d507      	bpl.n	8006598 <__smakebuf_r+0x1c>
 8006588:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800658c:	6023      	str	r3, [r4, #0]
 800658e:	6123      	str	r3, [r4, #16]
 8006590:	2301      	movs	r3, #1
 8006592:	6163      	str	r3, [r4, #20]
 8006594:	b003      	add	sp, #12
 8006596:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006598:	ab01      	add	r3, sp, #4
 800659a:	466a      	mov	r2, sp
 800659c:	f7ff ffc8 	bl	8006530 <__swhatbuf_r>
 80065a0:	9f00      	ldr	r7, [sp, #0]
 80065a2:	4605      	mov	r5, r0
 80065a4:	4639      	mov	r1, r7
 80065a6:	4630      	mov	r0, r6
 80065a8:	f7ff fe8a 	bl	80062c0 <_malloc_r>
 80065ac:	b948      	cbnz	r0, 80065c2 <__smakebuf_r+0x46>
 80065ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065b2:	059a      	lsls	r2, r3, #22
 80065b4:	d4ee      	bmi.n	8006594 <__smakebuf_r+0x18>
 80065b6:	f023 0303 	bic.w	r3, r3, #3
 80065ba:	f043 0302 	orr.w	r3, r3, #2
 80065be:	81a3      	strh	r3, [r4, #12]
 80065c0:	e7e2      	b.n	8006588 <__smakebuf_r+0xc>
 80065c2:	89a3      	ldrh	r3, [r4, #12]
 80065c4:	6020      	str	r0, [r4, #0]
 80065c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065ca:	81a3      	strh	r3, [r4, #12]
 80065cc:	9b01      	ldr	r3, [sp, #4]
 80065ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80065d2:	b15b      	cbz	r3, 80065ec <__smakebuf_r+0x70>
 80065d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065d8:	4630      	mov	r0, r6
 80065da:	f000 f81d 	bl	8006618 <_isatty_r>
 80065de:	b128      	cbz	r0, 80065ec <__smakebuf_r+0x70>
 80065e0:	89a3      	ldrh	r3, [r4, #12]
 80065e2:	f023 0303 	bic.w	r3, r3, #3
 80065e6:	f043 0301 	orr.w	r3, r3, #1
 80065ea:	81a3      	strh	r3, [r4, #12]
 80065ec:	89a3      	ldrh	r3, [r4, #12]
 80065ee:	431d      	orrs	r5, r3
 80065f0:	81a5      	strh	r5, [r4, #12]
 80065f2:	e7cf      	b.n	8006594 <__smakebuf_r+0x18>

080065f4 <_fstat_r>:
 80065f4:	b538      	push	{r3, r4, r5, lr}
 80065f6:	4d07      	ldr	r5, [pc, #28]	@ (8006614 <_fstat_r+0x20>)
 80065f8:	2300      	movs	r3, #0
 80065fa:	4604      	mov	r4, r0
 80065fc:	4608      	mov	r0, r1
 80065fe:	4611      	mov	r1, r2
 8006600:	602b      	str	r3, [r5, #0]
 8006602:	f7fa fb92 	bl	8000d2a <_fstat>
 8006606:	1c43      	adds	r3, r0, #1
 8006608:	d102      	bne.n	8006610 <_fstat_r+0x1c>
 800660a:	682b      	ldr	r3, [r5, #0]
 800660c:	b103      	cbz	r3, 8006610 <_fstat_r+0x1c>
 800660e:	6023      	str	r3, [r4, #0]
 8006610:	bd38      	pop	{r3, r4, r5, pc}
 8006612:	bf00      	nop
 8006614:	20004c1c 	.word	0x20004c1c

08006618 <_isatty_r>:
 8006618:	b538      	push	{r3, r4, r5, lr}
 800661a:	4d06      	ldr	r5, [pc, #24]	@ (8006634 <_isatty_r+0x1c>)
 800661c:	2300      	movs	r3, #0
 800661e:	4604      	mov	r4, r0
 8006620:	4608      	mov	r0, r1
 8006622:	602b      	str	r3, [r5, #0]
 8006624:	f7fa fb91 	bl	8000d4a <_isatty>
 8006628:	1c43      	adds	r3, r0, #1
 800662a:	d102      	bne.n	8006632 <_isatty_r+0x1a>
 800662c:	682b      	ldr	r3, [r5, #0]
 800662e:	b103      	cbz	r3, 8006632 <_isatty_r+0x1a>
 8006630:	6023      	str	r3, [r4, #0]
 8006632:	bd38      	pop	{r3, r4, r5, pc}
 8006634:	20004c1c 	.word	0x20004c1c

08006638 <_sbrk_r>:
 8006638:	b538      	push	{r3, r4, r5, lr}
 800663a:	4d06      	ldr	r5, [pc, #24]	@ (8006654 <_sbrk_r+0x1c>)
 800663c:	2300      	movs	r3, #0
 800663e:	4604      	mov	r4, r0
 8006640:	4608      	mov	r0, r1
 8006642:	602b      	str	r3, [r5, #0]
 8006644:	f7fa fb9a 	bl	8000d7c <_sbrk>
 8006648:	1c43      	adds	r3, r0, #1
 800664a:	d102      	bne.n	8006652 <_sbrk_r+0x1a>
 800664c:	682b      	ldr	r3, [r5, #0]
 800664e:	b103      	cbz	r3, 8006652 <_sbrk_r+0x1a>
 8006650:	6023      	str	r3, [r4, #0]
 8006652:	bd38      	pop	{r3, r4, r5, pc}
 8006654:	20004c1c 	.word	0x20004c1c

08006658 <_init>:
 8006658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800665a:	bf00      	nop
 800665c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800665e:	bc08      	pop	{r3}
 8006660:	469e      	mov	lr, r3
 8006662:	4770      	bx	lr

08006664 <_fini>:
 8006664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006666:	bf00      	nop
 8006668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800666a:	bc08      	pop	{r3}
 800666c:	469e      	mov	lr, r3
 800666e:	4770      	bx	lr
